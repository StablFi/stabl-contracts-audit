{
  "address": "0x24E43AA88663efB968441E6E0f99E64C32490875",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rebaseManager",
          "type": "address"
        }
      ],
      "name": "addRebaseManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategyWithWeights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct VaultStorage.StrategyWithWeight[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuickDepositStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyWithWeight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct VaultStorage.StrategyWithWeight",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cash",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isRebaseManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "labsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "labsFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPayoutTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutTimeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUSDMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceUSDRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quickDepositStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyFromAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategyToAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "reallocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rebaseManagers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setAssetDefaultStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setAutoAllocateThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dripper",
          "type": "address"
        }
      ],
      "name": "setDripper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_labsAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_labsFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_teamFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setFeeParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "setHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupplyDiff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextPayoutTime",
          "type": "uint256"
        }
      ],
      "name": "setNextPayoutTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_payoutPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutTimeRange",
          "type": "uint256"
        }
      ],
      "name": "setPayoutIntervals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryStable",
          "type": "address"
        }
      ],
      "name": "setPrimaryStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_quickDepositStrategies",
          "type": "address[]"
        }
      ],
      "name": "setQuickDepositStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setRebaseThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStrategistAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct VaultStorage.StrategyWithWeight[]",
          "name": "_strategyWithWeights",
          "type": "tuple[]"
        }
      ],
      "name": "setStrategyWithWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        }
      ],
      "name": "setSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "setVaultBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyWithWeightPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyWithWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllFromStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategyAddr",
          "type": "address"
        }
      ],
      "name": "withdrawAllFromStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x134d3e1ab44a077938193b44c9277aed2e36010116eab4146e340ef799edcf79",
  "receipt": {
    "to": null,
    "from": "0x442bB41E499bB21aFc6a42327C9E257a7d09872e",
    "contractAddress": "0x24E43AA88663efB968441E6E0f99E64C32490875",
    "transactionIndex": 29,
    "gasUsed": "4903860",
    "logsBloom": "0x000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000008000000000000000000001000000000000000000000200000000000000000008000000000000000000800000040000000000040000000000000000000000000000000000000000000010000000000000002000000000000020000000000000000000000000000000010000000000000040000000000000000000110000000000000010000000000000001008000000a0000000000000040000000000000000000000000000000000000000000000100000",
    "blockHash": "0xc6cad112fb240863383cb6f12bc0989f9ceaa66657da4a7d0e648dd93fd17d70",
    "transactionHash": "0x134d3e1ab44a077938193b44c9277aed2e36010116eab4146e340ef799edcf79",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 32454516,
        "transactionHash": "0x134d3e1ab44a077938193b44c9277aed2e36010116eab4146e340ef799edcf79",
        "address": "0x24E43AA88663efB968441E6E0f99E64C32490875",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0xc6cad112fb240863383cb6f12bc0989f9ceaa66657da4a7d0e648dd93fd17d70"
      },
      {
        "transactionIndex": 29,
        "blockNumber": 32454516,
        "transactionHash": "0x134d3e1ab44a077938193b44c9277aed2e36010116eab4146e340ef799edcf79",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002b8e159b4f6124c0000000000000000000000000000000000000000000000004ef0f3bea4c02b3a00000000000000000000000000000000000000000000276ec526165eb96417b00000000000000000000000000000000000000000000000004c381264efca18ee00000000000000000000000000000000000000000000276ec7def7b86e5a29fc",
        "logIndex": 103,
        "blockHash": "0xc6cad112fb240863383cb6f12bc0989f9ceaa66657da4a7d0e648dd93fd17d70"
      }
    ],
    "blockNumber": 32454516,
    "cumulativeGasUsed": "9087919",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4f99ffea6c3ba8cd3ef8d713c842ef03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebaseManager\",\"type\":\"address\"}],\"name\":\"addRebaseManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategyWithWeights\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct VaultStorage.StrategyWithWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuickDepositStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyWithWeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct VaultStorage.StrategyWithWeight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cash\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isRebaseManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"labsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"labsFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPayoutTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutTimeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUSDMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceUSDRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quickDepositStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyFromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyToAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"reallocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebaseManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setAssetDefaultStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setAutoAllocateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dripper\",\"type\":\"address\"}],\"name\":\"setDripper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_labsAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_labsFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teamFeeBps\",\"type\":\"uint256\"}],\"name\":\"setFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyDiff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextPayoutTime\",\"type\":\"uint256\"}],\"name\":\"setNextPayoutTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutTimeRange\",\"type\":\"uint256\"}],\"name\":\"setPayoutIntervals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryStable\",\"type\":\"address\"}],\"name\":\"setPrimaryStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_quickDepositStrategies\",\"type\":\"address[]\"}],\"name\":\"setQuickDepositStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRebaseThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"setRedeemFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStrategistAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct VaultStorage.StrategyWithWeight[]\",\"name\":\"_strategyWithWeights\",\"type\":\"tuple[]\"}],\"name\":\"setStrategyWithWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"setVaultBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyWithWeightPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyWithWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllFromStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"withdrawAllFromStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRebaseManager(address)\":{\"details\":\"Set rebase managers to allow rebasing to specific external users\",\"params\":{\"_rebaseManager\":\"Candidate for Rebase Manager\"}},\"approveStrategy(address)\":{\"details\":\"Add a strategy to the Vault.\",\"params\":{\"_addr\":\"Address of the strategy to add\"}},\"balance()\":{\"details\":\"Balance the Vault with predefined weights\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"getAllStrategyWithWeights()\":{\"details\":\"Accessor function for strategyWithWeights\",\"returns\":{\"_0\":\"strategyWithWeights StrategyWithWeight[] object\"}},\"getFeeParams()\":{\"details\":\"Get Fee parameters for Labs and Team\",\"returns\":{\"_0\":\"Tuple containing the Lab address, Lab % in Bps, Team address, Team % in Bps\"}},\"getQuickDepositStrategies()\":{\"details\":\"Get the quick deposit strategies for quickAllocation of funds.\",\"returns\":{\"_0\":\"QuickDepositStrategies Array of pre-appproved startegy addresses\"}},\"getStrategyWithWeight(address)\":{\"details\":\"Utility function to return the StrategyWithWeight object by strategy address\",\"params\":{\"strategy\":\"address of the strategy\"},\"returns\":{\"_0\":\"StrategyWithWeight object against the address\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"isRebaseManager(address)\":{\"details\":\"Check if the an address is actually a Rebase Manager\",\"params\":{\"_sender\":\"address to check if it is among Rebase Managers\"}},\"pauseCapital()\":{\"details\":\"Set the deposit paused flag to true to prevent capital movement.\"},\"pauseRebase()\":{\"details\":\"Set the deposit paused flag to true to prevent rebasing.\"},\"payout()\":{\"details\":\"Function to collect rewards from Strategies and Balance the Vault\"},\"priceUSDMint(address)\":{\"details\":\"Returns the total price in 18 digit USD for a given asset.      Never goes above 1, since that is how we price mints\",\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"_0\":\"uint256 USD price of 1 of the asset, in 18 decimal fixed\"}},\"priceUSDRedeem(address)\":{\"details\":\"Returns the total price in 18 digit USD for a given asset.      Never goes below 1, since that is how we price redeems\",\"params\":{\"asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"uint256 USD price of 1 of the asset, in 18 decimal fixed\"}},\"reallocate(address,address,address[],uint256[])\":{\"params\":{\"_amounts\":\"Array of amounts of each corresponding asset to move.\",\"_assets\":\"Array of asset address that will be moved\",\"_strategyFromAddress\":\"Address of Strategy to move assets from.\",\"_strategyToAddress\":\"Address of Strategy to move assets to.\"}},\"removeStrategy(address)\":{\"details\":\"Remove a strategy from the Vault.\",\"params\":{\"_addr\":\"Address of the strategy to remove\"}},\"setAdminImpl(address)\":{\"details\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\",\"params\":{\"newImpl\":\"address of the implementation\"}},\"setAssetDefaultStrategy(address,address)\":{\"details\":\"Set the default Strategy for an asset, i.e. the one which the asset will be automatically allocated to and withdrawn from\",\"params\":{\"_asset\":\"Address of the asset\",\"_strategy\":\"Address of the Strategy\"}},\"setAutoAllocateThreshold(uint256)\":{\"details\":\"Sets the minimum amount of CASH in a mint to trigger an automatic allocation of funds afterwords.\",\"params\":{\"_threshold\":\"CASH amount with 18 fixed decimals.\"}},\"setDripper(address)\":{\"details\":\"Set the Dripper address in the Value\",\"params\":{\"_dripper\":\"Address of the Dripper\"}},\"setFeeParams(address,uint256,address,uint256)\":{\"details\":\"Set the Fee Distribution Parameters for Vault (currently not used, but may be infuture) and for Harvester\",\"params\":{\"_labsAddress\":\"address of the Labs account\",\"_labsFeeBps\":\"% in bps which Labs would recieve\",\"_teamAddress\":\"address of the Team account\",\"_teamFeeBps\":\"% in bps which Team would recieve\"}},\"setHarvester(address)\":{\"details\":\"Set the Harvester address in the Vault\",\"params\":{\"_harvester\":\"Address of Harvester\"}},\"setMaxSupplyDiff(uint256)\":{\"details\":\"Sets the maximum allowable difference between total supply and backing assets' value.\"},\"setNextPayoutTime(uint256)\":{\"details\":\"Set nextPayoutTime timestamp. Should be called once at the time initialization Can be arbitary as it will auto set by payout()\",\"params\":{\"_nextPayoutTime\":\"timestamp of next Payout\"}},\"setPayoutIntervals(uint256,uint256)\":{\"details\":\"Set _payoutPeriod and _payoutPeriod duration.\",\"params\":{\"_payoutPeriod\":\"Period for the payout. Ex: 24 * 60 * 60;\",\"_payoutTimeRange\":\"duration to honor payout time. Ex: 15 * 60;\"}},\"setPriceProvider(address)\":{\"details\":\"Set address of price provider.\",\"params\":{\"_priceProvider\":\"Address of price provider\"}},\"setPrimaryStable(address)\":{\"details\":\"Set the Primary Stable address\",\"params\":{\"_primaryStable\":\"Address of the Primary Stable\"}},\"setQuickDepositStrategies(address[])\":{\"details\":\"Set the quick deposit strategies for quickAllocation of funds.\",\"params\":{\"_quickDepositStrategies\":\"Array of pre-appproved startegy addresses\"}},\"setRebaseThreshold(uint256)\":{\"details\":\"Set a minimum amount of CASH in a mint or redeem that triggers a rebase\",\"params\":{\"_threshold\":\"CASH amount with 18 fixed decimals.\"}},\"setRedeemFeeBps(uint256)\":{\"details\":\"Set a fee in basis points to be charged for a redeem.\",\"params\":{\"_redeemFeeBps\":\"Basis point fee to be charged\"}},\"setStrategistAddr(address)\":{\"details\":\"Set address of Strategist\",\"params\":{\"_address\":\"Address of Strategist\"}},\"setStrategyWithWeights((address,uint256,uint256,uint256,bool,bool)[])\":{\"details\":\"Set the Weight against each strategy\",\"params\":{\"_strategyWithWeights\":\"Array of StrategyWithWeight structs to set\"}},\"setSwapper(address,bytes32)\":{\"details\":\"Set the Balancer Vault as primary swapper for the Vault\",\"params\":{\"_balancerPoolId\":\"Id of the Balancer Pool to use for swapping\",\"_balancerVault\":\"Address of Balancer Vault\"}},\"setVaultBuffer(uint256)\":{\"details\":\"Set a buffer of assets to keep in the Vault to handle most redemptions without needing to spend gas unwinding assets from a Strategy.\",\"params\":{\"_vaultBuffer\":\"Percentage using 18 decimals. 100% = 1e18.\"}},\"supportAsset(address)\":{\"details\":\"Add a supported asset to the contract, i.e. one that can be         to mint CASH.\",\"params\":{\"_asset\":\"Address of asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"unpauseCapital()\":{\"details\":\"Set the deposit paused flag to false to enable capital movement.\"},\"unpauseRebase()\":{\"details\":\"Set the deposit paused flag to true to allow rebasing.\"},\"withdrawAllFromStrategies()\":{\"details\":\"Withdraws all assets from all the strategies and sends assets to the Vault.\"},\"withdrawAllFromStrategy(address)\":{\"details\":\"Withdraws all assets from the strategy and sends assets to the Vault.\",\"params\":{\"_strategyAddr\":\"Strategy address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"reallocate(address,address,address[],uint256[])\":{\"notice\":\"Move assets from one Strategy to another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/Vault.sol\":\"Vault\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBasicToken {\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c53c94ab507ab0f44e541d130910e822d39d724bd88bf7c66de5a411334cfb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IDripper.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDripper {\\r\\n    function availableFunds() external view returns (uint256);\\r\\n    function collect() external;\\r\\n    function collectAndRebase() external;\\r\\n    function setDripDuration(uint256 _durationSeconds) external;\\r\\n    function transferToken(address _asset, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8524cc82da171c471c35c5a51541b318c7e2ba5b0a4fa8ac6bb92f8dba0a6e2b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IHarvester {\\r\\n    event RewardTokenConfigUpdated(\\r\\n        address _tokenAddress,\\r\\n        uint16 _allowedSlippageBps,\\r\\n        uint16 _harvestRewardBps,\\r\\n        address _uniswapV2CompatibleAddr,\\r\\n        uint256 _liquidationLimit,\\r\\n        bool _doSwapRewardToken\\r\\n    );\\r\\n\\r\\n    // Governable.sol\\r\\n    function transferGovernance(address _newGovernor) external;\\r\\n\\r\\n    function claimGovernance() external;\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    // Harvester.sol\\r\\n    function addSwapToken(address _addr) external;\\r\\n\\r\\n    function removeSwapToken(address _addr) external;\\r\\n\\r\\n    function setRewardsProceedsAddress(address _rewardProceedsAddress) external;\\r\\n    function setLabs(address _labs, uint256 _feeBps) external;\\r\\n    function setTeam(address _team, uint256 _feeBps) external;\\r\\n    function getLabs() external view returns (address, uint256);\\r\\n    function getTeam() external view returns (address, uint256);\\r\\n\\r\\n    function harvest() external;\\r\\n\\r\\n    function harvest(address _strategyAddr) external;\\r\\n\\r\\n    function harvestAndDistribute() external;\\r\\n\\r\\n    function harvestAndDistribute(address _strategyAddr) external;\\r\\n\\r\\n    function harvestAndDistribute(address _strategyAddr, address _rewardTo) external;\\r\\n\\r\\n    function distributeFees() external;\\r\\n\\r\\n    function distributeProceeds() external;\\r\\n\\r\\n    function setSupportedStrategy(address _strategyAddress, bool _isSupported)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf1461fdc8257193121e4735175b736ddc864a1dd45c58409af45ced7257927f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOracle {\\r\\n    /**\\r\\n     * @dev returns the asset price in USD, 8 decimal digits.\\r\\n     */\\r\\n    function price(address asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xe3b32f2e9346450f3a8b8c060e57e0f44cd79bf41fc70095ee0b32020c0f6c81\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\r\\n */\\r\\ninterface IStrategy {\\r\\n    /**\\r\\n     * @dev Deposit the given asset to platform\\r\\n     * @param _asset asset address\\r\\n     * @param _amount Amount to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\r\\n     *      to the platform\\r\\n     */\\r\\n    function depositAll() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw given asset from Lending platform\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\r\\n     */\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current balance of the given asset.\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns bool indicating whether strategy supports asset.\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Collect reward tokens from the Strategy.\\r\\n     */\\r\\n    function collectRewardTokens() external;\\r\\n\\r\\n    /**\\r\\n     * @dev The address array of the reward tokens for the Strategy.\\r\\n     */\\r\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ed8a145510da0d501b90c0f3023a9a4051aa0ca58df1079b38114c6a1c724aa\",\"license\":\"agpl-3.0\"},\"contracts/token/CASH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Token Contract\\r\\n * @dev ERC20 compatible contract for CASH\\r\\n * @dev Implements an elastic supply\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\n/**\\r\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\r\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\r\\n * rebasing design. Any integrations with CASH should be aware.\\r\\n */\\r\\n\\r\\ncontract CASH is Initializable, InitializableERC20Detailed, Governable {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    event TotalSupplyUpdatedHighres(\\r\\n        uint256 totalSupply,\\r\\n        uint256 rebasingCredits,\\r\\n        uint256 rebasingCreditsPerToken\\r\\n    );\\r\\n\\r\\n    enum RebaseOptions {\\r\\n        NotSet,\\r\\n        OptOut,\\r\\n        OptIn\\r\\n    }\\r\\n\\r\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\r\\n    uint256 public _totalSupply;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    address public vaultAddress = address(0);\\r\\n    mapping(address => uint256) private _creditBalances;\\r\\n    uint256 private _rebasingCredits;\\r\\n    uint256 private _rebasingCreditsPerToken;\\r\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\r\\n    // do not receive yield unless they explicitly opt in)\\r\\n    uint256 public nonRebasingSupply;\\r\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\r\\n    mapping(address => RebaseOptions) public rebaseState;\\r\\n    mapping(address => uint256) public isUpgraded;\\r\\n\\r\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _nameArg,\\r\\n        string calldata _symbolArg,\\r\\n        address _vaultAddress\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\r\\n        _rebasingCreditsPerToken = 1e18;\\r\\n        vaultAddress = _vaultAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault contract\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The total supply of CASH.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Low resolution rebasingCreditsPerToken\\r\\n     */\\r\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\r\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Low resolution total number of rebasing credits\\r\\n     */\\r\\n    function rebasingCredits() public view returns (uint256) {\\r\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return High resolution rebasingCreditsPerToken\\r\\n     */\\r\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\r\\n        return _rebasingCreditsPerToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return High resolution total number of rebasing credits\\r\\n     */\\r\\n    function rebasingCreditsHighres() public view returns (uint256) {\\r\\n        return _rebasingCredits;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param _account Address to query the balance of.\\r\\n     * @return A uint256 representing the amount of base units owned by the\\r\\n     *         specified address.\\r\\n     */\\r\\n    function balanceOf(address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_creditBalances[_account] == 0) return 0;\\r\\n        return\\r\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the credits balance of the specified address.\\r\\n     * @dev Backwards compatible with old low res credits per token.\\r\\n     * @param _account The address to query the balance of.\\r\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\r\\n     *         address\\r\\n     */\\r\\n    function creditsBalanceOf(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 cpt = _creditsPerToken(_account);\\r\\n        if (cpt == 1e27) {\\r\\n            // For a period before the resolution upgrade, we created all new\\r\\n            // contract accounts at high resolution. Since they are not changing\\r\\n            // as a result of this upgrade, we will return their true values\\r\\n            return (_creditBalances[_account], cpt);\\r\\n        } else {\\r\\n            return (\\r\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\r\\n                cpt / RESOLUTION_INCREASE\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the credits balance of the specified address.\\r\\n     * @param _account The address to query the balance of.\\r\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\r\\n     *         address, and isUpgraded\\r\\n     */\\r\\n    function creditsBalanceOfHighres(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _creditBalances[_account],\\r\\n            _creditsPerToken(_account),\\r\\n            isUpgraded[_account] == 1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address.\\r\\n     * @param _to the address to transfer to.\\r\\n     * @param _value the amount to be transferred.\\r\\n     * @return true on success.\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        // TODO: Hardcoded WrappedCASHProxy: 0xf72C31DF1FFaEBE7911C1a146f754f104C4DeacE\\r\\n        require(\\r\\n            _value <= balanceOf(msg.sender),\\r\\n            \\\"Balance not enough\\\"\\r\\n        );\\r\\n\\r\\n        _executeTransfer(msg.sender, _to, _value);\\r\\n\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * @param _from The address you want to send tokens from.\\r\\n     * @param _to The address you want to transfer to.\\r\\n     * @param _value The amount of tokens to be transferred.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public override returns (bool) {\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\r\\n\\r\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\r\\n            _value\\r\\n        );\\r\\n\\r\\n        _executeTransfer(_from, _to, _value);\\r\\n\\r\\n        emit Transfer(_from, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the count of non rebasing credits in response to a transfer\\r\\n     * @param _from The address you want to send tokens from.\\r\\n     * @param _to The address you want to transfer to.\\r\\n     * @param _value Amount of CASH to transfer\\r\\n     */\\r\\n    function _executeTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) internal {\\r\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\r\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\r\\n\\r\\n        // Credits deducted and credited might be different due to the\\r\\n        // differing creditsPerToken used by each account\\r\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\r\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\r\\n\\r\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\r\\n            creditsDeducted,\\r\\n            \\\"Transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\r\\n\\r\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\r\\n            // Transfer to non-rebasing account from rebasing account, credits\\r\\n            // are removed from the non rebasing tally\\r\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\r\\n            // Update rebasingCredits by subtracting the deducted amount\\r\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\r\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\r\\n            // Transfer to rebasing account from non-rebasing account\\r\\n            // Decreasing non-rebasing credits by the amount that was sent\\r\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\r\\n            // Update rebasingCredits by adding the credited amount\\r\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\r\\n     *      `_spender`.\\r\\n     * @param _owner The address which owns the funds.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @return The number of tokens still available for the _spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens\\r\\n     *      on behalf of msg.sender. This method is included for ERC20\\r\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\r\\n     *      used instead.\\r\\n     *\\r\\n     *      Changing an allowance with this method brings the risk that someone\\r\\n     *      may transfer both the old and the new allowance - if they are both\\r\\n     *      greater than zero - if a transfer transaction is mined before the\\r\\n     *      later approve() call is mined.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner has allowed to\\r\\n     *      `_spender`.\\r\\n     *      This method should be used instead of approve() to avoid the double\\r\\n     *      approval vulnerability described above.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\r\\n            .add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\r\\n            `_spender`.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\r\\n     *        by.\\r\\n     */\\r\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\r\\n        if (_subtractedValue >= oldValue) {\\r\\n            _allowances[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints new tokens, increasing totalSupply.\\r\\n     */\\r\\n    function mint(address _account, uint256 _amount) external onlyVault {\\r\\n        _mint(_account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\r\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\r\\n\\r\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\r\\n\\r\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\r\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\r\\n\\r\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\r\\n        // then set it i.e. this is a mint from a fresh contract\\r\\n        if (isNonRebasingAccount) {\\r\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\r\\n        } else {\\r\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\r\\n        }\\r\\n\\r\\n        _totalSupply = _totalSupply.add(_amount);\\r\\n\\r\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\r\\n\\r\\n        emit Transfer(address(0), _account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns tokens, decreasing totalSupply.\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external onlyVault {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `_account` cannot be the zero address.\\r\\n     * - `_account` must have at least `_amount` tokens.\\r\\n     */\\r\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\r\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\r\\n        if (_amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\r\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\r\\n        uint256 currentCredits = _creditBalances[_account];\\r\\n\\r\\n        // Remove the credits, burning rounding errors\\r\\n        if (\\r\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\r\\n        ) {\\r\\n            // Handle dust from rounding\\r\\n            _creditBalances[_account] = 0;\\r\\n        } else if (currentCredits > creditAmount) {\\r\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\r\\n                creditAmount\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"Remove exceeds balance\\\");\\r\\n        }\\r\\n\\r\\n        // Remove from the credit tallies and non-rebasing supply\\r\\n        if (isNonRebasingAccount) {\\r\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\r\\n        } else {\\r\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\r\\n        }\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(_amount);\\r\\n\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\r\\n     *      if the account is non-rebasing.\\r\\n     * @param _account Address of the account.\\r\\n     */\\r\\n    function _creditsPerToken(address _account)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\r\\n            return nonRebasingCreditsPerToken[_account];\\r\\n        } else {\\r\\n            return _rebasingCreditsPerToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\r\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\r\\n     * @param _account Address of the account.\\r\\n     */\\r\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\r\\n        bool isContract = Address.isContract(_account);\\r\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\r\\n            _ensureRebasingMigration(_account);\\r\\n        }\\r\\n        return nonRebasingCreditsPerToken[_account] > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\r\\n     *      supply is updated following deployment of frozen yield change.\\r\\n     */\\r\\n    function _ensureRebasingMigration(address _account) internal {\\r\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\r\\n            if (_creditBalances[_account] == 0) {\\r\\n                // Since there is no existing balance, we can directly set to\\r\\n                // high resolution, and do not have to do any other bookkeeping\\r\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\r\\n            } else {\\r\\n                // Migrate an existing account:\\r\\n\\r\\n                // Set fixed credits per token for this account\\r\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\r\\n                // Update non rebasing supply\\r\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\r\\n                // Update credit tallies\\r\\n                _rebasingCredits = _rebasingCredits.sub(\\r\\n                    _creditBalances[_account]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a contract address to the non-rebasing exception list. The\\r\\n     * address's balance will be part of rebases and the account will be exposed\\r\\n     * to upside and downside.\\r\\n     */\\r\\n    function rebaseOptIn() public nonReentrant {\\r\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\r\\n\\r\\n        // Convert balance into the same amount at the current exchange rate\\r\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\r\\n            .mul(_rebasingCreditsPerToken)\\r\\n            .div(_creditsPerToken(msg.sender));\\r\\n\\r\\n        // Decreasing non rebasing supply\\r\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\r\\n\\r\\n        _creditBalances[msg.sender] = newCreditBalance;\\r\\n\\r\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\r\\n        // adjustment necessary\\r\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\r\\n\\r\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\r\\n\\r\\n        // Delete any fixed credits per token\\r\\n        delete nonRebasingCreditsPerToken[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Explicitly mark that an address is non-rebasing.\\r\\n     */\\r\\n    function rebaseOptOut() public nonReentrant {\\r\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\r\\n\\r\\n        // Increase non rebasing supply\\r\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\r\\n        // Set fixed credits per token\\r\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\r\\n\\r\\n        // Decrease rebasing credits, total supply remains unchanged so no\\r\\n        // adjustment necessary\\r\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\r\\n\\r\\n        // Mark explicitly opted out of rebasing\\r\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\r\\n     *      the exchange rate between \\\"credits\\\" and CASH tokens to change balances.\\r\\n     * @param _newTotalSupply New total supply of CASH.\\r\\n     */\\r\\n    function changeSupply(uint256 _newTotalSupply)\\r\\n        external\\r\\n        onlyVault\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\r\\n\\r\\n        if (_totalSupply == _newTotalSupply) {\\r\\n            emit TotalSupplyUpdatedHighres(\\r\\n                _totalSupply,\\r\\n                _rebasingCredits,\\r\\n                _rebasingCreditsPerToken\\r\\n            );\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\r\\n            ? MAX_SUPPLY\\r\\n            : _newTotalSupply;\\r\\n\\r\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\r\\n            _totalSupply.sub(nonRebasingSupply)\\r\\n        );\\r\\n\\r\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\r\\n\\r\\n        _totalSupply = _rebasingCredits\\r\\n            .divPrecisely(_rebasingCreditsPerToken)\\r\\n            .add(nonRebasingSupply);\\r\\n\\r\\n        emit TotalSupplyUpdatedHighres(\\r\\n            _totalSupply,\\r\\n            _rebasingCredits,\\r\\n            _rebasingCreditsPerToken\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f2f9469086c4b96b87a72fde8ac715edb2ee966b990ad4e290e93e6551c307a\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\r\\n\\r\\nlibrary Helpers {\\r\\n    /**\\r\\n     * @notice Fetch the `symbol()` from an ERC20 token\\r\\n     * @dev Grabs the `symbol()` from a contract\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return string Symbol of the ERC20 token\\r\\n     */\\r\\n    function getSymbol(address _token) internal view returns (string memory) {\\r\\n        string memory symbol = IBasicToken(_token).symbol();\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetch the `decimals()` from an ERC20 token\\r\\n     * @dev Grabs the `decimals()` from a contract and fails if\\r\\n     *      the decimal value does not live within a certain range\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return uint256 Decimals of the ERC20 token\\r\\n     */\\r\\n    function getDecimals(address _token) internal view returns (uint256) {\\r\\n        uint256 decimals = IBasicToken(_token).decimals();\\r\\n        require(\\r\\n            decimals >= 4 && decimals <= 18,\\r\\n            \\\"Token must have sufficient decimal places\\\"\\r\\n        );\\r\\n\\r\\n        return decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd811b2c8f5435e41200458a3853f6bacc86efe20a0daa65d8497abbf821e44fa\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\r\\n */\\r\\nabstract contract InitializableERC20Detailed is IERC20 {\\r\\n    // Storage gap to skip storage from prior to CASH reset\\r\\n    uint256[100] private _____gap;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\r\\n     * these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\r\\n     */\\r\\n    function _initialize(\\r\\n        string memory nameArg,\\r\\n        string memory symbolArg,\\r\\n        uint8 decimalsArg\\r\\n    ) internal {\\r\\n        _name = nameArg;\\r\\n        _symbol = symbolArg;\\r\\n        _decimals = decimalsArg;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x092eced2e0c4e8ebebaed7b82b63b61de01f1232bfa89d1d263e75ca2f9d0b3b\",\"license\":\"agpl-3.0\"},\"contracts/utils/Sort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nlibrary Sort {\\r\\n    function quickSort(uint[] memory arr, int left, int right, uint[] memory indices) internal pure {\\r\\n        int i = left;\\r\\n        int j = right;\\r\\n        if (i == j) return;\\r\\n\\r\\n        uint pivot = arr[uint(left + (right - left) / 2)];\\r\\n\\r\\n        while (i <= j) {\\r\\n            while (arr[uint(i)] > pivot) i++;\\r\\n            while (pivot > arr[uint(j)]) j--;\\r\\n            if (i <= j) {\\r\\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\r\\n                (indices[uint(i)], indices[uint(j)]) = (indices[uint(j)], indices[uint(i)]);\\r\\n                i++;\\r\\n                j--;\\r\\n            }\\r\\n        }\\r\\n        if (left < j)\\r\\n            quickSort(arr, left, j, indices);\\r\\n        if (i < right)\\r\\n            quickSort(arr, i, right, indices);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xb94ca3bb18ff180694ee6d8bce47c172cb314763742e87e658d4510359044c1a\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH VaultInitializer Contract\\r\\n * @notice The VaultInitializer sets up the initial contract.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\nimport { VaultInitializer } from \\\"./VaultInitializer.sol\\\";\\r\\nimport { VaultAdmin } from \\\"./VaultAdmin.sol\\\";\\r\\n\\r\\n\\r\\ncontract Vault is VaultInitializer, VaultAdmin {}\\r\\n\",\"keccak256\":\"0x005465c9780d02c57386e1993b9924d9ec45206b45e48a90f90ce7c9d592e48e\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Vault Admin Contract\\r\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\n\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\r\\nimport { IHarvester } from \\\"../interfaces/IHarvester.sol\\\";\\r\\nimport { IDripper } from \\\"../interfaces/IDripper.sol\\\";\\r\\nimport \\\"./VaultStorage.sol\\\";\\r\\nimport \\\"../utils/Sort.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract VaultAdmin is VaultStorage {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault, Governor, or Strategist.\\r\\n     */\\r\\n    modifier onlyVaultOrGovernorOrStrategist() {\\r\\n        require(\\r\\n            msg.sender == address(this) ||\\r\\n                msg.sender == strategistAddr ||\\r\\n                isGovernor(),\\r\\n            \\\"Caller is not the Vault, Governor, or Strategist\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernorOrStrategist() {\\r\\n        require(\\r\\n            msg.sender == strategistAddr || isGovernor(),\\r\\n            \\\"Caller is not the Strategist or Governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernorOrRebaseManager() {\\r\\n        require(\\r\\n            isGovernor() || rebaseManagers[msg.sender],\\r\\n            \\\"Caller is not the Governor or Rebase Manager\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                 Configuration\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Set address of price provider.\\r\\n     * @param _priceProvider Address of price provider\\r\\n     */\\r\\n    function setPriceProvider(address _priceProvider) external onlyGovernor {\\r\\n        priceProvider = _priceProvider;\\r\\n        emit PriceProviderUpdated(_priceProvider);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set a fee in basis points to be charged for a redeem.\\r\\n     * @param _redeemFeeBps Basis point fee to be charged\\r\\n     */\\r\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external onlyGovernor {\\r\\n        require(_redeemFeeBps <= 1000, \\\"Redeem fee should not be over 10%\\\");\\r\\n        redeemFeeBps = _redeemFeeBps;\\r\\n        emit RedeemFeeUpdated(_redeemFeeBps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set a buffer of assets to keep in the Vault to handle most\\r\\n     * redemptions without needing to spend gas unwinding assets from a Strategy.\\r\\n     * @param _vaultBuffer Percentage using 18 decimals. 100% = 1e18.\\r\\n     */\\r\\n    function setVaultBuffer(uint256 _vaultBuffer)\\r\\n        external\\r\\n        onlyGovernorOrStrategist\\r\\n    {\\r\\n        require(_vaultBuffer <= 1e18, \\\"Invalid value\\\");\\r\\n        vaultBuffer = _vaultBuffer;\\r\\n        emit VaultBufferUpdated(_vaultBuffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the minimum amount of CASH in a mint to trigger an\\r\\n     * automatic allocation of funds afterwords.\\r\\n     * @param _threshold CASH amount with 18 fixed decimals.\\r\\n     */\\r\\n    function setAutoAllocateThreshold(uint256 _threshold)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        autoAllocateThreshold = _threshold;\\r\\n        emit AllocateThresholdUpdated(_threshold);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set a minimum amount of CASH in a mint or redeem that triggers a\\r\\n     * rebase\\r\\n     * @param _threshold CASH amount with 18 fixed decimals.\\r\\n     */\\r\\n    function setRebaseThreshold(uint256 _threshold) external onlyGovernor {\\r\\n        rebaseThreshold = _threshold;\\r\\n        emit RebaseThresholdUpdated(_threshold);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set address of Strategist\\r\\n     * @param _address Address of Strategist\\r\\n     */\\r\\n    function setStrategistAddr(address _address) external onlyGovernor {\\r\\n        strategistAddr = _address;\\r\\n        emit StrategistUpdated(_address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the default Strategy for an asset, i.e. the one which the asset\\r\\n            will be automatically allocated to and withdrawn from\\r\\n     * @param _asset Address of the asset\\r\\n     * @param _strategy Address of the Strategy\\r\\n     */\\r\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\r\\n        external\\r\\n        onlyGovernorOrStrategist\\r\\n    {\\r\\n        emit AssetDefaultStrategyUpdated(_asset, _strategy);\\r\\n        // If its a zero address being passed for the strategy we are removing\\r\\n        // the default strategy\\r\\n        if (_strategy != address(0)) {\\r\\n            // Make sure the strategy meets some criteria\\r\\n            require(strategies[_strategy].isSupported, \\\"Strategy not approved\\\");\\r\\n            IStrategy strategy = IStrategy(_strategy);\\r\\n            require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\r\\n            require(\\r\\n                strategy.supportsAsset(_asset),\\r\\n                \\\"Asset not supported by Strategy\\\"\\r\\n            );\\r\\n        }\\r\\n        assetDefaultStrategies[_asset] = _strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a supported asset to the contract, i.e. one that can be\\r\\n     *         to mint CASH.\\r\\n     * @param _asset Address of asset\\r\\n     */\\r\\n    function supportAsset(address _asset) external onlyGovernor {\\r\\n        require(!assets[_asset].isSupported, \\\"Asset already supported\\\");\\r\\n\\r\\n        assets[_asset] = Asset({ isSupported: true });\\r\\n        allAssets.push(_asset);\\r\\n\\r\\n        // Verify that our oracle supports the asset\\r\\n        // slither-disable-next-line unused-return\\r\\n        console.log(\\\"priceProvider\\\",priceProvider);\\r\\n        IOracle(priceProvider).price(_asset);\\r\\n\\r\\n        emit AssetSupported(_asset);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a strategy to the Vault.\\r\\n     * @param _addr Address of the strategy to add\\r\\n     */\\r\\n    function approveStrategy(address _addr) external onlyGovernor {\\r\\n        require(!strategies[_addr].isSupported, \\\"Strategy already approved\\\");\\r\\n        strategies[_addr] = Strategy({ isSupported: true, _deprecated: 0 });\\r\\n        allStrategies.push(_addr);\\r\\n        emit StrategyApproved(_addr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a strategy from the Vault.\\r\\n     * @param _addr Address of the strategy to remove\\r\\n     */\\r\\n\\r\\n    function removeStrategy(address _addr) external onlyGovernor {\\r\\n        require(strategies[_addr].isSupported, \\\"Strategy not approved\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\r\\n            require(\\r\\n                assetDefaultStrategies[allAssets[i]] != _addr,\\r\\n                \\\"Strategy is default for an asset\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Initialize strategyIndex with out of bounds result so function will\\r\\n        // revert if no valid index found\\r\\n        uint256 strategyIndex = allStrategies.length;\\r\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\r\\n            if (allStrategies[i] == _addr) {\\r\\n                strategyIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (strategyIndex < allStrategies.length) {\\r\\n            allStrategies[strategyIndex] = allStrategies[\\r\\n                allStrategies.length - 1\\r\\n            ];\\r\\n            allStrategies.pop();\\r\\n\\r\\n            // Mark the strategy as not supported\\r\\n            strategies[_addr].isSupported = false;\\r\\n\\r\\n            // Withdraw all assets\\r\\n            IStrategy strategy = IStrategy(_addr);\\r\\n            strategy.withdrawAll();\\r\\n\\r\\n            emit StrategyRemoved(_addr);\\r\\n        }\\r\\n\\r\\n\\r\\n        // Removing strategy from quickDeposit\\r\\n        console.log(\\\"Removing strategy from quickDeposit\\\");\\r\\n        strategyIndex = quickDepositStrategies.length;\\r\\n        for (uint256 i = 0; i < quickDepositStrategies.length; i++) {\\r\\n            if (quickDepositStrategies[i] == _addr) {\\r\\n                strategyIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (strategyIndex < quickDepositStrategies.length) {\\r\\n            quickDepositStrategies[strategyIndex] = quickDepositStrategies[\\r\\n                quickDepositStrategies.length - 1\\r\\n            ];\\r\\n            quickDepositStrategies.pop();\\r\\n            emit StrategyRemoved(_addr);\\r\\n        }\\r\\n\\r\\n        console.log(\\\"Removing strategy from weights\\\");\\r\\n        // Removing strategy from weights\\r\\n        // Initialize strategyIndex with out of bounds result so function will\\r\\n        // revert if no valid index found\\r\\n        strategyIndex = strategyWithWeights.length;\\r\\n        for (uint256 i = 0; i < strategyWithWeights.length; i++) {\\r\\n            if (strategyWithWeights[i].strategy == _addr) {\\r\\n                strategyIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (strategyIndex < strategyWithWeights.length) {\\r\\n            strategyWithWeights[strategyIndex] = strategyWithWeights[\\r\\n                strategyWithWeights.length - 1\\r\\n            ];\\r\\n            strategyWithWeights.pop();\\r\\n            console.log(\\\"Deleting Mapping entry\\\");\\r\\n            delete strategyWithWeightPositions[_addr];\\r\\n            console.log(\\\"Mapping entry Deleted\\\");\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Move assets from one Strategy to another\\r\\n     * @param _strategyFromAddress Address of Strategy to move assets from.\\r\\n     * @param _strategyToAddress Address of Strategy to move assets to.\\r\\n     * @param _assets Array of asset address that will be moved\\r\\n     * @param _amounts Array of amounts of each corresponding asset to move.\\r\\n     */\\r\\n    function reallocate(\\r\\n        address _strategyFromAddress,\\r\\n        address _strategyToAddress,\\r\\n        address[] calldata _assets,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external onlyGovernorOrStrategist {\\r\\n        require(\\r\\n            strategies[_strategyFromAddress].isSupported,\\r\\n            \\\"Invalid from Strategy\\\"\\r\\n        );\\r\\n        require(\\r\\n            strategies[_strategyToAddress].isSupported,\\r\\n            \\\"Invalid to Strategy\\\"\\r\\n        );\\r\\n        require(_assets.length == _amounts.length, \\\"Parameter length mismatch\\\");\\r\\n\\r\\n        IStrategy strategyFrom = IStrategy(_strategyFromAddress);\\r\\n        IStrategy strategyTo = IStrategy(_strategyToAddress);\\r\\n\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            require(strategyTo.supportsAsset(_assets[i]), \\\"Asset unsupported\\\");\\r\\n            // Withdraw from Strategy and pass other Strategy as recipient\\r\\n            strategyFrom.withdraw(address(strategyTo), _assets[i], _amounts[i]);\\r\\n        }\\r\\n        // Tell new Strategy to deposit into protocol\\r\\n        strategyTo.depositAll();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the maximum allowable difference between\\r\\n     * total supply and backing assets' value.\\r\\n     */\\r\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external onlyGovernor {\\r\\n        maxSupplyDiff = _maxSupplyDiff;\\r\\n        emit MaxSupplyDiffChanged(_maxSupplyDiff);\\r\\n    }\\r\\n\\r\\n\\r\\n    /***************************************\\r\\n                    Pause\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Set the deposit paused flag to true to prevent rebasing.\\r\\n     */\\r\\n    function pauseRebase() external onlyGovernorOrStrategist {\\r\\n        rebasePaused = true;\\r\\n        emit RebasePaused();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the deposit paused flag to true to allow rebasing.\\r\\n     */\\r\\n    function unpauseRebase() external onlyGovernor {\\r\\n        rebasePaused = false;\\r\\n        emit RebaseUnpaused();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the deposit paused flag to true to prevent capital movement.\\r\\n     */\\r\\n    function pauseCapital() external onlyGovernorOrStrategist {\\r\\n        capitalPaused = true;\\r\\n        emit CapitalPaused();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the deposit paused flag to false to enable capital movement.\\r\\n     */\\r\\n    function unpauseCapital() external onlyGovernorOrStrategist {\\r\\n        capitalPaused = false;\\r\\n        emit CapitalUnpaused();\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                    Utils\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      contract, i.e. mistaken sends.\\r\\n     * @param _asset Address for the asset\\r\\n     * @param _amount Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address _asset, uint256 _amount)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        require(!assets[_asset].isSupported, \\\"Only unsupported assets\\\");\\r\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                    Pricing\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total price in 18 digit USD for a given asset.\\r\\n     *      Never goes above 1, since that is how we price mints\\r\\n     * @param asset address of the asset\\r\\n     * @return uint256 USD price of 1 of the asset, in 18 decimal fixed\\r\\n     */\\r\\n    function priceUSDMint(address asset) external view returns (uint256) {\\r\\n        uint256 price = IOracle(priceProvider).price(asset);\\r\\n        require(price >= MINT_MINIMUM_ORACLE, \\\"Asset price below peg\\\");\\r\\n        if (price > 1e8) {\\r\\n            price = 1e8;\\r\\n        }\\r\\n        // Price from Oracle is returned with 8 decimals so scale to 18\\r\\n        return price.scaleBy(18, 8);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total price in 18 digit USD for a given asset.\\r\\n     *      Never goes below 1, since that is how we price redeems\\r\\n     * @param asset Address of the asset\\r\\n     * @return uint256 USD price of 1 of the asset, in 18 decimal fixed\\r\\n     */\\r\\n    function priceUSDRedeem(address asset) external view returns (uint256) {\\r\\n        uint256 price = IOracle(priceProvider).price(asset);\\r\\n        if (price < 1e8) {\\r\\n            price = 1e8;\\r\\n        }\\r\\n        // Price from Oracle is returned with 8 decimals so scale to 18\\r\\n        return price.scaleBy(18, 8);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n             Strategies Admin\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws all assets from the strategy and sends assets to the Vault.\\r\\n     * @param _strategyAddr Strategy address.\\r\\n     */\\r\\n    function withdrawAllFromStrategy(address _strategyAddr)\\r\\n        external\\r\\n        onlyGovernorOrStrategist\\r\\n    {\\r\\n        require(\\r\\n            strategies[_strategyAddr].isSupported,\\r\\n            \\\"Strategy is not supported\\\"\\r\\n        );\\r\\n        IStrategy strategy = IStrategy(_strategyAddr);\\r\\n        strategy.withdrawAll();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws all assets from all the strategies and sends assets to the Vault.\\r\\n     */\\r\\n    function withdrawAllFromStrategies() external onlyGovernorOrStrategist {\\r\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\r\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\r\\n            strategy.withdrawAll();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*************************************\\r\\n              Startegies Weights\\r\\n    *************************************/\\r\\n    /**\\r\\n     * @dev Sort the StrategyWithWeight[] by weight property\\r\\n     * @param weights Array of StrategyWithWeight structs to sort to\\r\\n     * @return sorted Sorted array by weight of StrategyWithWeight structs\\r\\n     */\\r\\n    function sortWeightsByTarget(StrategyWithWeight[] memory weights) internal pure returns(StrategyWithWeight[] memory) {\\r\\n        uint[] memory targets = new uint[](weights.length);\\r\\n        for(uint i = 0; i < weights.length; i++) {\\r\\n            targets[i] = weights[i].targetWeight;\\r\\n        }\\r\\n        uint[] memory indices = new uint[](targets.length);\\r\\n        for (uint z = 0; z < indices.length; z++) {\\r\\n            indices[z] = z;\\r\\n        }\\r\\n        Sort.quickSort(targets, 0, int(targets.length-1), indices);\\r\\n        StrategyWithWeight[] memory sorted = new StrategyWithWeight[](targets.length);\\r\\n        for (uint z = 0; z < indices.length; z++) {\\r\\n            sorted[z] = weights[indices[z]];\\r\\n        }\\r\\n        return sorted;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Set the Weight against each strategy\\r\\n    * @param _strategyWithWeights Array of StrategyWithWeight structs to set\\r\\n    */\\r\\n    function setStrategyWithWeights(StrategyWithWeight[] calldata _strategyWithWeights) external onlyGovernor  {\\r\\n        _setStrategyWithWeights(_strategyWithWeights);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Set the Weight against each strategy\\r\\n    * @param _strategyWithWeights Array of StrategyWithWeight structs to set\\r\\n    */\\r\\n    function _setStrategyWithWeights(StrategyWithWeight[] calldata _strategyWithWeights) internal onlyGovernor {\\r\\n        uint256 totalTarget = 0;\\r\\n        for (uint8 i = 0; i < _strategyWithWeights.length; i++) {\\r\\n            StrategyWithWeight memory strategyWithWeight = _strategyWithWeights[i];\\r\\n            require(strategies[strategyWithWeight.strategy].isSupported, \\\"Strategy should be supported by the Vault\\\");\\r\\n            require(strategyWithWeight.strategy != address(0), \\\"Weight without strategy\\\");\\r\\n            require(\\r\\n                strategyWithWeight.minWeight <= strategyWithWeight.targetWeight,\\r\\n                \\\"minWeight shouldn't higher than targetWeight\\\"\\r\\n            );\\r\\n            require(\\r\\n                strategyWithWeight.targetWeight <= strategyWithWeight.maxWeight,\\r\\n                \\\"targetWeight shouldn't higher than maxWeight\\\"\\r\\n            );\\r\\n            totalTarget += strategyWithWeight.targetWeight;\\r\\n        }\\r\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\r\\n        StrategyWithWeight[] memory sorted = sortWeightsByTarget(_strategyWithWeights);\\r\\n        for (uint8 i = 0; i < sorted.length; i++) {\\r\\n            _addStrategyWithWeightAt(sorted[i], i);\\r\\n            strategyWithWeightPositions[strategyWithWeights[i].strategy] = i;\\r\\n        }\\r\\n        // truncate if need\\r\\n        if (strategyWithWeights.length > sorted.length) {\\r\\n            uint256 removeCount = strategyWithWeights.length - sorted.length;\\r\\n            for (uint8 i = 0; i < removeCount; i++) {\\r\\n                strategyWithWeights.pop();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // console.log from strategyWithWeights\\r\\n        for (uint8 i = 0; i < strategyWithWeights.length; i++) {\\r\\n            StrategyWithWeight memory strategyWithWeight = strategyWithWeights[i];\\r\\n            console.log(strategyWithWeight.strategy, strategyWithWeight.targetWeight);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Utility function to set StrategyWithWeight struct to specific postion in the strategyWithWeights[]\\r\\n    * @param strategyWithWeight StrategyWithWeight struct object to set\\r\\n    * @param index Position to set the _strategyWithWeights in  strategyWithWeights[]\\r\\n    */\\r\\n    function _addStrategyWithWeightAt(StrategyWithWeight memory strategyWithWeight, uint256 index) internal {\\r\\n        uint256 currentLength = strategyWithWeights.length;\\r\\n        // expand if need\\r\\n        if (currentLength == 0 || currentLength - 1 < index) {\\r\\n            uint256 additionalCount = index - currentLength + 1;\\r\\n            for (uint8 i = 0; i < additionalCount; i++) {\\r\\n                strategyWithWeights.push();\\r\\n            }\\r\\n        }\\r\\n        strategyWithWeights[index] = strategyWithWeight;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Utility function to return the StrategyWithWeight object by strategy address\\r\\n    * @param strategy address of the strategy\\r\\n    * @return StrategyWithWeight object against the address\\r\\n    */\\r\\n    function getStrategyWithWeight(address strategy) public view returns (StrategyWithWeight memory) {\\r\\n        return strategyWithWeights[strategyWithWeightPositions[strategy]];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Accessor function for strategyWithWeights\\r\\n    * @return strategyWithWeights StrategyWithWeight[] object\\r\\n    */\\r\\n    function getAllStrategyWithWeights() public view returns (StrategyWithWeight[] memory) {\\r\\n        return strategyWithWeights;\\r\\n    }\\r\\n    /***************************\\r\\n            PRIMARY STABLE\\r\\n    ****************************/\\r\\n    /**\\r\\n    * @dev Set the Primary Stable address\\r\\n    * @param _primaryStable Address of the Primary Stable\\r\\n    */\\r\\n    function setPrimaryStable(address _primaryStable) external onlyGovernor {\\r\\n        require(_primaryStable != address(0), \\\"PrimaryStable should not be empty.\\\");\\r\\n        console.log(\\\"VaultAdmin: Setting Primary Stable: \\\", _primaryStable );\\r\\n        primaryStableAddress = _primaryStable;\\r\\n        console.log(\\\"VaultAdmin: Setting Primary Stable: \\\", primaryStableAddress );\\r\\n\\r\\n    }\\r\\n\\r\\n    /***********************************\\r\\n            QuickDepositStartegies\\r\\n    ************************************/\\r\\n    /**\\r\\n    * @dev Set the quick deposit strategies for quickAllocation of funds.\\r\\n    * @param _quickDepositStrategies Array of pre-appproved startegy addresses\\r\\n    */\\r\\n    function setQuickDepositStrategies(address[] calldata _quickDepositStrategies) external onlyGovernor {\\r\\n        for (uint8 i = 0; i < _quickDepositStrategies.length; i++) {\\r\\n            require(strategies[_quickDepositStrategies[i]].isSupported, \\\"Strategy should be supported by the Vault\\\");\\r\\n        }\\r\\n        quickDepositStrategies = _quickDepositStrategies;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Get the quick deposit strategies for quickAllocation of funds.\\r\\n    * @return QuickDepositStrategies Array of pre-appproved startegy addresses\\r\\n    */\\r\\n    function getQuickDepositStrategies() external onlyGovernor view returns (address[] memory) {\\r\\n        return quickDepositStrategies;\\r\\n    }\\r\\n    /***********************************\\r\\n                setSwapper\\r\\n    ************************************/\\r\\n    /**\\r\\n    * @dev Set the Balancer Vault as primary swapper for the Vault\\r\\n    * @param _balancerVault Address of Balancer Vault\\r\\n    * @param _balancerPoolId Id of the Balancer Pool to use for swapping\\r\\n    */\\r\\n    function setSwapper(address _balancerVault, bytes32 _balancerPoolId) external onlyGovernor {\\r\\n        require(_balancerVault != address(0), \\\"Empty Swapper Address\\\");\\r\\n        require(_balancerPoolId != \\\"\\\", \\\"Empty pool id not allowed\\\");\\r\\n        balancerVault = _balancerVault;\\r\\n        balancerPoolId = _balancerPoolId;\\r\\n    }\\r\\n\\r\\n    /***********************************\\r\\n                Harvester & Dripper\\r\\n    ************************************/\\r\\n    /**\\r\\n    * @dev Set the Harvester address in the Vault\\r\\n    * @param _harvester Address of Harvester\\r\\n    */\\r\\n    function setHarvester(address _harvester) external onlyGovernor {\\r\\n        require(_harvester != address(0), \\\"Empty Harvester Address\\\");\\r\\n        harvesterAddress = _harvester;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Set the Dripper address in the Value\\r\\n    * @param _dripper Address of the Dripper\\r\\n    */\\r\\n    function setDripper(address _dripper) external onlyGovernor {\\r\\n        require(_dripper != address(0), \\\"Empty Dripper Address\\\");\\r\\n        dripperAddress = _dripper;\\r\\n    }\\r\\n\\r\\n\\r\\n    /***********************************\\r\\n            Fee Parameters\\r\\n    ************************************/\\r\\n    /**\\r\\n    * @dev Set the Fee Distribution Parameters for Vault (currently not used, but may be infuture)\\r\\n           and for Harvester\\r\\n    * @param _labsAddress address of the Labs account\\r\\n    * @param _labsFeeBps % in bps which Labs would recieve\\r\\n    * @param _teamAddress address of the Team account\\r\\n    * @param _teamFeeBps % in bps which Team would recieve\\r\\n    */\\r\\n    function setFeeParams(address _labsAddress, uint256 _labsFeeBps, address _teamAddress, uint256 _teamFeeBps) external onlyGovernor {\\r\\n        labsAddress = _labsAddress;\\r\\n        labsFeeBps = _labsFeeBps;\\r\\n        teamAddress = _teamAddress;\\r\\n        teamFeeBps = _teamFeeBps;\\r\\n        IHarvester(harvesterAddress).setLabs(labsAddress, labsFeeBps);\\r\\n        IHarvester(harvesterAddress).setTeam(teamAddress, teamFeeBps);\\r\\n    }\\r\\n    /**\\r\\n    * @dev Get Fee parameters for Labs and Team\\r\\n    * @return Tuple containing the Lab address, Lab % in Bps, Team address, Team % in Bps\\r\\n    */\\r\\n    function getFeeParams() public view returns (address, uint256, address, uint256)  {\\r\\n        return (labsAddress, labsFeeBps, teamAddress, teamFeeBps);\\r\\n    }\\r\\n\\r\\n    /********************************\\r\\n            PAYOUT TIMESTAMPS\\r\\n    *********************************/\\r\\n    /**\\r\\n    * @dev Set nextPayoutTime timestamp. Should be called once at the time initialization\\r\\n           Can be arbitary as it will auto set by payout()\\r\\n    * @param _nextPayoutTime timestamp of next Payout\\r\\n    */\\r\\n    function setNextPayoutTime(uint256 _nextPayoutTime) external onlyGovernor {\\r\\n        require(_nextPayoutTime > 0, \\\"Time cannot be 0\\\");\\r\\n        nextPayoutTime = _nextPayoutTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Set _payoutPeriod and _payoutPeriod duration.\\r\\n|    * @param _payoutPeriod Period for the payout. Ex: 24 * 60 * 60;\\r\\n|    * @param _payoutTimeRange duration to honor payout time. Ex: 15 * 60;\\r\\n    */\\r\\n    function setPayoutIntervals(uint256 _payoutPeriod, uint256 _payoutTimeRange) external onlyGovernor {\\r\\n        require((_payoutPeriod > 0) && (_payoutTimeRange > 0), \\\"Time cannot be 0\\\");\\r\\n        payoutPeriod = _payoutPeriod;\\r\\n        payoutTimeRange = _payoutTimeRange;\\r\\n    }\\r\\n\\r\\n    /********************************\\r\\n            REBASE MANAGER\\r\\n    *********************************/\\r\\n    /**\\r\\n    * @dev Set rebase managers to allow rebasing to specific external users\\r\\n    * @param _rebaseManager Candidate for Rebase Manager\\r\\n    */\\r\\n    function addRebaseManager(address _rebaseManager) external onlyGovernor {\\r\\n        require(_rebaseManager != address(0), \\\"No Rebase Manager Provided\\\");\\r\\n        require(!rebaseManagers[_rebaseManager], \\\"Rebase Manager already whitelisted\\\");\\r\\n        rebaseManagers[_rebaseManager] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Check if the an address is actually a Rebase Manager\\r\\n    * @param _sender address to check if it is among Rebase Managers\\r\\n    */\\r\\n    function isRebaseManager(address _sender) external returns (bool) {\\r\\n        return rebaseManagers[_sender];\\r\\n    }\\r\\n\\r\\n    /***************************\\r\\n              PAYOUT\\r\\n    ****************************/\\r\\n    /**\\r\\n    * @dev Function to collect rewards from Strategies and Balance the Vault\\r\\n    */\\r\\n    function payout() external onlyGovernorOrRebaseManager {\\r\\n        _payout();\\r\\n    }\\r\\n    /**\\r\\n    * @dev Function to collect rewards from Strategies and Balance the Vault\\r\\n    */\\r\\n    function _payout() internal {\\r\\n        if (block.timestamp + payoutTimeRange < nextPayoutTime) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IHarvester(harvesterAddress).harvestAndDistribute();\\r\\n        IDripper(dripperAddress).collectAndRebase();\\r\\n        _balance();\\r\\n\\r\\n        // update next payout time. Cycle for preventing gaps\\r\\n        for (; block.timestamp >= nextPayoutTime - payoutTimeRange;) {\\r\\n            nextPayoutTime = nextPayoutTime + payoutPeriod;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /***************************\\r\\n            REBALANCE\\r\\n    ****************************/\\r\\n    /**\\r\\n    * @dev Balance the Vault with predefined weights\\r\\n    */\\r\\n    function balance() external onlyGovernorOrStrategist {\\r\\n        _balance();\\r\\n    }\\r\\n    /**\\r\\n    * @dev Balance the Vault with predefined weights\\r\\n    */\\r\\n    function _balance() internal {\\r\\n        IERC20 asset = IERC20(primaryStableAddress);\\r\\n        StrategyWithWeight[] memory stratsWithWeights = getAllStrategyWithWeights();\\r\\n        require(stratsWithWeights.length > 0, \\\"Weights not set\\\");\\r\\n        require(primaryStableAddress != address(0), \\\"PS not set\\\");\\r\\n\\r\\n        // 1. calc total USDC equivalent\\r\\n        uint256 totalAssetInStrat = 0;\\r\\n        uint256 totalWeight = 0;\\r\\n        for (uint8 i; i < stratsWithWeights.length; i++) {\\r\\n            if (!stratsWithWeights[i].enabled) {// Skip if strategy is not enabled\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // UnstakeFull from stratsWithWeights with targetWeight == 0\\r\\n            if(stratsWithWeights[i].targetWeight == 0){\\r\\n                IStrategy(stratsWithWeights[i].strategy).withdrawAll();\\r\\n            }else {\\r\\n                console.log(\\\"Balance in startegy: \\\",IStrategy(stratsWithWeights[i].strategy).checkBalance());\\r\\n                totalAssetInStrat += IStrategy(stratsWithWeights[i].strategy).checkBalance();\\r\\n                totalWeight += stratsWithWeights[i].targetWeight;\\r\\n            }\\r\\n\\r\\n        }\\r\\n        uint256 totalAsset = totalAssetInStrat + asset.balanceOf(address(this));\\r\\n        console.log(\\\"Total asset: \\\", totalAsset);\\r\\n\\r\\n        // 3. calc diffs for stratsWithWeights liquidity\\r\\n        Order[] memory stakeOrders = new Order[](stratsWithWeights.length);\\r\\n        uint8 stakeOrdersCount = 0;\\r\\n        for (uint8 i; i < stratsWithWeights.length; i++) {\\r\\n\\r\\n            if (!stratsWithWeights[i].enabled) {// Skip if strategy is not enabled\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 targetLiquidity;\\r\\n            if (stratsWithWeights[i].targetWeight == 0) {\\r\\n                targetLiquidity = 0;\\r\\n            } else {\\r\\n                targetLiquidity = (totalAsset * stratsWithWeights[i].targetWeight) / totalWeight;\\r\\n            }\\r\\n\\r\\n            uint256 currentLiquidity = IStrategy(stratsWithWeights[i].strategy).checkBalance();\\r\\n            if (targetLiquidity == currentLiquidity) {\\r\\n                // skip already at target stratsWithWeights\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (targetLiquidity < currentLiquidity) {\\r\\n                // unstake now\\r\\n                console.log(\\\"Withdraw now amount from\\\", currentLiquidity - targetLiquidity, stratsWithWeights[i].strategy);\\r\\n                IStrategy(stratsWithWeights[i].strategy).withdraw(\\r\\n                    address(this),\\r\\n                    address(asset),\\r\\n                    currentLiquidity - targetLiquidity\\r\\n                );\\r\\n            } else {\\r\\n                console.log(\\\"Deposit later amount from\\\", targetLiquidity - currentLiquidity, stratsWithWeights[i].strategy);\\r\\n                // save to stake later\\r\\n                stakeOrders[stakeOrdersCount] = Order(\\r\\n                    true,\\r\\n                    stratsWithWeights[i].strategy,\\r\\n                    targetLiquidity - currentLiquidity\\r\\n                );\\r\\n                stakeOrdersCount++;\\r\\n            }\\r\\n        }\\r\\n        console.log(\\\"_asset Balance available after withdrawing\\\", asset.balanceOf(address(this)));\\r\\n        // 4.  make staking\\r\\n        for (uint8 i; i < stakeOrdersCount; i++) {\\r\\n\\r\\n            address strategy = stakeOrders[i].strategy;\\r\\n            uint256 amount = stakeOrders[i].amount;\\r\\n            console.log(\\\"Processing stake order of\\\", strategy, amount);\\r\\n\\r\\n            uint256 currentBalance = asset.balanceOf(address(this));\\r\\n            if (currentBalance < amount) {\\r\\n                amount = currentBalance;\\r\\n            }\\r\\n            asset.transfer(strategy, amount);\\r\\n\\r\\n            IStrategy(strategy).deposit(\\r\\n                address(asset),\\r\\n                amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8041069cd22d57918580b4eea418e762400fecdb672fa9cb6e9cb1ee566b2c31\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH VaultInitializer Contract\\r\\n * @notice The Vault contract initializes the vault.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\n\\r\\nimport \\\"./VaultStorage.sol\\\";\\r\\n\\r\\ncontract VaultInitializer is VaultStorage {\\r\\n    function initialize(address _priceProvider, address _cash)\\r\\n        external\\r\\n        onlyGovernor\\r\\n        initializer\\r\\n    {\\r\\n        require(_priceProvider != address(0), \\\"PriceProvider address is zero\\\");\\r\\n        require(_cash != address(0), \\\"cash address is zero\\\");\\r\\n\\r\\n        cash = CASH(_cash);\\r\\n\\r\\n        priceProvider = _priceProvider;\\r\\n\\r\\n        rebasePaused = false;\\r\\n        capitalPaused = true;\\r\\n\\r\\n        // Initial  fee of 0 basis points\\r\\n        redeemFeeBps = 0;\\r\\n        teamFeeBps = 0;\\r\\n        labsFeeBps = 0;\\r\\n        // Initial Vault buffer of 0%\\r\\n        vaultBuffer = 0;\\r\\n        // Initial allocate threshold of 25,000 CASH\\r\\n        autoAllocateThreshold = 25000e18;\\r\\n        // Threshold for rebasing\\r\\n        rebaseThreshold = 100e18;\\r\\n        // Initialize all strategies\\r\\n        allStrategies = new address[](0);\\r\\n        // Initialize all quick deposit strategies\\r\\n        quickDepositStrategies = new address[](0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd2829af4a98d2129c9b5a5baede2fd7a4eec5a4537221c7072f35a4eb613e96\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH VaultStorage Contract\\r\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\nimport { CASH } from \\\"../token/CASH.sol\\\";\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport \\\"../utils/Helpers.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\n\\r\\ncontract VaultStorage is Initializable, Governable {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n    using SafeMath for int256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event AssetSupported(address _asset);\\r\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\r\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\r\\n    event StrategyApproved(address _addr);\\r\\n    event StrategyRemoved(address _addr);\\r\\n    event Mint(address _addr, uint256 _value);\\r\\n    event Redeem(address _addr, uint256 _value);\\r\\n    event CapitalPaused();\\r\\n    event CapitalUnpaused();\\r\\n    event RebasePaused();\\r\\n    event RebaseUnpaused();\\r\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\r\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\r\\n    event PriceProviderUpdated(address _priceProvider);\\r\\n    event AllocateThresholdUpdated(uint256 _threshold);\\r\\n    event RebaseThresholdUpdated(uint256 _threshold);\\r\\n    event StrategistUpdated(address _address);\\r\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\r\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\r\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\r\\n    event TrusteeAddressChanged(address _address);\\r\\n\\r\\n    // Assets supported by the Vault, i.e. Stablecoins\\r\\n    struct Asset {\\r\\n        bool isSupported;\\r\\n    }\\r\\n    mapping(address => Asset) internal assets;\\r\\n    address[] internal allAssets;\\r\\n\\r\\n    // Strategies approved for use by the Vault\\r\\n    struct Strategy {\\r\\n        bool isSupported;\\r\\n        uint256 _deprecated; // Deprecated storage slot\\r\\n    }\\r\\n    mapping(address => Strategy) internal strategies;\\r\\n    address[] internal allStrategies;\\r\\n\\r\\n    // Address of the Oracle price provider contract\\r\\n    address public priceProvider;\\r\\n    // Pausing bools\\r\\n    bool public rebasePaused = false;\\r\\n    bool public capitalPaused = true;\\r\\n    \\r\\n    // Redemption fee in basis points\\r\\n    uint256 public redeemFeeBps;\\r\\n    address public labsAddress;\\r\\n    uint256 public labsFeeBps;\\r\\n    address public teamAddress;\\r\\n    uint256 public teamFeeBps;\\r\\n\\r\\n    // Buffer of assets to keep in Vault to handle (most) withdrawals\\r\\n    uint256 public vaultBuffer;\\r\\n    // Mints over this amount automatically allocate funds. 18 decimals.\\r\\n    uint256 public autoAllocateThreshold;\\r\\n    // Mints over this amount automatically rebase. 18 decimals.\\r\\n    uint256 public rebaseThreshold;\\r\\n\\r\\n    CASH internal cash;\\r\\n\\r\\n    //keccak256(\\\"CASH.vault.governor.admin.impl\\\");\\r\\n    bytes32 constant adminImplPosition =\\r\\n        0x10e4e34101c81b29558fe5b91534ae1af03c346313e21b0f6446695a8e18e243;\\r\\n\\r\\n    // Address of the contract responsible for post rebase syncs with AMMs\\r\\n    address private _deprecated_rebaseHooksAddr = address(0);\\r\\n\\r\\n    // Deprecated: Address of Uniswap\\r\\n    // slither-disable-next-line constable-states\\r\\n    address private _deprecated_uniswapAddr = address(0);\\r\\n\\r\\n    // Address of the Strategist\\r\\n    address public strategistAddr = address(0);\\r\\n\\r\\n    // Mapping of asset address to the Strategy that they should automatically\\r\\n    // be allocated to\\r\\n    mapping(address => address) public assetDefaultStrategies;\\r\\n\\r\\n    uint256 public maxSupplyDiff;\\r\\n\\r\\n    // Trustee contract that can collect a percentage of yield [REMOVE_ON_PRODUCTION] \\ud83d\\udea8\\r\\n    address public trusteeAddress;\\r\\n\\r\\n    // Amount of yield collected in basis points [REMOVE_ON_PRODUCTION] \\ud83d\\udea8\\r\\n    uint256 public trusteeFeeBps;\\r\\n\\r\\n    // Deprecated: Tokens that should be swapped for stablecoins [REMOVE_ON_PRODUCTION] \\ud83d\\udea8\\r\\n    address[] private _deprecated_swapTokens;\\r\\n\\r\\n    uint256 constant MINT_MINIMUM_ORACLE = 99800000;\\r\\n\\r\\n    address public primaryStableAddress;\\r\\n\\r\\n    // List of strategies for quickly depositing the primaryStable to.\\r\\n    address[] public quickDepositStrategies;\\r\\n\\r\\n    // Balancer pool to swap the asset to primaryStable\\r\\n    address public balancerVault;\\r\\n    bytes32 public balancerPoolId;\\r\\n\\r\\n    // Harvester & Dripper\\r\\n    address public harvesterAddress;\\r\\n    address public dripperAddress;\\r\\n\\r\\n\\r\\n    struct StrategyWithWeight {\\r\\n        address strategy;\\r\\n        uint256 minWeight;\\r\\n        uint256 targetWeight;\\r\\n        uint256 maxWeight;\\r\\n        bool enabled;\\r\\n        bool enabledReward;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public strategyWithWeightPositions;\\r\\n    StrategyWithWeight[] public strategyWithWeights;\\r\\n\\r\\n\\r\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\r\\n    // next payout time in epoch seconds\\r\\n    uint256 public nextPayoutTime;\\r\\n\\r\\n    // period between payouts in seconds, need to calc nextPayoutTime\\r\\n    uint256 public payoutPeriod;\\r\\n\\r\\n    // range of time for starting near next payout time at seconds\\r\\n    // if time in [nextPayoutTime-payoutTimeRange;nextPayoutTime+payoutTimeRange]\\r\\n    //    then payouts can be started by payout() method anyone\\r\\n    // else if time more than nextPayoutTime+payoutTimeRange\\r\\n    //    then payouts started by any next buy/redeem\\r\\n    uint256 public payoutTimeRange;\\r\\n\\r\\n    mapping(address => bool) public rebaseManagers;\\r\\n\\r\\n    struct Order {\\r\\n        bool stake;\\r\\n        address strategy;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the implementation for the admin, this needs to be in a base class else we cannot set it\\r\\n     * @param newImpl address of the implementation\\r\\n     */\\r\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\r\\n        require(\\r\\n            Address.isContract(newImpl),\\r\\n            \\\"new implementation is not a contract\\\"\\r\\n        );\\r\\n        bytes32 position = adminImplPosition;\\r\\n        assembly {\\r\\n            sstore(position, newImpl)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xea9b029e301b287c2cae53c28cf3c3965a53e5a8bf326fbdfdd0c264b1c37c33\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRebaseManager(address)": {
        "details": "Set rebase managers to allow rebasing to specific external users",
        "params": {
          "_rebaseManager": "Candidate for Rebase Manager"
        }
      },
      "approveStrategy(address)": {
        "details": "Add a strategy to the Vault.",
        "params": {
          "_addr": "Address of the strategy to add"
        }
      },
      "balance()": {
        "details": "Balance the Vault with predefined weights"
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "getAllStrategyWithWeights()": {
        "details": "Accessor function for strategyWithWeights",
        "returns": {
          "_0": "strategyWithWeights StrategyWithWeight[] object"
        }
      },
      "getFeeParams()": {
        "details": "Get Fee parameters for Labs and Team",
        "returns": {
          "_0": "Tuple containing the Lab address, Lab % in Bps, Team address, Team % in Bps"
        }
      },
      "getQuickDepositStrategies()": {
        "details": "Get the quick deposit strategies for quickAllocation of funds.",
        "returns": {
          "_0": "QuickDepositStrategies Array of pre-appproved startegy addresses"
        }
      },
      "getStrategyWithWeight(address)": {
        "details": "Utility function to return the StrategyWithWeight object by strategy address",
        "params": {
          "strategy": "address of the strategy"
        },
        "returns": {
          "_0": "StrategyWithWeight object against the address"
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "isRebaseManager(address)": {
        "details": "Check if the an address is actually a Rebase Manager",
        "params": {
          "_sender": "address to check if it is among Rebase Managers"
        }
      },
      "pauseCapital()": {
        "details": "Set the deposit paused flag to true to prevent capital movement."
      },
      "pauseRebase()": {
        "details": "Set the deposit paused flag to true to prevent rebasing."
      },
      "payout()": {
        "details": "Function to collect rewards from Strategies and Balance the Vault"
      },
      "priceUSDMint(address)": {
        "details": "Returns the total price in 18 digit USD for a given asset.      Never goes above 1, since that is how we price mints",
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "_0": "uint256 USD price of 1 of the asset, in 18 decimal fixed"
        }
      },
      "priceUSDRedeem(address)": {
        "details": "Returns the total price in 18 digit USD for a given asset.      Never goes below 1, since that is how we price redeems",
        "params": {
          "asset": "Address of the asset"
        },
        "returns": {
          "_0": "uint256 USD price of 1 of the asset, in 18 decimal fixed"
        }
      },
      "reallocate(address,address,address[],uint256[])": {
        "params": {
          "_amounts": "Array of amounts of each corresponding asset to move.",
          "_assets": "Array of asset address that will be moved",
          "_strategyFromAddress": "Address of Strategy to move assets from.",
          "_strategyToAddress": "Address of Strategy to move assets to."
        }
      },
      "removeStrategy(address)": {
        "details": "Remove a strategy from the Vault.",
        "params": {
          "_addr": "Address of the strategy to remove"
        }
      },
      "setAdminImpl(address)": {
        "details": "set the implementation for the admin, this needs to be in a base class else we cannot set it",
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "setAssetDefaultStrategy(address,address)": {
        "details": "Set the default Strategy for an asset, i.e. the one which the asset will be automatically allocated to and withdrawn from",
        "params": {
          "_asset": "Address of the asset",
          "_strategy": "Address of the Strategy"
        }
      },
      "setAutoAllocateThreshold(uint256)": {
        "details": "Sets the minimum amount of CASH in a mint to trigger an automatic allocation of funds afterwords.",
        "params": {
          "_threshold": "CASH amount with 18 fixed decimals."
        }
      },
      "setDripper(address)": {
        "details": "Set the Dripper address in the Value",
        "params": {
          "_dripper": "Address of the Dripper"
        }
      },
      "setFeeParams(address,uint256,address,uint256)": {
        "details": "Set the Fee Distribution Parameters for Vault (currently not used, but may be infuture) and for Harvester",
        "params": {
          "_labsAddress": "address of the Labs account",
          "_labsFeeBps": "% in bps which Labs would recieve",
          "_teamAddress": "address of the Team account",
          "_teamFeeBps": "% in bps which Team would recieve"
        }
      },
      "setHarvester(address)": {
        "details": "Set the Harvester address in the Vault",
        "params": {
          "_harvester": "Address of Harvester"
        }
      },
      "setMaxSupplyDiff(uint256)": {
        "details": "Sets the maximum allowable difference between total supply and backing assets' value."
      },
      "setNextPayoutTime(uint256)": {
        "details": "Set nextPayoutTime timestamp. Should be called once at the time initialization Can be arbitary as it will auto set by payout()",
        "params": {
          "_nextPayoutTime": "timestamp of next Payout"
        }
      },
      "setPayoutIntervals(uint256,uint256)": {
        "details": "Set _payoutPeriod and _payoutPeriod duration.",
        "params": {
          "_payoutPeriod": "Period for the payout. Ex: 24 * 60 * 60;",
          "_payoutTimeRange": "duration to honor payout time. Ex: 15 * 60;"
        }
      },
      "setPriceProvider(address)": {
        "details": "Set address of price provider.",
        "params": {
          "_priceProvider": "Address of price provider"
        }
      },
      "setPrimaryStable(address)": {
        "details": "Set the Primary Stable address",
        "params": {
          "_primaryStable": "Address of the Primary Stable"
        }
      },
      "setQuickDepositStrategies(address[])": {
        "details": "Set the quick deposit strategies for quickAllocation of funds.",
        "params": {
          "_quickDepositStrategies": "Array of pre-appproved startegy addresses"
        }
      },
      "setRebaseThreshold(uint256)": {
        "details": "Set a minimum amount of CASH in a mint or redeem that triggers a rebase",
        "params": {
          "_threshold": "CASH amount with 18 fixed decimals."
        }
      },
      "setRedeemFeeBps(uint256)": {
        "details": "Set a fee in basis points to be charged for a redeem.",
        "params": {
          "_redeemFeeBps": "Basis point fee to be charged"
        }
      },
      "setStrategistAddr(address)": {
        "details": "Set address of Strategist",
        "params": {
          "_address": "Address of Strategist"
        }
      },
      "setStrategyWithWeights((address,uint256,uint256,uint256,bool,bool)[])": {
        "details": "Set the Weight against each strategy",
        "params": {
          "_strategyWithWeights": "Array of StrategyWithWeight structs to set"
        }
      },
      "setSwapper(address,bytes32)": {
        "details": "Set the Balancer Vault as primary swapper for the Vault",
        "params": {
          "_balancerPoolId": "Id of the Balancer Pool to use for swapping",
          "_balancerVault": "Address of Balancer Vault"
        }
      },
      "setVaultBuffer(uint256)": {
        "details": "Set a buffer of assets to keep in the Vault to handle most redemptions without needing to spend gas unwinding assets from a Strategy.",
        "params": {
          "_vaultBuffer": "Percentage using 18 decimals. 100% = 1e18."
        }
      },
      "supportAsset(address)": {
        "details": "Add a supported asset to the contract, i.e. one that can be         to mint CASH.",
        "params": {
          "_asset": "Address of asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "unpauseCapital()": {
        "details": "Set the deposit paused flag to false to enable capital movement."
      },
      "unpauseRebase()": {
        "details": "Set the deposit paused flag to true to allow rebasing."
      },
      "withdrawAllFromStrategies()": {
        "details": "Withdraws all assets from all the strategies and sends assets to the Vault."
      },
      "withdrawAllFromStrategy(address)": {
        "details": "Withdraws all assets from the strategy and sends assets to the Vault.",
        "params": {
          "_strategyAddr": "Strategy address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "reallocate(address,address,address[],uint256[])": {
        "notice": "Move assets from one Strategy to another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30647,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30650,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30690,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 36205,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)36200_storage)"
      },
      {
        "astId": 36208,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36218,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)36213_storage)"
      },
      {
        "astId": 36221,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36223,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 36226,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 36229,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 36231,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 36233,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "labsAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 36235,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "labsFeeBps",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 36237,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "teamAddress",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 36239,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "teamFeeBps",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 36241,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 36243,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 36245,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 36248,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "cash",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(CASH)29936"
      },
      {
        "astId": 36257,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      },
      {
        "astId": 36263,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_deprecated_uniswapAddr",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 36269,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "67",
        "type": "t_address"
      },
      {
        "astId": 36273,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 36275,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 36277,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "70",
        "type": "t_address"
      },
      {
        "astId": 36279,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 36282,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_deprecated_swapTokens",
        "offset": 0,
        "slot": "72",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36287,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "primaryStableAddress",
        "offset": 0,
        "slot": "73",
        "type": "t_address"
      },
      {
        "astId": 36290,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "quickDepositStrategies",
        "offset": 0,
        "slot": "74",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36292,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "balancerVault",
        "offset": 0,
        "slot": "75",
        "type": "t_address"
      },
      {
        "astId": 36294,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "balancerPoolId",
        "offset": 0,
        "slot": "76",
        "type": "t_bytes32"
      },
      {
        "astId": 36296,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "77",
        "type": "t_address"
      },
      {
        "astId": 36298,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "dripperAddress",
        "offset": 0,
        "slot": "78",
        "type": "t_address"
      },
      {
        "astId": 36315,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "strategyWithWeightPositions",
        "offset": 0,
        "slot": "79",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36319,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "strategyWithWeights",
        "offset": 0,
        "slot": "80",
        "type": "t_array(t_struct(StrategyWithWeight)36311_storage)dyn_storage"
      },
      {
        "astId": 36324,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "nextPayoutTime",
        "offset": 0,
        "slot": "81",
        "type": "t_uint256"
      },
      {
        "astId": 36326,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "payoutPeriod",
        "offset": 0,
        "slot": "82",
        "type": "t_uint256"
      },
      {
        "astId": 36328,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "payoutTimeRange",
        "offset": 0,
        "slot": "83",
        "type": "t_uint256"
      },
      {
        "astId": 36332,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "rebaseManagers",
        "offset": 0,
        "slot": "84",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StrategyWithWeight)36311_storage)dyn_storage": {
        "base": "t_struct(StrategyWithWeight)36311_storage",
        "encoding": "dynamic_array",
        "label": "struct VaultStorage.StrategyWithWeight[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CASH)29936": {
        "encoding": "inplace",
        "label": "contract CASH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Asset)36200_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)36200_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)36213_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)36213_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Asset)36200_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 36199,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)36213_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 36210,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 36212,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyWithWeight)36311_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.StrategyWithWeight",
        "members": [
          {
            "astId": 36300,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36302,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "minWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 36304,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "targetWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 36306,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "maxWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 36308,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "enabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 36310,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "enabledReward",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}