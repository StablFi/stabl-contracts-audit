{
  "address": "0x28aA80d03Fb19d7F2bFea905eafd7f5F75FE1F94",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0080ceb31ab18d78221af196f4ea7ff51bafb3f48fab9f45f184248bc7e77285",
  "receipt": {
    "to": null,
    "from": "0x442bB41E499bB21aFc6a42327C9E257a7d09872e",
    "contractAddress": "0x28aA80d03Fb19d7F2bFea905eafd7f5F75FE1F94",
    "transactionIndex": 110,
    "gasUsed": "1798874",
    "logsBloom": "0x
    "blockHash": "0x769b583dcc3149d07d69afba05c3b66ccb302927f5b7ffe6a5c68844f92862ac",
    "transactionHash": "0x0080ceb31ab18d78221af196f4ea7ff51bafb3f48fab9f45f184248bc7e77285",
    "logs": [
      {
        "transactionIndex": 110,
        "blockNumber": 32454948,
        "transactionHash": "0x0080ceb31ab18d78221af196f4ea7ff51bafb3f48fab9f45f184248bc7e77285",
        "address": "0x28aA80d03Fb19d7F2bFea905eafd7f5F75FE1F94",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e"
        ],
        "data": "0x",
        "logIndex": 396,
        "blockHash": "0x769b583dcc3149d07d69afba05c3b66ccb302927f5b7ffe6a5c68844f92862ac"
      },
      {
        "transactionIndex": 110,
        "blockNumber": 32454948,
        "transactionHash": "0x0080ceb31ab18d78221af196f4ea7ff51bafb3f48fab9f45f184248bc7e77285",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ffa284d6d38d8800000000000000000000000000000000000000000000000042f15a7d2963cb3a0000000000000000000000000000000000000000000038c08ee02c835ab515a000000000000000000000000000000000000000000000000041f1b7f852903db20000000000000000000000000000000000000000000038c08fdfcf083188a328",
        "logIndex": 397,
        "blockHash": "0x769b583dcc3149d07d69afba05c3b66ccb302927f5b7ffe6a5c68844f92862ac"
      }
    ],
    "blockNumber": 32454948,
    "cumulativeGasUsed": "16808638",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x248B79612CA6A4719496accde8D9222CA48859D3",
    "Wrapped CASH",
    "WCASH"
  ],
  "solcInputHash": "4f99ffea6c3ba8cd3ef8d713c842ef03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4262-asset} \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4262-convertToAssets} \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4262-convertToShares} Will revert if asserts > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset would represent an infinite amout of shares.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4262-deposit} \"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"maxDeposit(address)\":{\"details\":\"See {IERC4262-maxDeposit} \"},\"maxMint(address)\":{\"details\":\"See {IERC4262-maxMint} \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4262-maxRedeem} \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4262-maxWithdraw} \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4262-mint} \"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4262-previewDeposit} \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4262-previewMint} \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4262-previewRedeem} \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4262-previewWithdraw} \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4262-redeem} \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4262-totalAssets} \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"params\":{\"amount_\":\"Amount of the asset to transfer\",\"asset_\":\"Address for the asset\"}},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4262-withdraw} \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize()\":{\"notice\":\"Enable CASH rebasing for this contract\"},\"transferToken(address,uint256)\":{\"notice\":\"Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends. Cannot transfer CASH\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/WrappedCASH.sol\":\"WrappedCASH\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/token/CASH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Token Contract\\r\\n * @dev ERC20 compatible contract for CASH\\r\\n * @dev Implements an elastic supply\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\n/**\\r\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\r\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\r\\n * rebasing design. Any integrations with CASH should be aware.\\r\\n */\\r\\n\\r\\ncontract CASH is Initializable, InitializableERC20Detailed, Governable {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    event TotalSupplyUpdatedHighres(\\r\\n        uint256 totalSupply,\\r\\n        uint256 rebasingCredits,\\r\\n        uint256 rebasingCreditsPerToken\\r\\n    );\\r\\n\\r\\n    enum RebaseOptions {\\r\\n        NotSet,\\r\\n        OptOut,\\r\\n        OptIn\\r\\n    }\\r\\n\\r\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\r\\n    uint256 public _totalSupply;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    address public vaultAddress = address(0);\\r\\n    mapping(address => uint256) private _creditBalances;\\r\\n    uint256 private _rebasingCredits;\\r\\n    uint256 private _rebasingCreditsPerToken;\\r\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\r\\n    // do not receive yield unless they explicitly opt in)\\r\\n    uint256 public nonRebasingSupply;\\r\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\r\\n    mapping(address => RebaseOptions) public rebaseState;\\r\\n    mapping(address => uint256) public isUpgraded;\\r\\n\\r\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _nameArg,\\r\\n        string calldata _symbolArg,\\r\\n        address _vaultAddress\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\r\\n        _rebasingCreditsPerToken = 1e18;\\r\\n        vaultAddress = _vaultAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault contract\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The total supply of CASH.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Low resolution rebasingCreditsPerToken\\r\\n     */\\r\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\r\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Low resolution total number of rebasing credits\\r\\n     */\\r\\n    function rebasingCredits() public view returns (uint256) {\\r\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return High resolution rebasingCreditsPerToken\\r\\n     */\\r\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\r\\n        return _rebasingCreditsPerToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return High resolution total number of rebasing credits\\r\\n     */\\r\\n    function rebasingCreditsHighres() public view returns (uint256) {\\r\\n        return _rebasingCredits;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param _account Address to query the balance of.\\r\\n     * @return A uint256 representing the amount of base units owned by the\\r\\n     *         specified address.\\r\\n     */\\r\\n    function balanceOf(address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_creditBalances[_account] == 0) return 0;\\r\\n        return\\r\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the credits balance of the specified address.\\r\\n     * @dev Backwards compatible with old low res credits per token.\\r\\n     * @param _account The address to query the balance of.\\r\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\r\\n     *         address\\r\\n     */\\r\\n    function creditsBalanceOf(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 cpt = _creditsPerToken(_account);\\r\\n        if (cpt == 1e27) {\\r\\n            // For a period before the resolution upgrade, we created all new\\r\\n            // contract accounts at high resolution. Since they are not changing\\r\\n            // as a result of this upgrade, we will return their true values\\r\\n            return (_creditBalances[_account], cpt);\\r\\n        } else {\\r\\n            return (\\r\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\r\\n                cpt / RESOLUTION_INCREASE\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the credits balance of the specified address.\\r\\n     * @param _account The address to query the balance of.\\r\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\r\\n     *         address, and isUpgraded\\r\\n     */\\r\\n    function creditsBalanceOfHighres(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _creditBalances[_account],\\r\\n            _creditsPerToken(_account),\\r\\n            isUpgraded[_account] == 1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address.\\r\\n     * @param _to the address to transfer to.\\r\\n     * @param _value the amount to be transferred.\\r\\n     * @return true on success.\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        // TODO: Hardcoded WrappedCASHProxy: 0xf72C31DF1FFaEBE7911C1a146f754f104C4DeacE\\r\\n        require(\\r\\n            _value <= balanceOf(msg.sender),\\r\\n            \\\"Balance not enough\\\"\\r\\n        );\\r\\n\\r\\n        _executeTransfer(msg.sender, _to, _value);\\r\\n\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * @param _from The address you want to send tokens from.\\r\\n     * @param _to The address you want to transfer to.\\r\\n     * @param _value The amount of tokens to be transferred.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public override returns (bool) {\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\r\\n\\r\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\r\\n            _value\\r\\n        );\\r\\n\\r\\n        _executeTransfer(_from, _to, _value);\\r\\n\\r\\n        emit Transfer(_from, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the count of non rebasing credits in response to a transfer\\r\\n     * @param _from The address you want to send tokens from.\\r\\n     * @param _to The address you want to transfer to.\\r\\n     * @param _value Amount of CASH to transfer\\r\\n     */\\r\\n    function _executeTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) internal {\\r\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\r\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\r\\n\\r\\n        // Credits deducted and credited might be different due to the\\r\\n        // differing creditsPerToken used by each account\\r\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\r\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\r\\n\\r\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\r\\n            creditsDeducted,\\r\\n            \\\"Transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\r\\n\\r\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\r\\n            // Transfer to non-rebasing account from rebasing account, credits\\r\\n            // are removed from the non rebasing tally\\r\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\r\\n            // Update rebasingCredits by subtracting the deducted amount\\r\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\r\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\r\\n            // Transfer to rebasing account from non-rebasing account\\r\\n            // Decreasing non-rebasing credits by the amount that was sent\\r\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\r\\n            // Update rebasingCredits by adding the credited amount\\r\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\r\\n     *      `_spender`.\\r\\n     * @param _owner The address which owns the funds.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @return The number of tokens still available for the _spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens\\r\\n     *      on behalf of msg.sender. This method is included for ERC20\\r\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\r\\n     *      used instead.\\r\\n     *\\r\\n     *      Changing an allowance with this method brings the risk that someone\\r\\n     *      may transfer both the old and the new allowance - if they are both\\r\\n     *      greater than zero - if a transfer transaction is mined before the\\r\\n     *      later approve() call is mined.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner has allowed to\\r\\n     *      `_spender`.\\r\\n     *      This method should be used instead of approve() to avoid the double\\r\\n     *      approval vulnerability described above.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\r\\n            .add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\r\\n            `_spender`.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\r\\n     *        by.\\r\\n     */\\r\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\r\\n        if (_subtractedValue >= oldValue) {\\r\\n            _allowances[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints new tokens, increasing totalSupply.\\r\\n     */\\r\\n    function mint(address _account, uint256 _amount) external onlyVault {\\r\\n        _mint(_account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\r\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\r\\n\\r\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\r\\n\\r\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\r\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\r\\n\\r\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\r\\n        // then set it i.e. this is a mint from a fresh contract\\r\\n        if (isNonRebasingAccount) {\\r\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\r\\n        } else {\\r\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\r\\n        }\\r\\n\\r\\n        _totalSupply = _totalSupply.add(_amount);\\r\\n\\r\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\r\\n\\r\\n        emit Transfer(address(0), _account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns tokens, decreasing totalSupply.\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external onlyVault {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `_account` cannot be the zero address.\\r\\n     * - `_account` must have at least `_amount` tokens.\\r\\n     */\\r\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\r\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\r\\n        if (_amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\r\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\r\\n        uint256 currentCredits = _creditBalances[_account];\\r\\n\\r\\n        // Remove the credits, burning rounding errors\\r\\n        if (\\r\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\r\\n        ) {\\r\\n            // Handle dust from rounding\\r\\n            _creditBalances[_account] = 0;\\r\\n        } else if (currentCredits > creditAmount) {\\r\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\r\\n                creditAmount\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"Remove exceeds balance\\\");\\r\\n        }\\r\\n\\r\\n        // Remove from the credit tallies and non-rebasing supply\\r\\n        if (isNonRebasingAccount) {\\r\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\r\\n        } else {\\r\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\r\\n        }\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(_amount);\\r\\n\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\r\\n     *      if the account is non-rebasing.\\r\\n     * @param _account Address of the account.\\r\\n     */\\r\\n    function _creditsPerToken(address _account)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\r\\n            return nonRebasingCreditsPerToken[_account];\\r\\n        } else {\\r\\n            return _rebasingCreditsPerToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\r\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\r\\n     * @param _account Address of the account.\\r\\n     */\\r\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\r\\n        bool isContract = Address.isContract(_account);\\r\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\r\\n            _ensureRebasingMigration(_account);\\r\\n        }\\r\\n        return nonRebasingCreditsPerToken[_account] > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\r\\n     *      supply is updated following deployment of frozen yield change.\\r\\n     */\\r\\n    function _ensureRebasingMigration(address _account) internal {\\r\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\r\\n            if (_creditBalances[_account] == 0) {\\r\\n                // Since there is no existing balance, we can directly set to\\r\\n                // high resolution, and do not have to do any other bookkeeping\\r\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\r\\n            } else {\\r\\n                // Migrate an existing account:\\r\\n\\r\\n                // Set fixed credits per token for this account\\r\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\r\\n                // Update non rebasing supply\\r\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\r\\n                // Update credit tallies\\r\\n                _rebasingCredits = _rebasingCredits.sub(\\r\\n                    _creditBalances[_account]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a contract address to the non-rebasing exception list. The\\r\\n     * address's balance will be part of rebases and the account will be exposed\\r\\n     * to upside and downside.\\r\\n     */\\r\\n    function rebaseOptIn() public nonReentrant {\\r\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\r\\n\\r\\n        // Convert balance into the same amount at the current exchange rate\\r\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\r\\n            .mul(_rebasingCreditsPerToken)\\r\\n            .div(_creditsPerToken(msg.sender));\\r\\n\\r\\n        // Decreasing non rebasing supply\\r\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\r\\n\\r\\n        _creditBalances[msg.sender] = newCreditBalance;\\r\\n\\r\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\r\\n        // adjustment necessary\\r\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\r\\n\\r\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\r\\n\\r\\n        // Delete any fixed credits per token\\r\\n        delete nonRebasingCreditsPerToken[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Explicitly mark that an address is non-rebasing.\\r\\n     */\\r\\n    function rebaseOptOut() public nonReentrant {\\r\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\r\\n\\r\\n        // Increase non rebasing supply\\r\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\r\\n        // Set fixed credits per token\\r\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\r\\n\\r\\n        // Decrease rebasing credits, total supply remains unchanged so no\\r\\n        // adjustment necessary\\r\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\r\\n\\r\\n        // Mark explicitly opted out of rebasing\\r\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\r\\n     *      the exchange rate between \\\"credits\\\" and CASH tokens to change balances.\\r\\n     * @param _newTotalSupply New total supply of CASH.\\r\\n     */\\r\\n    function changeSupply(uint256 _newTotalSupply)\\r\\n        external\\r\\n        onlyVault\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\r\\n\\r\\n        if (_totalSupply == _newTotalSupply) {\\r\\n            emit TotalSupplyUpdatedHighres(\\r\\n                _totalSupply,\\r\\n                _rebasingCredits,\\r\\n                _rebasingCreditsPerToken\\r\\n            );\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\r\\n            ? MAX_SUPPLY\\r\\n            : _newTotalSupply;\\r\\n\\r\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\r\\n            _totalSupply.sub(nonRebasingSupply)\\r\\n        );\\r\\n\\r\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\r\\n\\r\\n        _totalSupply = _rebasingCredits\\r\\n            .divPrecisely(_rebasingCreditsPerToken)\\r\\n            .add(nonRebasingSupply);\\r\\n\\r\\n        emit TotalSupplyUpdatedHighres(\\r\\n            _totalSupply,\\r\\n            _rebasingCredits,\\r\\n            _rebasingCreditsPerToken\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f2f9469086c4b96b87a72fde8ac715edb2ee966b990ad4e290e93e6551c307a\",\"license\":\"agpl-3.0\"},\"contracts/token/WrappedCASH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ERC4626 } from \\\"../../lib/openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\r\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { CASH } from \\\"./CASH.sol\\\";\\r\\n\\r\\ncontract WrappedCASH is ERC4626, Governable, Initializable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    constructor(\\r\\n        ERC20 underlying_,\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) ERC20(name_, symbol_) ERC4626(underlying_) Governable() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Enable CASH rebasing for this contract\\r\\n     */\\r\\n    function initialize() external onlyGovernor initializer {\\r\\n        CASH(address(asset())).rebaseOptIn();\\r\\n    }\\r\\n\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return \\\"Wrapped CASH\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return \\\"wCASH\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      contract, i.e. mistaken sends. Cannot transfer CASH\\r\\n     * @param asset_ Address for the asset\\r\\n     * @param amount_ Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address asset_, uint256 amount_)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        require(asset_ != address(asset()), \\\"Cannot collect CASH\\\");\\r\\n        IERC20(asset_).safeTransfer(governor(), amount_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5b44308951b2284755ce64ae9b5388cea17c7c97dfe964504d76b38d23f11a5\",\"license\":\"MIT\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\r\\n */\\r\\nabstract contract InitializableERC20Detailed is IERC20 {\\r\\n    // Storage gap to skip storage from prior to CASH reset\\r\\n    uint256[100] private _____gap;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\r\\n     * these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\r\\n     */\\r\\n    function _initialize(\\r\\n        string memory nameArg,\\r\\n        string memory symbolArg,\\r\\n        uint8 decimalsArg\\r\\n    ) internal {\\r\\n        _name = nameArg;\\r\\n        _symbol = symbolArg;\\r\\n        _decimals = decimalsArg;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x092eced2e0c4e8ebebaed7b82b63b61de01f1232bfa89d1d263e75ca2f9d0b3b\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"lib/openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC4626 } from \\\"../../../../interfaces/IERC4626.sol\\\";\\r\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n// From Open Zeppelin draft PR commit:\\r\\n// fac43034dca85ff539db3fc8aa2a7084b843d454\\r\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3171\\r\\n\\r\\nabstract contract ERC4626 is ERC20, IERC4626 {\\r\\n    IERC20Metadata private immutable _asset;\\r\\n\\r\\n    constructor(IERC20Metadata __asset) {\\r\\n        _asset = __asset;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-asset} */\\r\\n    function asset() public view virtual override returns (address) {\\r\\n        return address(_asset);\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-totalAssets} */\\r\\n    function totalAssets() public view virtual override returns (uint256) {\\r\\n        return _asset.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC4262-convertToShares}\\r\\n     *\\r\\n     * Will revert if asserts > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\r\\n     * would represent an infinite amout of shares.\\r\\n     */\\r\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\r\\n        uint256 supply = totalSupply();\\r\\n\\r\\n        return\\r\\n            (assets == 0 || supply == 0)\\r\\n                ? (assets * 10**decimals()) / 10**_asset.decimals()\\r\\n                : (assets * supply) / totalAssets();\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-convertToAssets} */\\r\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\r\\n        uint256 supply = totalSupply();\\r\\n\\r\\n        return (supply == 0) ? (shares * 10**_asset.decimals()) / 10**decimals() : (shares * totalAssets()) / supply;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-maxDeposit} */\\r\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-maxMint} */\\r\\n    function maxMint(address) public view virtual override returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-maxWithdraw} */\\r\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\r\\n        return convertToAssets(balanceOf(owner));\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-maxRedeem} */\\r\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\r\\n        return balanceOf(owner);\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-previewDeposit} */\\r\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\r\\n        return convertToShares(assets);\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-previewMint} */\\r\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\r\\n        uint256 assets = convertToAssets(shares);\\r\\n        return assets + (convertToShares(assets) < shares ? 1 : 0);\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-previewWithdraw} */\\r\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\r\\n        uint256 shares = convertToShares(assets);\\r\\n        return shares + (convertToAssets(shares) < assets ? 1 : 0);\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-previewRedeem} */\\r\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\r\\n        return convertToAssets(shares);\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-deposit} */\\r\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\r\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more then max\\\");\\r\\n\\r\\n        address caller = _msgSender();\\r\\n        uint256 shares = previewDeposit(assets);\\r\\n\\r\\n        // if _asset is ERC777, transferFrom can call reenter BEFORE the transfer happens through\\r\\n        // the tokensToSend hook, so we need to transfer before we mint to keep the invariants.\\r\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\r\\n        _mint(receiver, shares);\\r\\n\\r\\n        emit Deposit(caller, receiver, assets, shares);\\r\\n\\r\\n        return shares;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-mint} */\\r\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\r\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more then max\\\");\\r\\n\\r\\n        address caller = _msgSender();\\r\\n        uint256 assets = previewMint(shares);\\r\\n\\r\\n        // if _asset is ERC777, transferFrom can call reenter BEFORE the transfer happens through\\r\\n        // the tokensToSend hook, so we need to transfer before we mint to keep the invariants.\\r\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\r\\n        _mint(receiver, shares);\\r\\n\\r\\n        emit Deposit(caller, receiver, assets, shares);\\r\\n\\r\\n        return assets;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-withdraw} */\\r\\n    function withdraw(\\r\\n        uint256 assets,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) public virtual override returns (uint256) {\\r\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more then max\\\");\\r\\n\\r\\n        address caller = _msgSender();\\r\\n        uint256 shares = previewWithdraw(assets);\\r\\n\\r\\n        if (caller != owner) {\\r\\n            _spendAllowance(owner, caller, shares);\\r\\n        }\\r\\n\\r\\n        // if _asset is ERC777, transfer can call reenter AFTER the transfer happens through\\r\\n        // the tokensReceived hook, so we need to transfer after we burn to keep the invariants.\\r\\n        _burn(owner, shares);\\r\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\r\\n\\r\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\r\\n\\r\\n        return shares;\\r\\n    }\\r\\n\\r\\n    /** @dev See {IERC4262-redeem} */\\r\\n    function redeem(\\r\\n        uint256 shares,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) public virtual override returns (uint256) {\\r\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more then max\\\");\\r\\n\\r\\n        address caller = _msgSender();\\r\\n        uint256 assets = previewRedeem(shares);\\r\\n\\r\\n        if (caller != owner) {\\r\\n            _spendAllowance(owner, caller, shares);\\r\\n        }\\r\\n\\r\\n        // if _asset is ERC777, transfer can call reenter AFTER the transfer happens through\\r\\n        // the tokensReceived hook, so we need to transfer after we burn to keep the invariants.\\r\\n        _burn(owner, shares);\\r\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\r\\n\\r\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\r\\n\\r\\n        return assets;\\r\\n    }\\r\\n\\r\\n    // Included here, since this method was not yet present in\\r\\n    // the version of Open Zeppelin ERC20 code we use.\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x341812d81f3fb4306d7a3df7be48f0d1262c7a6b779bf688d34f43f04a2020b3\",\"license\":\"MIT\"},\"lib/openzeppelin/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC4626 is IERC20, IERC20Metadata {\\r\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\r\\n\\r\\n    event Withdraw(\\r\\n        address indexed caller,\\r\\n        address indexed receiver,\\r\\n        address indexed owner,\\r\\n        uint256 assets,\\r\\n        uint256 shares\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\r\\n     *\\r\\n     * - MUST be an ERC-20 token contract.\\r\\n     * - MUST NOT revert.\\r\\n     */\\r\\n    function asset() external view returns (address assetTokenAddress);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\r\\n     *\\r\\n     * - SHOULD include any compounding that occurs from yield.\\r\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\r\\n     * - MUST NOT revert.\\r\\n     */\\r\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\r\\n     * scenario where all the conditions are met.\\r\\n     *\\r\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\r\\n     * - MUST NOT show any variations depending on the caller.\\r\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\r\\n     * - MUST NOT revert.\\r\\n     *\\r\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\r\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\r\\n     * from.\\r\\n     */\\r\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\r\\n     * scenario where all the conditions are met.\\r\\n     *\\r\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\r\\n     * - MUST NOT show any variations depending on the caller.\\r\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\r\\n     * - MUST NOT revert.\\r\\n     *\\r\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\r\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\r\\n     * from.\\r\\n     */\\r\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\r\\n     * through a deposit call.\\r\\n     *\\r\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\r\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\r\\n     * - MUST NOT revert.\\r\\n     */\\r\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\r\\n     * current on-chain conditions.\\r\\n     *\\r\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\r\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\r\\n     *   in the same transaction.\\r\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\r\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\r\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\r\\n     * - MUST NOT revert.\\r\\n     *\\r\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\r\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\r\\n     */\\r\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\r\\n     *\\r\\n     * - MUST emit the Deposit event.\\r\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\r\\n     *   deposit execution, and are accounted for during deposit.\\r\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\r\\n     *   approving enough underlying tokens to the Vault contract, etc).\\r\\n     *\\r\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\r\\n     */\\r\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\r\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\r\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\r\\n     * - MUST NOT revert.\\r\\n     */\\r\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\r\\n     * current on-chain conditions.\\r\\n     *\\r\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\r\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\r\\n     *   same transaction.\\r\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\r\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\r\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\r\\n     * - MUST NOT revert.\\r\\n     *\\r\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\r\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\r\\n     */\\r\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\r\\n     *\\r\\n     * - MUST emit the Deposit event.\\r\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\r\\n     *   execution, and are accounted for during mint.\\r\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\r\\n     *   approving enough underlying tokens to the Vault contract, etc).\\r\\n     *\\r\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\r\\n     */\\r\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\r\\n     * Vault, through a withdraw call.\\r\\n     *\\r\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\r\\n     * - MUST NOT revert.\\r\\n     */\\r\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\r\\n     * given current on-chain conditions.\\r\\n     *\\r\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\r\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\r\\n     *   called\\r\\n     *   in the same transaction.\\r\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\r\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\r\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\r\\n     * - MUST NOT revert.\\r\\n     *\\r\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\r\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\r\\n     */\\r\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\r\\n     *\\r\\n     * - MUST emit the Withdraw event.\\r\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\r\\n     *   withdraw execution, and are accounted for during withdraw.\\r\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\r\\n     *   not having enough shares, etc).\\r\\n     *\\r\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\r\\n     * Those methods should be performed separately.\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 assets,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) external returns (uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\r\\n     * through a redeem call.\\r\\n     *\\r\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\r\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\r\\n     * - MUST NOT revert.\\r\\n     */\\r\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\r\\n     * given current on-chain conditions.\\r\\n     *\\r\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\r\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\r\\n     *   same transaction.\\r\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\r\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\r\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\r\\n     * - MUST NOT revert.\\r\\n     *\\r\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\r\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\r\\n     */\\r\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\r\\n\\r\\n    /**\\r\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\r\\n     *\\r\\n     * - MUST emit the Withdraw event.\\r\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\r\\n     *   redeem execution, and are accounted for during redeem.\\r\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\r\\n     *   not having enough shares, etc).\\r\\n     *\\r\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\r\\n     * Those methods should be performed separately.\\r\\n     */\\r\\n    function redeem(\\r\\n        uint256 shares,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) external returns (uint256 assets);\\r\\n}\",\"keccak256\":\"0xb0cff40a61c33044d3838c2970b409ebb0cf6964bb1af82a0ceab371c5eb2c31\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620021b3380380620021b383398101604081905262000034916200023e565b82828281600390805190602001906200004f929190620000e1565b50805162000065906004906020840190620000e1565b50505060601b6001600160601b03191660805262000090336000805160206200219383398151915255565b60008051602062002193833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a35050506200031b565b828054620000ef90620002c8565b90600052602060002090601f0160209004810192826200011357600085556200015e565b82601f106200012e57805160ff19168380011785556200015e565b828001600101855582156200015e579182015b828111156200015e57825182559160200191906001019062000141565b506200016c92915062000170565b5090565b5b808211156200016c576000815560010162000171565b600082601f8301126200019957600080fd5b81516001600160401b0380821115620001b657620001b662000305565b604051601f8301601f19908116603f01168101908282118183101715620001e157620001e162000305565b81604052838152602092508683858801011115620001fe57600080fd5b600091505b8382101562000222578582018301518183018401529082019062000203565b83821115620002345760008385830101525b9695505050505050565b6000806000606084860312156200025457600080fd5b83516001600160a01b03811681146200026c57600080fd5b60208501519093506001600160401b03808211156200028a57600080fd5b620002988783880162000187565b93506040860151915080821115620002af57600080fd5b50620002be8682870162000187565b9150509250925092565b600181811c90821680620002dd57607f821691505b60208210811415620002ff57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c611e1a62000379600039600081816102f6015281816104ec015281816105b7015281816106fe0152818161094001528181610a9301528181610b2e01528181610d0601528181610e300152610edf0152611e1a6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a578063ba087652116100ad578063ce96cb771161007c578063ce96cb771461044f578063d38bfff414610462578063d905777e14610475578063dd62ed3e14610488578063ef8b30f7146104c157600080fd5b8063ba08765214610421578063c63d75b61461032d578063c6e6f59214610434578063c7af33521461044757600080fd5b8063a457c2d7116100e9578063a457c2d7146103d5578063a9059cbb146103e8578063b3d7f6b9146103fb578063b460af941461040e57600080fd5b806370a08231146103705780638129fc1c1461039957806394bf804d146103a157806395d89b41146103b457600080fd5b806323b872dd11610192578063402d267d11610161578063402d267d1461032d5780634cdad506146103425780635d36b190146103555780636e553f651461035d57600080fd5b806323b872dd146102d2578063313ce567146102e557806338d52e0f146102f4578063395093511461031a57600080fd5b80630a28a477116101ce5780630a28a477146102825780630c340a24146102955780631072cbea146102b557806318160ddd146102ca57600080fd5b806301e1d1141461020057806306fdde031461021b57806307a2d13a1461024c578063095ea7b31461025f575b600080fd5b6102086104d4565b6040519081526020015b60405180910390f35b60408051808201909152600c81526b0aee4c2e0e0cac8408682a6960a31b60208201525b6040516102129190611bba565b61020861025a366004611aea565b610573565b61027261026d366004611a9e565b61066c565b6040519015158152602001610212565b610208610290366004611aea565b610683565b61029d6106b7565b6040516001600160a01b039091168152602001610212565b6102c86102c3366004611a9e565b6106cf565b005b600254610208565b6102726102e0366004611a62565b610794565b60405160128152602001610212565b7f000000000000000000000000000000000000000000000000000000000000000061029d565b610272610328366004611a9e565b61083e565b61020861033b366004611a14565b5060001990565b610208610350366004611aea565b61087a565b6102c8610885565b61020861036b366004611b1c565b61092b565b61020861037e366004611a14565b6001600160a01b031660009081526020819052604090205490565b6102c86109cf565b6102086103af366004611b1c565b610b19565b6040805180820190915260058152640ee8682a6960db1b602082015261023f565b6102726103e3366004611a9e565b610bad565b6102726103f6366004611a9e565b610c46565b610208610409366004611aea565b610c53565b61020861041c366004611b3f565b610c6b565b61020861042f366004611b3f565b610d95565b610208610442366004611aea565b610eae565b610272610f80565b61020861045d366004611a14565b610fb1565b6102c8610470366004611a14565b610fd3565b610208610483366004611a14565b611077565b610208610496366004611a2f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102086104cf366004611aea565b611095565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561053657600080fd5b505afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e9190611b03565b905090565b60008061057f60025490565b905080156105a957806105906104d4565b61059a9085611d4c565b6105a49190611c3c565b610665565b6105b56012600a611ca1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611b7b565b61065190600a611ca1565b61065b9085611d4c565b6106659190611c3c565b9392505050565b60006106793384846110a0565b5060015b92915050565b60008061068f83610eae565b90508261069b82610573565b106106a75760006106aa565b60015b6106659060ff1682611c24565b600061056e600080516020611dc58339815191525490565b6106d7610f80565b6106fc5760405162461bcd60e51b81526004016106f390611bed565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156107745760405162461bcd60e51b8152602060048201526013602482015272086c2dcdcdee840c6ded8d8cac6e8408682a69606b1b60448201526064016106f3565b61079061077f6106b7565b6001600160a01b03841690836111c4565b5050565b60006107a184848461122c565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156108265760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016106f3565b61083385338584036110a0565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610679918590610875908690611c24565b6110a0565b600061067d82610573565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b0316146109205760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016106f3565b610929336113fc565b565b600033600061093985611095565b90506109677f00000000000000000000000000000000000000000000000000000000000000008330886114bd565b61097184826114f5565b836001600160a01b0316826001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d787846040516109bf929190918252602082015260400190565b60405180910390a3949350505050565b6109d7610f80565b6109f35760405162461bcd60e51b81526004016106f390611bed565b600554610100900460ff1680610a0c575060055460ff16155b610a6f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f3565b600554610100900460ff16158015610a91576005805461ffff19166101011790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51b0fd46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050508015610b16576005805461ff00191690555b50565b6000336000610b2785610c53565b9050610b557f00000000000000000000000000000000000000000000000000000000000000008330846114bd565b610b5f84866114f5565b836001600160a01b0316826001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d783886040516109bf929190918252602082015260400190565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610c2f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106f3565b610c3c33858584036110a0565b5060019392505050565b600061067933848461122c565b600080610c5f83610573565b90508261069b82610eae565b6000610c7682610fb1565b841115610cc55760405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468656e206d61780060448201526064016106f3565b336000610cd186610683565b9050836001600160a01b0316826001600160a01b031614610cf757610cf78483836115d4565b610d018482611660565b610d2c7f000000000000000000000000000000000000000000000000000000000000000086886111c4565b836001600160a01b0316856001600160a01b0316836001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8985604051610d84929190918252602082015260400190565b60405180910390a495945050505050565b6000610da082611077565b841115610def5760405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468656e206d617800000060448201526064016106f3565b336000610dfb8661087a565b9050836001600160a01b0316826001600160a01b031614610e2157610e218483886115d4565b610e2b8487611660565b610e567f000000000000000000000000000000000000000000000000000000000000000086836111c4565b836001600160a01b0316856001600160a01b0316836001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db848a604051610d84929190918252602082015260400190565b600080610eba60025490565b9050821580610ec7575080155b610edd57610ed36104d4565b61059a8285611d4c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3657600080fd5b505afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e9190611b7b565b610f7990600a611ca1565b6012610646565b6000610f98600080516020611dc58339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6001600160a01b03811660009081526020819052604081205461067d90610573565b610fdb610f80565b610ff75760405162461bcd60e51b81526004016106f390611bed565b61101f817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b031661103f600080516020611dc58339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526020819052604081205461067d565b600061067d82610eae565b6001600160a01b0383166111025760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106f3565b6001600160a01b0382166111635760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106f3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261122790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526117ae565b505050565b6001600160a01b0383166112905760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106f3565b6001600160a01b0382166112f25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106f3565b6001600160a01b0383166000908152602081905260409020548181101561136a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106f3565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906113a1908490611c24565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113ed91815260200190565b60405180910390a35b50505050565b6001600160a01b0381166114525760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016106f3565b806001600160a01b0316611472600080516020611dc58339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610b1681600080516020611dc583398151915255565b6040516001600160a01b03808516602483015283166044820152606481018290526113f69085906323b872dd60e01b906084016111f0565b6001600160a01b03821661154b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106f3565b806002600082825461155d9190611c24565b90915550506001600160a01b0382166000908152602081905260408120805483929061158a908490611c24565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146113f657818110156116535760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106f3565b6113f684848484036110a0565b6001600160a01b0382166116c05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106f3565b6001600160a01b038216600090815260208190526040902054818110156117345760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106f3565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611763908490611d6b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000611803826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118809092919063ffffffff16565b80519091501561122757808060200190518101906118219190611ac8565b6112275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f3565b606061188f8484600085611897565b949350505050565b6060824710156118f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f3565b843b6119465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f3565b600080866001600160a01b031685876040516119629190611b9e565b60006040518083038185875af1925050503d806000811461199f576040519150601f19603f3d011682016040523d82523d6000602084013e6119a4565b606091505b50915091506119b48282866119bf565b979650505050505050565b606083156119ce575081610665565b8251156119de5782518084602001fd5b8160405162461bcd60e51b81526004016106f39190611bba565b80356001600160a01b0381168114611a0f57600080fd5b919050565b600060208284031215611a2657600080fd5b610665826119f8565b60008060408385031215611a4257600080fd5b611a4b836119f8565b9150611a59602084016119f8565b90509250929050565b600080600060608486031215611a7757600080fd5b611a80846119f8565b9250611a8e602085016119f8565b9150604084013590509250925092565b60008060408385031215611ab157600080fd5b611aba836119f8565b946020939093013593505050565b600060208284031215611ada57600080fd5b8151801515811461066557600080fd5b600060208284031215611afc57600080fd5b5035919050565b600060208284031215611b1557600080fd5b5051919050565b60008060408385031215611b2f57600080fd5b82359150611a59602084016119f8565b600080600060608486031215611b5457600080fd5b83359250611b64602085016119f8565b9150611b72604085016119f8565b90509250925092565b600060208284031215611b8d57600080fd5b815160ff8116811461066557600080fd5b60008251611bb0818460208701611d82565b9190910192915050565b6020815260008251806020840152611bd9816040850160208701611d82565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60008219821115611c3757611c37611dae565b500190565b600082611c5957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611c99578160001904821115611c7f57611c7f611dae565b80851615611c8c57918102915b93841c9390800290611c63565b509250929050565b600061066560ff841683600082611cba5750600161067d565b81611cc75750600061067d565b8160018114611cdd5760028114611ce757611d03565b600191505061067d565b60ff841115611cf857611cf8611dae565b50506001821b61067d565b5060208310610133831016604e8410600b8410161715611d26575081810a61067d565b611d308383611c5e565b8060001904821115611d4457611d44611dae565b029392505050565b6000816000190483118215151615611d6657611d66611dae565b500290565b600082821015611d7d57611d7d611dae565b500390565b60005b83811015611d9d578181015183820152602001611d85565b838111156113f65750506000910152565b634e487b7160e01b600052601160045260246000fdfe83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220f1180698f1186c808f8de329347e8b44d08cf43a5b5079cb6d7148de5a62359064736f6c6343000806003383f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a578063ba087652116100ad578063ce96cb771161007c578063ce96cb771461044f578063d38bfff414610462578063d905777e14610475578063dd62ed3e14610488578063ef8b30f7146104c157600080fd5b8063ba08765214610421578063c63d75b61461032d578063c6e6f59214610434578063c7af33521461044757600080fd5b8063a457c2d7116100e9578063a457c2d7146103d5578063a9059cbb146103e8578063b3d7f6b9146103fb578063b460af941461040e57600080fd5b806370a08231146103705780638129fc1c1461039957806394bf804d146103a157806395d89b41146103b457600080fd5b806323b872dd11610192578063402d267d11610161578063402d267d1461032d5780634cdad506146103425780635d36b190146103555780636e553f651461035d57600080fd5b806323b872dd146102d2578063313ce567146102e557806338d52e0f146102f4578063395093511461031a57600080fd5b80630a28a477116101ce5780630a28a477146102825780630c340a24146102955780631072cbea146102b557806318160ddd146102ca57600080fd5b806301e1d1141461020057806306fdde031461021b57806307a2d13a1461024c578063095ea7b31461025f575b600080fd5b6102086104d4565b6040519081526020015b60405180910390f35b60408051808201909152600c81526b0aee4c2e0e0cac8408682a6960a31b60208201525b6040516102129190611bba565b61020861025a366004611aea565b610573565b61027261026d366004611a9e565b61066c565b6040519015158152602001610212565b610208610290366004611aea565b610683565b61029d6106b7565b6040516001600160a01b039091168152602001610212565b6102c86102c3366004611a9e565b6106cf565b005b600254610208565b6102726102e0366004611a62565b610794565b60405160128152602001610212565b7f000000000000000000000000000000000000000000000000000000000000000061029d565b610272610328366004611a9e565b61083e565b61020861033b366004611a14565b5060001990565b610208610350366004611aea565b61087a565b6102c8610885565b61020861036b366004611b1c565b61092b565b61020861037e366004611a14565b6001600160a01b031660009081526020819052604090205490565b6102c86109cf565b6102086103af366004611b1c565b610b19565b6040805180820190915260058152640ee8682a6960db1b602082015261023f565b6102726103e3366004611a9e565b610bad565b6102726103f6366004611a9e565b610c46565b610208610409366004611aea565b610c53565b61020861041c366004611b3f565b610c6b565b61020861042f366004611b3f565b610d95565b610208610442366004611aea565b610eae565b610272610f80565b61020861045d366004611a14565b610fb1565b6102c8610470366004611a14565b610fd3565b610208610483366004611a14565b611077565b610208610496366004611a2f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102086104cf366004611aea565b611095565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561053657600080fd5b505afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e9190611b03565b905090565b60008061057f60025490565b905080156105a957806105906104d4565b61059a9085611d4c565b6105a49190611c3c565b610665565b6105b56012600a611ca1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190611b7b565b61065190600a611ca1565b61065b9085611d4c565b6106659190611c3c565b9392505050565b60006106793384846110a0565b5060015b92915050565b60008061068f83610eae565b90508261069b82610573565b106106a75760006106aa565b60015b6106659060ff1682611c24565b600061056e600080516020611dc58339815191525490565b6106d7610f80565b6106fc5760405162461bcd60e51b81526004016106f390611bed565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156107745760405162461bcd60e51b8152602060048201526013602482015272086c2dcdcdee840c6ded8d8cac6e8408682a69606b1b60448201526064016106f3565b61079061077f6106b7565b6001600160a01b03841690836111c4565b5050565b60006107a184848461122c565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156108265760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016106f3565b61083385338584036110a0565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610679918590610875908690611c24565b6110a0565b600061067d82610573565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b0316146109205760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016106f3565b610929336113fc565b565b600033600061093985611095565b90506109677f00000000000000000000000000000000000000000000000000000000000000008330886114bd565b61097184826114f5565b836001600160a01b0316826001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d787846040516109bf929190918252602082015260400190565b60405180910390a3949350505050565b6109d7610f80565b6109f35760405162461bcd60e51b81526004016106f390611bed565b600554610100900460ff1680610a0c575060055460ff16155b610a6f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f3565b600554610100900460ff16158015610a91576005805461ffff19166101011790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f51b0fd46040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050508015610b16576005805461ff00191690555b50565b6000336000610b2785610c53565b9050610b557f00000000000000000000000000000000000000000000000000000000000000008330846114bd565b610b5f84866114f5565b836001600160a01b0316826001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d783886040516109bf929190918252602082015260400190565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610c2f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106f3565b610c3c33858584036110a0565b5060019392505050565b600061067933848461122c565b600080610c5f83610573565b90508261069b82610eae565b6000610c7682610fb1565b841115610cc55760405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468656e206d61780060448201526064016106f3565b336000610cd186610683565b9050836001600160a01b0316826001600160a01b031614610cf757610cf78483836115d4565b610d018482611660565b610d2c7f000000000000000000000000000000000000000000000000000000000000000086886111c4565b836001600160a01b0316856001600160a01b0316836001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8985604051610d84929190918252602082015260400190565b60405180910390a495945050505050565b6000610da082611077565b841115610def5760405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468656e206d617800000060448201526064016106f3565b336000610dfb8661087a565b9050836001600160a01b0316826001600160a01b031614610e2157610e218483886115d4565b610e2b8487611660565b610e567f000000000000000000000000000000000000000000000000000000000000000086836111c4565b836001600160a01b0316856001600160a01b0316836001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db848a604051610d84929190918252602082015260400190565b600080610eba60025490565b9050821580610ec7575080155b610edd57610ed36104d4565b61059a8285611d4c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3657600080fd5b505afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e9190611b7b565b610f7990600a611ca1565b6012610646565b6000610f98600080516020611dc58339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6001600160a01b03811660009081526020819052604081205461067d90610573565b610fdb610f80565b610ff75760405162461bcd60e51b81526004016106f390611bed565b61101f817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b031661103f600080516020611dc58339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6001600160a01b03811660009081526020819052604081205461067d565b600061067d82610eae565b6001600160a01b0383166111025760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106f3565b6001600160a01b0382166111635760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106f3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261122790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526117ae565b505050565b6001600160a01b0383166112905760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106f3565b6001600160a01b0382166112f25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106f3565b6001600160a01b0383166000908152602081905260409020548181101561136a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106f3565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906113a1908490611c24565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113ed91815260200190565b60405180910390a35b50505050565b6001600160a01b0381166114525760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016106f3565b806001600160a01b0316611472600080516020611dc58339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3610b1681600080516020611dc583398151915255565b6040516001600160a01b03808516602483015283166044820152606481018290526113f69085906323b872dd60e01b906084016111f0565b6001600160a01b03821661154b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106f3565b806002600082825461155d9190611c24565b90915550506001600160a01b0382166000908152602081905260408120805483929061158a908490611c24565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146113f657818110156116535760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106f3565b6113f684848484036110a0565b6001600160a01b0382166116c05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106f3565b6001600160a01b038216600090815260208190526040902054818110156117345760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106f3565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611763908490611d6b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000611803826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118809092919063ffffffff16565b80519091501561122757808060200190518101906118219190611ac8565b6112275760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f3565b606061188f8484600085611897565b949350505050565b6060824710156118f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f3565b843b6119465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f3565b600080866001600160a01b031685876040516119629190611b9e565b60006040518083038185875af1925050503d806000811461199f576040519150601f19603f3d011682016040523d82523d6000602084013e6119a4565b606091505b50915091506119b48282866119bf565b979650505050505050565b606083156119ce575081610665565b8251156119de5782518084602001fd5b8160405162461bcd60e51b81526004016106f39190611bba565b80356001600160a01b0381168114611a0f57600080fd5b919050565b600060208284031215611a2657600080fd5b610665826119f8565b60008060408385031215611a4257600080fd5b611a4b836119f8565b9150611a59602084016119f8565b90509250929050565b600080600060608486031215611a7757600080fd5b611a80846119f8565b9250611a8e602085016119f8565b9150604084013590509250925092565b60008060408385031215611ab157600080fd5b611aba836119f8565b946020939093013593505050565b600060208284031215611ada57600080fd5b8151801515811461066557600080fd5b600060208284031215611afc57600080fd5b5035919050565b600060208284031215611b1557600080fd5b5051919050565b60008060408385031215611b2f57600080fd5b82359150611a59602084016119f8565b600080600060608486031215611b5457600080fd5b83359250611b64602085016119f8565b9150611b72604085016119f8565b90509250925092565b600060208284031215611b8d57600080fd5b815160ff8116811461066557600080fd5b60008251611bb0818460208701611d82565b9190910192915050565b6020815260008251806020840152611bd9816040850160208701611d82565b601f01601f19169190910160400192915050565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b60008219821115611c3757611c37611dae565b500190565b600082611c5957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115611c99578160001904821115611c7f57611c7f611dae565b80851615611c8c57918102915b93841c9390800290611c63565b509250929050565b600061066560ff841683600082611cba5750600161067d565b81611cc75750600061067d565b8160018114611cdd5760028114611ce757611d03565b600191505061067d565b60ff841115611cf857611cf8611dae565b50506001821b61067d565b5060208310610133831016604e8410600b8410161715611d26575081810a61067d565b611d308383611c5e565b8060001904821115611d4457611d44611dae565b029392505050565b6000816000190483118215151615611d6657611d66611dae565b500290565b600082821015611d7d57611d7d611dae565b500390565b60005b83811015611d9d578181015183820152602001611d85565b838111156113f65750506000910152565b634e487b7160e01b600052601160045260246000fdfe83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220f1180698f1186c808f8de329347e8b44d08cf43a5b5079cb6d7148de5a62359064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "See {IERC4262-asset} "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4262-convertToAssets} "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4262-convertToShares} Will revert if asserts > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset would represent an infinite amout of shares."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "See {IERC4262-deposit} "
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "maxDeposit(address)": {
        "details": "See {IERC4262-maxDeposit} "
      },
      "maxMint(address)": {
        "details": "See {IERC4262-maxMint} "
      },
      "maxRedeem(address)": {
        "details": "See {IERC4262-maxRedeem} "
      },
      "maxWithdraw(address)": {
        "details": "See {IERC4262-maxWithdraw} "
      },
      "mint(uint256,address)": {
        "details": "See {IERC4262-mint} "
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4262-previewDeposit} "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4262-previewMint} "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4262-previewRedeem} "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4262-previewWithdraw} "
      },
      "redeem(uint256,address,address)": {
        "details": "See {IERC4262-redeem} "
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "See {IERC4262-totalAssets} "
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "params": {
          "amount_": "Amount of the asset to transfer",
          "asset_": "Address for the asset"
        }
      },
      "withdraw(uint256,address,address)": {
        "details": "See {IERC4262-withdraw} "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize()": {
        "notice": "Enable CASH rebasing for this contract"
      },
      "transferToken(address,uint256)": {
        "notice": "Transfer token to governor. Intended for recovering tokens stuck in      contract, i.e. mistaken sends. Cannot transfer CASH"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 30647,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 30650,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "initializing",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 30690,
        "contract": "contracts/token/WrappedCASH.sol:WrappedCASH",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}