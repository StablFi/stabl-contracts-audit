{
  "address": "0xB66CA9ac14Bd51E5Fb6Fb68Bbe8Ae1209e5fc91b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumCASHAmount",
          "type": "uint256"
        }
      ],
      "name": "justMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "labsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "labsFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumCASHAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickAllocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quickDepositStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyWithWeightPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyWithWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x534a813d7c4522d9afc16d24f600681035d3d30606986c44c76af069da8b9b4c",
  "receipt": {
    "to": null,
    "from": "0x442bB41E499bB21aFc6a42327C9E257a7d09872e",
    "contractAddress": "0xB66CA9ac14Bd51E5Fb6Fb68Bbe8Ae1209e5fc91b",
    "transactionIndex": 70,
    "gasUsed": "3879314",
    "logsBloom": "0x
    "blockHash": "0x000a3b25364927b96c231d379c4f82b81c1da2364fc5652f83a8dc5ca39f56dd",
    "transactionHash": "0x534a813d7c4522d9afc16d24f600681035d3d30606986c44c76af069da8b9b4c",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 31806737,
        "transactionHash": "0x534a813d7c4522d9afc16d24f600681035d3d30606986c44c76af069da8b9b4c",
        "address": "0xB66CA9ac14Bd51E5Fb6Fb68Bbe8Ae1209e5fc91b",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e"
        ],
        "data": "0x",
        "logIndex": 289,
        "blockHash": "0x000a3b25364927b96c231d379c4f82b81c1da2364fc5652f83a8dc5ca39f56dd"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 31806737,
        "transactionHash": "0x534a813d7c4522d9afc16d24f600681035d3d30606986c44c76af069da8b9b4c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007102c654a0b80800000000000000000000000000000000000000000000000040b26ee45f8b4f420000000000000000000000000000000000000000000001d30fe82cb696dc0c6500000000000000000000000000000000000000000000000040416c1e0aea973a0000000000000000000000000000000000000000000001d310592f7ceb7cc46d",
        "logIndex": 290,
        "blockHash": "0x000a3b25364927b96c231d379c4f82b81c1da2364fc5652f83a8dc5ca39f56dd"
      }
    ],
    "blockNumber": 31806737,
    "cumulativeGasUsed": "16208390",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "94837f36ef435fef0a98cc2772486be6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCASHAmount\",\"type\":\"uint256\"}],\"name\":\"justMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"labsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"labsFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCASHAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quickDepositStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyWithWeightPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyWithWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocate()\":{\"details\":\"Allocate unallocated funds on Vault to strategies.*\"},\"checkBalance()\":{\"returns\":{\"_0\":\"uint256 Balance of asset in decimals of asset\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"getAllAssets()\":{\"details\":\"Return all asset addresses in order\"},\"getAllStrategies()\":{\"details\":\"Return the array of all strategies\"},\"getAssetCount()\":{\"details\":\"Return the number of assets supported by the Vault.\"},\"getStrategyCount()\":{\"details\":\"Return the number of strategies active on the Vault.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"mint(address,uint256,uint256)\":{\"details\":\"Deposit a supported asset and mint CASH.\",\"params\":{\"_amount\":\"Amount of the asset being deposited\",\"_asset\":\"Address of the asset being deposited\",\"_minimumCASHAmount\":\"Minimum CASH to mint\"}},\"quickAllocate()\":{\"details\":\"Allocate unallocated funds on Vault to quick deposit strategies.*\"},\"rebase()\":{\"details\":\"Calculate the total value of assets held by the Vault and all      strategies and update the supply of CASH.\"},\"redeem(uint256,uint256)\":{\"details\":\"Withdraw a supported asset and burn CASH.\",\"params\":{\"_amount\":\"Amount of CASH to burn\",\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"redeemAll(uint256)\":{\"params\":{\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"setAdminImpl(address)\":{\"details\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\",\"params\":{\"newImpl\":\"address of the implementation\"}},\"totalValue()\":{\"details\":\"Determine the total value of assets held by the vault and its         strategies.\",\"returns\":{\"value\":\"Total value in USD (1e18)\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocate()\":{\"notice\":\"Allocate unallocated funds on Vault to strategies.\"},\"calculateRedeemOutput(uint256)\":{\"notice\":\"Calculate the output for a redeem function\"},\"checkBalance()\":{\"notice\":\"Get the balance of an asset held in Vault and all strategies.\"},\"quickAllocate()\":{\"notice\":\"Allocate unallocated funds on Vault to quick deposit strategies.\"},\"redeemAll(uint256)\":{\"notice\":\"Withdraw a supported asset and burn all CASH.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultCore.sol\":\"VaultCore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IGeneralPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IPoolSwapStructs.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract BalancerExchange {\\r\\n\\r\\n    int256 public constant MAX_VALUE = 10 ** 27;\\r\\n\\r\\n    IVault private balancerVault;\\r\\n\\r\\n    function setBalancerVault(address _balancerVault) internal {\\r\\n        balancerVault = IVault(_balancerVault);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 limit\\r\\n    ) internal returns (uint256) {\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(balancerVault));\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        console.log(\\\"BalancerVault: swapping 2\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        bytes32 poolId1,\\r\\n        bytes32 poolId2,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenMid,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap1;\\r\\n        batchSwap1.poolId = poolId1;\\r\\n        batchSwap1.assetInIndex = 0;\\r\\n        batchSwap1.assetOutIndex = 1;\\r\\n        batchSwap1.amount = amount;\\r\\n        swaps[0] = batchSwap1;\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap2;\\r\\n        batchSwap2.poolId = poolId2;\\r\\n        batchSwap2.assetInIndex = 1;\\r\\n        batchSwap2.assetOutIndex = 2;\\r\\n        batchSwap2.amount = 0;\\r\\n        swaps[1] = batchSwap2;\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = tokenIn;\\r\\n        assets[1] = tokenMid;\\r\\n        assets[2] = tokenOut;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = recipient;\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\r\\n            limits[0] = MAX_VALUE;\\r\\n            limits[1] = MAX_VALUE;\\r\\n            limits[2] = MAX_VALUE;\\r\\n        } else {\\r\\n            limits[0] = 0;\\r\\n            limits[1] = 0;\\r\\n            limits[2] = 0;\\r\\n        }\\r\\n\\r\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\r\\n    }\\r\\n\\r\\n    function onSwap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 balance\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = balance;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountToSwap(\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        console.log(\\\"amount0ToSwap\\\", amount0ToSwap);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            console.log(\\\"onSwap\\\", address(token0), address(token1));\\r\\n            uint256 amount1 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\r\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\r\\n        }\\r\\n\\r\\n        return amount0ToSwap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountLpTokensToWithdraw(\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < 1; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\r\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n        return lpBalance;\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0x4a022c4fcad6949070d21553876d5de39862570505461f6abd90587208ee3599\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBasicToken {\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c53c94ab507ab0f44e541d130910e822d39d724bd88bf7c66de5a411334cfb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBuyback.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBuyback {\\r\\n    function swap() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8d1b15e162ec8f3ffca174127f21e52283cb44aee19901edb889ce4981d039d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOracle {\\r\\n    /**\\r\\n     * @dev returns the asset price in USD, 8 decimal digits.\\r\\n     */\\r\\n    function price(address asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xe3b32f2e9346450f3a8b8c060e57e0f44cd79bf41fc70095ee0b32020c0f6c81\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\r\\n */\\r\\ninterface IStrategy {\\r\\n    /**\\r\\n     * @dev Deposit the given asset to platform\\r\\n     * @param _asset asset address\\r\\n     * @param _amount Amount to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\r\\n     *      to the platform\\r\\n     */\\r\\n    function depositAll() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw given asset from Lending platform\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\r\\n     */\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current balance of the given asset.\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns bool indicating whether strategy supports asset.\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Collect reward tokens from the Strategy.\\r\\n     */\\r\\n    function collectRewardTokens() external;\\r\\n\\r\\n    /**\\r\\n     * @dev The address array of the reward tokens for the Strategy.\\r\\n     */\\r\\n    function getRewardTokenAddresses() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ed8a145510da0d501b90c0f3023a9a4051aa0ca58df1079b38114c6a1c724aa\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b2d22bff80c423dcd8b10442e1ee1782100321f6bd3c00649e38d8b1f40c91b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5a4963a182807f12235071151cb535109a8f3066ba1af6fef80c0c829ddd7722\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0614fa16712fbf61015568ad06ede003075147da1dd773d78bbf52e1925b7b59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xe1424191e0efbf544f52f2510ec3b1ae451f4af9345dae9b25a370a7c496c219\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00522f13583cc1876568fd1c57c8afbce4baf1fe89dcea4a9b60a8a988f4df25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/token/CASH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Token Contract\\r\\n * @dev ERC20 compatible contract for CASH\\r\\n * @dev Implements an elastic supply\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\n/**\\r\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\r\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\r\\n * rebasing design. Any integrations with CASH should be aware.\\r\\n */\\r\\n\\r\\ncontract CASH is Initializable, InitializableERC20Detailed, Governable {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    event TotalSupplyUpdatedHighres(\\r\\n        uint256 totalSupply,\\r\\n        uint256 rebasingCredits,\\r\\n        uint256 rebasingCreditsPerToken\\r\\n    );\\r\\n\\r\\n    enum RebaseOptions {\\r\\n        NotSet,\\r\\n        OptOut,\\r\\n        OptIn\\r\\n    }\\r\\n\\r\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\r\\n    uint256 public _totalSupply;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    address public vaultAddress = address(0);\\r\\n    mapping(address => uint256) private _creditBalances;\\r\\n    uint256 private _rebasingCredits;\\r\\n    uint256 private _rebasingCreditsPerToken;\\r\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\r\\n    // do not receive yield unless they explicitly opt in)\\r\\n    uint256 public nonRebasingSupply;\\r\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\r\\n    mapping(address => RebaseOptions) public rebaseState;\\r\\n    mapping(address => uint256) public isUpgraded;\\r\\n\\r\\n    uint256 private constant RESOLUTION_INCREASE = 1e9;\\r\\n\\r\\n    function initialize(\\r\\n        string calldata _nameArg,\\r\\n        string calldata _symbolArg,\\r\\n        address _vaultAddress\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\r\\n        _rebasingCreditsPerToken = 1e18;\\r\\n        vaultAddress = _vaultAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault contract\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The total supply of CASH.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Low resolution rebasingCreditsPerToken\\r\\n     */\\r\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\r\\n        return _rebasingCreditsPerToken / RESOLUTION_INCREASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Low resolution total number of rebasing credits\\r\\n     */\\r\\n    function rebasingCredits() public view returns (uint256) {\\r\\n        return _rebasingCredits / RESOLUTION_INCREASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return High resolution rebasingCreditsPerToken\\r\\n     */\\r\\n    function rebasingCreditsPerTokenHighres() public view returns (uint256) {\\r\\n        return _rebasingCreditsPerToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return High resolution total number of rebasing credits\\r\\n     */\\r\\n    function rebasingCreditsHighres() public view returns (uint256) {\\r\\n        return _rebasingCredits;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param _account Address to query the balance of.\\r\\n     * @return A uint256 representing the amount of base units owned by the\\r\\n     *         specified address.\\r\\n     */\\r\\n    function balanceOf(address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_creditBalances[_account] == 0) return 0;\\r\\n        return\\r\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the credits balance of the specified address.\\r\\n     * @dev Backwards compatible with old low res credits per token.\\r\\n     * @param _account The address to query the balance of.\\r\\n     * @return (uint256, uint256) Credit balance and credits per token of the\\r\\n     *         address\\r\\n     */\\r\\n    function creditsBalanceOf(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 cpt = _creditsPerToken(_account);\\r\\n        if (cpt == 1e27) {\\r\\n            // For a period before the resolution upgrade, we created all new\\r\\n            // contract accounts at high resolution. Since they are not changing\\r\\n            // as a result of this upgrade, we will return their true values\\r\\n            return (_creditBalances[_account], cpt);\\r\\n        } else {\\r\\n            return (\\r\\n                _creditBalances[_account] / RESOLUTION_INCREASE,\\r\\n                cpt / RESOLUTION_INCREASE\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the credits balance of the specified address.\\r\\n     * @param _account The address to query the balance of.\\r\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\r\\n     *         address, and isUpgraded\\r\\n     */\\r\\n    function creditsBalanceOfHighres(address _account)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _creditBalances[_account],\\r\\n            _creditsPerToken(_account),\\r\\n            isUpgraded[_account] == 1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address.\\r\\n     * @param _to the address to transfer to.\\r\\n     * @param _value the amount to be transferred.\\r\\n     * @return true on success.\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        // TODO: Hardcoded WrappedCASHProxy: 0xf72C31DF1FFaEBE7911C1a146f754f104C4DeacE\\r\\n        require(\\r\\n            _value <= balanceOf(msg.sender),\\r\\n            \\\"Balance not enough\\\"\\r\\n        );\\r\\n\\r\\n        _executeTransfer(msg.sender, _to, _value);\\r\\n\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * @param _from The address you want to send tokens from.\\r\\n     * @param _to The address you want to transfer to.\\r\\n     * @param _value The amount of tokens to be transferred.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public override returns (bool) {\\r\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\r\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\r\\n\\r\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\r\\n            _value\\r\\n        );\\r\\n\\r\\n        _executeTransfer(_from, _to, _value);\\r\\n\\r\\n        emit Transfer(_from, _to, _value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the count of non rebasing credits in response to a transfer\\r\\n     * @param _from The address you want to send tokens from.\\r\\n     * @param _to The address you want to transfer to.\\r\\n     * @param _value Amount of CASH to transfer\\r\\n     */\\r\\n    function _executeTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) internal {\\r\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\r\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\r\\n\\r\\n        // Credits deducted and credited might be different due to the\\r\\n        // differing creditsPerToken used by each account\\r\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\r\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\r\\n\\r\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\r\\n            creditsDeducted,\\r\\n            \\\"Transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\r\\n\\r\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\r\\n            // Transfer to non-rebasing account from rebasing account, credits\\r\\n            // are removed from the non rebasing tally\\r\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\r\\n            // Update rebasingCredits by subtracting the deducted amount\\r\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\r\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\r\\n            // Transfer to rebasing account from non-rebasing account\\r\\n            // Decreasing non-rebasing credits by the amount that was sent\\r\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\r\\n            // Update rebasingCredits by adding the credited amount\\r\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\r\\n     *      `_spender`.\\r\\n     * @param _owner The address which owns the funds.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @return The number of tokens still available for the _spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens\\r\\n     *      on behalf of msg.sender. This method is included for ERC20\\r\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\r\\n     *      used instead.\\r\\n     *\\r\\n     *      Changing an allowance with this method brings the risk that someone\\r\\n     *      may transfer both the old and the new allowance - if they are both\\r\\n     *      greater than zero - if a transfer transaction is mined before the\\r\\n     *      later approve() call is mined.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner has allowed to\\r\\n     *      `_spender`.\\r\\n     *      This method should be used instead of approve() to avoid the double\\r\\n     *      approval vulnerability described above.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\r\\n            .add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\r\\n            `_spender`.\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\r\\n     *        by.\\r\\n     */\\r\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\r\\n        if (_subtractedValue >= oldValue) {\\r\\n            _allowances[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints new tokens, increasing totalSupply.\\r\\n     */\\r\\n    function mint(address _account, uint256 _amount) external onlyVault {\\r\\n        _mint(_account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\r\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\r\\n\\r\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\r\\n\\r\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\r\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\r\\n\\r\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\r\\n        // then set it i.e. this is a mint from a fresh contract\\r\\n        if (isNonRebasingAccount) {\\r\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\r\\n        } else {\\r\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\r\\n        }\\r\\n\\r\\n        _totalSupply = _totalSupply.add(_amount);\\r\\n\\r\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\r\\n\\r\\n        emit Transfer(address(0), _account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns tokens, decreasing totalSupply.\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external onlyVault {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `_account` cannot be the zero address.\\r\\n     * - `_account` must have at least `_amount` tokens.\\r\\n     */\\r\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\r\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\r\\n        if (_amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\r\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\r\\n        uint256 currentCredits = _creditBalances[_account];\\r\\n\\r\\n        // Remove the credits, burning rounding errors\\r\\n        if (\\r\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\r\\n        ) {\\r\\n            // Handle dust from rounding\\r\\n            _creditBalances[_account] = 0;\\r\\n        } else if (currentCredits > creditAmount) {\\r\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\r\\n                creditAmount\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"Remove exceeds balance\\\");\\r\\n        }\\r\\n\\r\\n        // Remove from the credit tallies and non-rebasing supply\\r\\n        if (isNonRebasingAccount) {\\r\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\r\\n        } else {\\r\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\r\\n        }\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(_amount);\\r\\n\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\r\\n     *      if the account is non-rebasing.\\r\\n     * @param _account Address of the account.\\r\\n     */\\r\\n    function _creditsPerToken(address _account)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\r\\n            return nonRebasingCreditsPerToken[_account];\\r\\n        } else {\\r\\n            return _rebasingCreditsPerToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\r\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\r\\n     * @param _account Address of the account.\\r\\n     */\\r\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\r\\n        bool isContract = Address.isContract(_account);\\r\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\r\\n            _ensureRebasingMigration(_account);\\r\\n        }\\r\\n        return nonRebasingCreditsPerToken[_account] > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\r\\n     *      supply is updated following deployment of frozen yield change.\\r\\n     */\\r\\n    function _ensureRebasingMigration(address _account) internal {\\r\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\r\\n            if (_creditBalances[_account] == 0) {\\r\\n                // Since there is no existing balance, we can directly set to\\r\\n                // high resolution, and do not have to do any other bookkeeping\\r\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\r\\n            } else {\\r\\n                // Migrate an existing account:\\r\\n\\r\\n                // Set fixed credits per token for this account\\r\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\r\\n                // Update non rebasing supply\\r\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\r\\n                // Update credit tallies\\r\\n                _rebasingCredits = _rebasingCredits.sub(\\r\\n                    _creditBalances[_account]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a contract address to the non-rebasing exception list. The\\r\\n     * address's balance will be part of rebases and the account will be exposed\\r\\n     * to upside and downside.\\r\\n     */\\r\\n    function rebaseOptIn() public nonReentrant {\\r\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\r\\n\\r\\n        // Convert balance into the same amount at the current exchange rate\\r\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\r\\n            .mul(_rebasingCreditsPerToken)\\r\\n            .div(_creditsPerToken(msg.sender));\\r\\n\\r\\n        // Decreasing non rebasing supply\\r\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\r\\n\\r\\n        _creditBalances[msg.sender] = newCreditBalance;\\r\\n\\r\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\r\\n        // adjustment necessary\\r\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\r\\n\\r\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\r\\n\\r\\n        // Delete any fixed credits per token\\r\\n        delete nonRebasingCreditsPerToken[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Explicitly mark that an address is non-rebasing.\\r\\n     */\\r\\n    function rebaseOptOut() public nonReentrant {\\r\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\r\\n\\r\\n        // Increase non rebasing supply\\r\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\r\\n        // Set fixed credits per token\\r\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\r\\n\\r\\n        // Decrease rebasing credits, total supply remains unchanged so no\\r\\n        // adjustment necessary\\r\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\r\\n\\r\\n        // Mark explicitly opted out of rebasing\\r\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\r\\n     *      the exchange rate between \\\"credits\\\" and CASH tokens to change balances.\\r\\n     * @param _newTotalSupply New total supply of CASH.\\r\\n     */\\r\\n    function changeSupply(uint256 _newTotalSupply)\\r\\n        external\\r\\n        onlyVault\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\r\\n\\r\\n        if (_totalSupply == _newTotalSupply) {\\r\\n            emit TotalSupplyUpdatedHighres(\\r\\n                _totalSupply,\\r\\n                _rebasingCredits,\\r\\n                _rebasingCreditsPerToken\\r\\n            );\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\r\\n            ? MAX_SUPPLY\\r\\n            : _newTotalSupply;\\r\\n\\r\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\r\\n            _totalSupply.sub(nonRebasingSupply)\\r\\n        );\\r\\n\\r\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\r\\n\\r\\n        _totalSupply = _rebasingCredits\\r\\n            .divPrecisely(_rebasingCreditsPerToken)\\r\\n            .add(nonRebasingSupply);\\r\\n\\r\\n        emit TotalSupplyUpdatedHighres(\\r\\n            _totalSupply,\\r\\n            _rebasingCredits,\\r\\n            _rebasingCreditsPerToken\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f2f9469086c4b96b87a72fde8ac715edb2ee966b990ad4e290e93e6551c307a\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\r\\n\\r\\nlibrary Helpers {\\r\\n    /**\\r\\n     * @notice Fetch the `symbol()` from an ERC20 token\\r\\n     * @dev Grabs the `symbol()` from a contract\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return string Symbol of the ERC20 token\\r\\n     */\\r\\n    function getSymbol(address _token) internal view returns (string memory) {\\r\\n        string memory symbol = IBasicToken(_token).symbol();\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetch the `decimals()` from an ERC20 token\\r\\n     * @dev Grabs the `decimals()` from a contract and fails if\\r\\n     *      the decimal value does not live within a certain range\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return uint256 Decimals of the ERC20 token\\r\\n     */\\r\\n    function getDecimals(address _token) internal view returns (uint256) {\\r\\n        uint256 decimals = IBasicToken(_token).decimals();\\r\\n        require(\\r\\n            decimals >= 4 && decimals <= 18,\\r\\n            \\\"Token must have sufficient decimal places\\\"\\r\\n        );\\r\\n\\r\\n        return decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd811b2c8f5435e41200458a3853f6bacc86efe20a0daa65d8497abbf821e44fa\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\r\\n */\\r\\nabstract contract InitializableERC20Detailed is IERC20 {\\r\\n    // Storage gap to skip storage from prior to CASH reset\\r\\n    uint256[100] private _____gap;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\r\\n     * these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\r\\n     */\\r\\n    function _initialize(\\r\\n        string memory nameArg,\\r\\n        string memory symbolArg,\\r\\n        uint8 decimalsArg\\r\\n    ) internal {\\r\\n        _name = nameArg;\\r\\n        _symbol = symbolArg;\\r\\n        _decimals = decimalsArg;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x092eced2e0c4e8ebebaed7b82b63b61de01f1232bfa89d1d263e75ca2f9d0b3b\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Vault Contract\\r\\n * @notice The Vault contract stores assets. On a deposit, CASH will be minted\\r\\n           and sent to the depositor. On a withdrawal, CASH will be burned and\\r\\n           assets will be sent to the withdrawer. The Vault accepts deposits of\\r\\n           interest from yield bearing strategies which will modify the supply\\r\\n           of CASH.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\n\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\r\\nimport { IBuyback } from \\\"../interfaces/IBuyback.sol\\\";\\r\\nimport \\\"../exchanges/BalancerExchange.sol\\\";\\r\\nimport \\\"./VaultStorage.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract VaultCore is VaultStorage, BalancerExchange {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using StableMath for uint256;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 constant MAX_UINT =\\r\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the rebasing is not paused.\\r\\n     */\\r\\n    modifier whenNotRebasePaused() {\\r\\n        require(!rebasePaused, \\\"Rebasing paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the deposits are not paused.\\r\\n     */\\r\\n    modifier whenNotCapitalPaused() {\\r\\n        require(!capitalPaused, \\\"Capital paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit a supported asset and mint CASH.\\r\\n     * @param _asset Address of the asset being deposited\\r\\n     * @param _amount Amount of the asset being deposited\\r\\n     * @param _minimumCASHAmount Minimum CASH to mint\\r\\n     */\\r\\n    function mint(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        uint256 _minimumCASHAmount\\r\\n    ) external whenNotCapitalPaused nonReentrant {\\r\\n        _mint(_asset, _amount, _minimumCASHAmount);\\r\\n\\r\\n        // Swap to primaryStable\\r\\n        _swapAsset(_asset, primaryStableAddress);\\r\\n\\r\\n        _quickAllocate(); // _allocate(); // Change this to _quickAllocate()\\r\\n    }\\r\\n    function justMint(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        uint256 _minimumCASHAmount\\r\\n    ) external whenNotCapitalPaused nonReentrant {\\r\\n        _mint(_asset, _amount, _minimumCASHAmount);\\r\\n    }\\r\\n    function _mint(\\r\\n        address _asset,\\r\\n        uint256 _amount,\\r\\n        uint256 _minimumCASHAmount\\r\\n    ) internal {\\r\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\r\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        uint256 price = IOracle(priceProvider).price(_asset);\\r\\n        if (price > 1e8) {\\r\\n            price = 1e8;\\r\\n        }\\r\\n        require(price >= MINT_MINIMUM_ORACLE, \\\"Asset price below peg\\\");\\r\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\r\\n        // Scale up to 18 decimal\\r\\n        uint256 unitAdjustedDeposit = _amount.scaleBy(18, assetDecimals);\\r\\n        uint256 priceAdjustedDeposit = _amount.mulTruncateScale(\\r\\n            price.scaleBy(18, 8), // Oracles have 8 decimal precision\\r\\n            10**assetDecimals\\r\\n        );\\r\\n\\r\\n        if (_minimumCASHAmount > 0) {\\r\\n            require(\\r\\n                priceAdjustedDeposit >= _minimumCASHAmount,\\r\\n                \\\"Mint amount lower than minimum\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit Mint(msg.sender, priceAdjustedDeposit);\\r\\n\\r\\n        // Rebase must happen before any transfers occur.\\r\\n        if (unitAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\\r\\n            _rebase();\\r\\n        }\\r\\n\\r\\n        // Mint matching CASH\\r\\n        cash.mint(msg.sender, priceAdjustedDeposit);\\r\\n\\r\\n        // Transfer the deposited coins to the vault\\r\\n        IERC20 asset = IERC20(_asset);\\r\\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    // In memoriam\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw a supported asset and burn CASH.\\r\\n     * @param _amount Amount of CASH to burn\\r\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\r\\n     */\\r\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount)\\r\\n        external\\r\\n        whenNotCapitalPaused\\r\\n        nonReentrant\\r\\n    {\\r\\n        _redeem(_amount, _minimumUnitAmount);\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw a supported asset and burn CASH.\\r\\n     * @param _amount Amount of CASH to burn\\r\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\r\\n     */\\r\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount) internal {\\r\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        // Calculate redemption outputs\\r\\n        (\\r\\n            uint256 output,\\r\\n            uint256 backingValue,\\r\\n            uint256 redeemFee\\r\\n        ) = _calculateRedeemOutput(_amount);\\r\\n        console.log(\\\"Redeem output:\\\", output);\\r\\n        console.log(\\\"Backing value:\\\", backingValue);\\r\\n        console.log(\\\"Redeem Fee:\\\", redeemFee);\\r\\n        \\r\\n        uint256 primaryStableDecimals = Helpers.getDecimals(primaryStableAddress);\\r\\n\\r\\n        // Check that CASH is backed by enough assets\\r\\n        uint256 _totalSupply = cash.totalSupply();\\r\\n        if (maxSupplyDiff > 0) {\\r\\n            // Allow a max difference of maxSupplyDiff% between\\r\\n            // backing assets value and CASH total supply\\r\\n            uint256 diff = _totalSupply.divPrecisely(backingValue);\\r\\n            require(\\r\\n                (diff > 1e18 ? diff.sub(1e18) : uint256(1e18).sub(diff)) <=\\r\\n                    maxSupplyDiff,\\r\\n                \\\"Backing supply liquidity error\\\"\\r\\n            );\\r\\n        }\\r\\n        if (_minimumUnitAmount > 0) {\\r\\n            uint256 unitTotal = output.scaleBy(18, primaryStableDecimals);\\r\\n            require(\\r\\n                unitTotal >= _minimumUnitAmount,\\r\\n                \\\"Redeem amount lower than minimum\\\"\\r\\n            );\\r\\n        }\\r\\n        emit Redeem(msg.sender, _amount);\\r\\n\\r\\n        // Send output\\r\\n        require(output > 0, \\\"Nothing to redeem\\\");\\r\\n\\r\\n        IERC20 primaryStable = IERC20(primaryStableAddress);\\r\\n        address[] memory strategiesToWithdrawFrom = new address[](strategyWithWeights.length);\\r\\n        uint256[] memory amountsToWithdraw = new uint256[](strategyWithWeights.length);\\r\\n        uint256 totalAmount = primaryStable.balanceOf(address(this));\\r\\n        uint8 strategyIndex = 0;\\r\\n        uint8  index = 0;\\r\\n        while((totalAmount <= (output + redeemFee)) && (strategyIndex < strategyWithWeights.length)) {\\r\\n            uint256 currentStratBal = IStrategy(strategyWithWeights[strategyIndex].strategy).checkBalance();\\r\\n            console.log(\\\"Current strategy balance:\\\", strategyWithWeights[strategyIndex].strategy, currentStratBal);\\r\\n            if (currentStratBal > 0) {\\r\\n                if ( (currentStratBal + totalAmount) > (output + redeemFee) ) {\\r\\n                    strategiesToWithdrawFrom[index] = strategyWithWeights[strategyIndex].strategy;\\r\\n                    amountsToWithdraw[index] = currentStratBal - ((currentStratBal + totalAmount) - (output + redeemFee));\\r\\n                    totalAmount += currentStratBal - ((currentStratBal + totalAmount) - (output + redeemFee));\\r\\n                } else {\\r\\n                    strategiesToWithdrawFrom[index] = strategyWithWeights[strategyIndex].strategy;\\r\\n                    amountsToWithdraw[index] = currentStratBal;\\r\\n                    totalAmount += currentStratBal;\\r\\n                }\\r\\n                index++;\\r\\n            }\\r\\n            console.log(\\\"Total amount after:\\\", strategyWithWeights[strategyIndex].strategy, totalAmount);\\r\\n\\r\\n            strategyIndex++;\\r\\n        }\\r\\n        console.log(\\\"Total amount:\\\", totalAmount);\\r\\n        require(totalAmount >= (output + redeemFee), \\\"Not enough funds anywhere to redeem.\\\");\\r\\n\\r\\n        // Withdraw from strategies\\r\\n        for (uint8 i = 0; i < strategyWithWeights.length; i++) {\\r\\n            if (strategiesToWithdrawFrom[i] == address(0)) {\\r\\n                break;\\r\\n            }\\r\\n            console.log(\\\"VaultCore - Redeem - Withdraw from strategy: \\\", strategiesToWithdrawFrom[i], amountsToWithdraw[i]);\\r\\n            IStrategy(strategiesToWithdrawFrom[i]).withdraw(address(this), primaryStableAddress, amountsToWithdraw[i]);\\r\\n        }\\r\\n        require(primaryStable.balanceOf(address(this)) >= (output + redeemFee), \\\"Not enough funds after withdrawl.\\\");\\r\\n\\r\\n        primaryStable.safeTransfer(msg.sender, output);\\r\\n        _distributeFees(redeemFee);\\r\\n        cash.burn(msg.sender, _amount);\\r\\n\\r\\n        // Until we can prove that we won't affect the prices of our assets\\r\\n        // by withdrawing them, this should be here.\\r\\n        // It's possible that a strategy was off on its asset total, perhaps\\r\\n        // a reward token sold for more or for less than anticipated.\\r\\n        if (_amount > rebaseThreshold && !rebasePaused) {\\r\\n            _rebase();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _distributeFees(uint256 _amount) internal {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"Amount should be greater than zero\\\"\\r\\n        );\\r\\n        console.log(\\\"Distributing fee:\\\", _amount);\\r\\n        uint256 labsfees = _amount.mul(labsFeeBps*10).div(10000);  // Since, we have already made the 10% of redeem amount, we need to make take labsFeeBps*10 percent of the fee amount\\r\\n        console.log(\\\"labsFeeBps:\\\", labsFeeBps);\\r\\n        console.log(\\\"Sending labs fees:\\\", labsfees);\\r\\n        uint256 teamfees =  _amount.mul(teamFeeBps*10).div(10000); \\r\\n        console.log(\\\"teamFeeBps:\\\", teamFeeBps);\\r\\n        console.log(\\\"Sending team fees:\\\", teamfees);\\r\\n        IERC20(primaryStableAddress).transfer(\\r\\n            labsAddress,\\r\\n            labsfees\\r\\n        );\\r\\n        IERC20(primaryStableAddress).transfer(\\r\\n            teamAddress,\\r\\n            teamfees\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw a supported asset and burn all CASH.\\r\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\r\\n     */\\r\\n    function redeemAll(uint256 _minimumUnitAmount)\\r\\n        external\\r\\n        whenNotCapitalPaused\\r\\n        nonReentrant\\r\\n    {\\r\\n        _redeem(cash.balanceOf(msg.sender), _minimumUnitAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allocate unallocated funds on Vault to strategies.\\r\\n     * @dev Allocate unallocated funds on Vault to strategies.\\r\\n     **/\\r\\n    function allocate() external whenNotCapitalPaused nonReentrant {\\r\\n        _allocate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allocate unallocated funds on Vault to strategies.\\r\\n     * @dev Allocate unallocated funds on Vault to strategies.\\r\\n     **/\\r\\n    function _allocate() internal {\\r\\n        uint256 vaultValue = _totalValueInVault();\\r\\n        // Nothing in vault to allocate\\r\\n        if (vaultValue == 0) return;\\r\\n        uint256 strategiesValue = _totalValueInStrategies();\\r\\n        // We have a method that does the same as this, gas optimisation\\r\\n        uint256 calculatedTotalValue = vaultValue.add(strategiesValue);\\r\\n\\r\\n        // We want to maintain a buffer on the Vault so calculate a percentage\\r\\n        // modifier to multiply each amount being allocated by to enforce the\\r\\n        // vault buffer\\r\\n        uint256 vaultBufferModifier;\\r\\n        if (strategiesValue == 0) {\\r\\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\\r\\n            // strategies\\r\\n            vaultBufferModifier = uint256(1e18).sub(vaultBuffer);\\r\\n        } else {\\r\\n            vaultBufferModifier = vaultBuffer.mul(calculatedTotalValue).div(\\r\\n                vaultValue\\r\\n            );\\r\\n            if (1e18 > vaultBufferModifier) {\\r\\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\\r\\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\\r\\n                vaultBufferModifier = uint256(1e18).sub(vaultBufferModifier);\\r\\n            } else {\\r\\n                // We need to let the buffer fill\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        if (vaultBufferModifier == 0) return;\\r\\n\\r\\n        // Iterate over all assets in the Vault and allocate to the appropriate\\r\\n        // strategy\\r\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\r\\n            IERC20 asset = IERC20(allAssets[i]);\\r\\n            uint256 assetBalance = asset.balanceOf(address(this));\\r\\n            console.log(allAssets[i], \\\"assetBalance: \\\", assetBalance);\\r\\n            // No balance, nothing to do here\\r\\n            if (assetBalance == 0) continue;\\r\\n\\r\\n            // Multiply the balance by the vault buffer modifier and truncate\\r\\n            // to the scale of the asset decimals\\r\\n            uint256 allocateAmount = assetBalance.mulTruncate(\\r\\n                vaultBufferModifier\\r\\n            );\\r\\n\\r\\n            address depositStrategyAddr = assetDefaultStrategies[\\r\\n                address(asset)\\r\\n            ];\\r\\n\\r\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\r\\n                console.log(\\\"Sending \\\" , allocateAmount , \\\" to \\\" , depositStrategyAddr);\\r\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\r\\n                // Transfer asset to Strategy and call deposit method to\\r\\n                // mint or take required action\\r\\n                asset.safeTransfer(address(strategy), allocateAmount);\\r\\n                strategy.deposit(address(asset), allocateAmount);\\r\\n                emit AssetAllocated(\\r\\n                    address(asset),\\r\\n                    depositStrategyAddr,\\r\\n                    allocateAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Trigger OGN Buyback\\r\\n        address _trusteeAddress = trusteeAddress; // gas savings\\r\\n        if (_trusteeAddress != address(0)) {\\r\\n            IBuyback(trusteeAddress).swap();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Allocate unallocated funds on Vault to quick deposit strategies.\\r\\n     * @dev Allocate unallocated funds on Vault to quick deposit strategies.\\r\\n     **/\\r\\n\\r\\n    function quickAllocate() external whenNotCapitalPaused nonReentrant {\\r\\n        _quickAllocate();\\r\\n    }\\r\\n    function _quickAllocate() internal {\\r\\n        console.log(\\\"quickAllocate -  primaryStableBalance: \\\", IERC20(primaryStableAddress).balanceOf(address(this)));\\r\\n        uint256 index =  block.number  % quickDepositStrategies.length;\\r\\n        address quickDepositStrategyAddr = quickDepositStrategies[index];\\r\\n        uint256 allocateAmount = IERC20(primaryStableAddress).balanceOf(address(this));\\r\\n        if (quickDepositStrategyAddr != address(0)   && allocateAmount > 0 ) {\\r\\n            IStrategy strategy = IStrategy(quickDepositStrategyAddr);\\r\\n            console.log(\\\"Quick Depositing \\\" , allocateAmount , \\\" to \\\" , quickDepositStrategyAddr);\\r\\n            IERC20(primaryStableAddress).safeTransfer(address(strategy), allocateAmount);\\r\\n            strategy.deposit(primaryStableAddress, allocateAmount);\\r\\n            emit AssetAllocated(\\r\\n                primaryStableAddress,\\r\\n                quickDepositStrategyAddr,\\r\\n                allocateAmount\\r\\n            );\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the total value of assets held by the Vault and all\\r\\n     *      strategies and update the supply of CASH.\\r\\n     */\\r\\n    function rebase() external virtual nonReentrant {\\r\\n        _rebase();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the total value of assets held by the Vault and all\\r\\n     *      strategies and update the supply of CASH, optionally sending a\\r\\n     *      portion of the yield to the trustee.\\r\\n     */\\r\\n    function _rebase() internal whenNotRebasePaused {\\r\\n        uint256 cashSupply = cash.totalSupply();\\r\\n        console.log(\\\"Total CASH Supply: \\\", cashSupply);\\r\\n        if (cashSupply == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 vaultValue = _totalValue();\\r\\n        console.log(\\\"Total Vault Value: \\\", vaultValue);\\r\\n\\r\\n        // Yield fee collection\\r\\n        address _trusteeAddress = trusteeAddress; // gas savings\\r\\n        console.log(\\\"Trustee Address: \\\", _trusteeAddress);\\r\\n        if (_trusteeAddress != address(0) && (vaultValue > cashSupply)) {\\r\\n            console.log(\\\"Yield fee collection\\\");\\r\\n            uint256 yield = vaultValue.sub(cashSupply);\\r\\n            console.log(\\\"Yield: \\\", yield);\\r\\n            uint256 fee = yield.mul(trusteeFeeBps).div(10000);\\r\\n            console.log(\\\"Fee: \\\", fee);\\r\\n            require(yield > fee, \\\"Fee must not be greater than yield\\\");\\r\\n            if (fee > 0) {\\r\\n                console.log(\\\"Minting CASH for fee \\\" , fee , \\\" to \\\" , _trusteeAddress);\\r\\n                cash.mint(_trusteeAddress, fee);\\r\\n            }\\r\\n            emit YieldDistribution(_trusteeAddress, yield, fee);\\r\\n        }\\r\\n\\r\\n        // Only rachet CASH supply upwards\\r\\n        cashSupply = cash.totalSupply(); // Final check should use latest value\\r\\n        if (vaultValue > cashSupply) {\\r\\n            console.log(\\\"Still vault value greater than supply, changing supply of CASH for vaultValue \\\" , vaultValue);\\r\\n            cash.changeSupply(vaultValue);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Determine the total value of assets held by the vault and its\\r\\n     *         strategies.\\r\\n     * @return value Total value in USD (1e18)\\r\\n     */\\r\\n    function totalValue() external view virtual returns (uint256 value) {\\r\\n        value = _totalValue();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal Calculate the total value of the assets held by the\\r\\n     *         vault and its strategies.\\r\\n     * @return value Total value in USD (1e18)\\r\\n     */\\r\\n    function _totalValue() internal view virtual returns (uint256 value) {\\r\\n        return _totalValueInVault().add(_totalValueInStrategies());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal to calculate total value of all assets held in Vault.\\r\\n     * @return value Total value in ETH (1e18)\\r\\n     */\\r\\n    function _totalValueInVault() internal view returns (uint256 value) {\\r\\n        for (uint256 y = 0; y < allAssets.length; y++) {\\r\\n            IERC20 asset = IERC20(allAssets[y]);\\r\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\\r\\n            uint256 balance = asset.balanceOf(address(this));\\r\\n            if (balance > 0) {\\r\\n                value = value.add(balance.scaleBy(18, assetDecimals));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal to calculate total value of all assets held in Strategies.\\r\\n     * @return value Total value in ETH (1e18)\\r\\n     */\\r\\n    function _totalValueInStrategies() internal view returns (uint256 value) {\\r\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\r\\n            value = value.add(_totalValueInStrategy(allStrategies[i]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal to calculate total value of all assets held by strategy.\\r\\n     * @param _strategyAddr Address of the strategy\\r\\n     */\\r\\n    function _totalValueInStrategy(address _strategyAddr)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        IStrategy strategy = IStrategy(_strategyAddr);\\r\\n        return strategy.checkBalance();\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\r\\n     * @return uint256 Balance of asset in decimals of asset\\r\\n     */\\r\\n    function checkBalance() external view returns (uint256) {\\r\\n        return _checkBalance();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\r\\n     * @return balance Balance of asset in decimals of asset\\r\\n     */\\r\\n    function _checkBalance()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n        IERC20 asset = IERC20(primaryStableAddress);\\r\\n        balance = asset.balanceOf(address(this));\\r\\n\\r\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\r\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\r\\n            balance = balance.add(strategy.checkBalance());\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the output for a redeem function\\r\\n     */\\r\\n    function calculateRedeemOutput(uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (uint256 output, ,) = _calculateRedeemOutput(_amount);\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the output for a redeem function\\r\\n     * @return output  amount respective to the primary stable\\r\\n     * @return totalBalance Total balance of Vault\\r\\n     */\\r\\n    function _calculateRedeemOutput(uint256 _amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256, uint256, uint256)\\r\\n    {\\r\\n\\r\\n        IOracle oracle = IOracle(priceProvider);\\r\\n        uint256 primaryStablePrice =  oracle.price(primaryStableAddress).scaleBy(18, 8);\\r\\n        uint256 primaryStableBalance = _checkBalance();\\r\\n        uint256 primaryStableDecimals =  Helpers.getDecimals(primaryStableAddress);\\r\\n        uint256 totalBalance = 0;\\r\\n        uint256 redeemFee = 0;\\r\\n        // Calculate redeem fee\\r\\n        if (labsFeeBps > 0  || teamFeeBps > 0) {\\r\\n            redeemFee = _amount.mul(redeemFeeBps).div(10000);\\r\\n            _amount = _amount.sub(redeemFee);\\r\\n        }\\r\\n\\r\\n        totalBalance = totalBalance.add(primaryStableBalance.scaleBy(18, primaryStableDecimals));\\r\\n\\r\\n        // Never give out more than one\\r\\n        // stablecoin per dollar of CASH\\r\\n        if (primaryStablePrice < 1e18) {\\r\\n            primaryStablePrice = 1e18;\\r\\n        }\\r\\n        \\r\\n        // Calculate totalOutputRatio\\r\\n        uint256 ratio = primaryStableBalance\\r\\n            .scaleBy(18,primaryStableDecimals)\\r\\n            .mul(primaryStablePrice)\\r\\n            .div(totalBalance);\\r\\n\\r\\n        // Calculate final outputs\\r\\n        uint256 factor = _amount.divPrecisely(ratio);\\r\\n        return (primaryStableBalance.mul(factor).div(totalBalance), totalBalance, redeemFee.div(10**(18 - primaryStableDecimals)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get an array of the supported asset prices in USD.\\r\\n     * @return assetPrices Array of asset prices in USD (1e18)\\r\\n     */\\r\\n    function _getAssetPrices()\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory assetPrices)\\r\\n    {\\r\\n        assetPrices = new uint256[](getAssetCount());\\r\\n\\r\\n        IOracle oracle = IOracle(priceProvider);\\r\\n        // Price from Oracle is returned with 8 decimals\\r\\n        // _amount is in assetDecimals\\r\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\r\\n            assetPrices[i] = oracle.price(allAssets[i]).scaleBy(18, 8);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /********************************\\r\\n                Swapping\\r\\n    *********************************/\\r\\n    function _swapAsset(address tokenFrom, address tokenTo) internal {\\r\\n        setBalancerVault(balancerVault);\\r\\n        if ( ( tokenFrom != tokenTo) && (IERC20(tokenFrom).balanceOf(address(this)) > 0) )  {\\r\\n            console.log(\\\"VaultCore: Swapping from \\\", tokenFrom, tokenTo);\\r\\n            swap(\\r\\n                balancerPoolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(tokenFrom)),\\r\\n                IAsset(address(tokenTo)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                IERC20(tokenFrom).balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                    Utils\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Return the number of assets supported by the Vault.\\r\\n     */\\r\\n    function getAssetCount() public view returns (uint256) {\\r\\n        return allAssets.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return all asset addresses in order\\r\\n     */\\r\\n    function getAllAssets() external view returns (address[] memory) {\\r\\n        return allAssets;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the number of strategies active on the Vault.\\r\\n     */\\r\\n    function getStrategyCount() external view returns (uint256) {\\r\\n        return allStrategies.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the array of all strategies\\r\\n     */\\r\\n    function getAllStrategies() external view returns (address[] memory) {\\r\\n        return allStrategies;\\r\\n    }\\r\\n\\r\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\r\\n        return assets[_asset].isSupported;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Falldown to the admin implementation\\r\\n     * @notice This is a catch all for all functions not declared in core\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        bytes32 slot = adminImplPosition;\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(\\r\\n                gas(),\\r\\n                sload(slot),\\r\\n                0,\\r\\n                calldatasize(),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf264dd8bded32c003d546ddb8dfe2baa92376bfbf818f2da0d8f709c202d2cf4\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH VaultStorage Contract\\r\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\nimport { CASH } from \\\"../token/CASH.sol\\\";\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport \\\"../utils/Helpers.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\n\\r\\ncontract VaultStorage is Initializable, Governable {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n    using SafeMath for int256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event AssetSupported(address _asset);\\r\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\r\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\r\\n    event StrategyApproved(address _addr);\\r\\n    event StrategyRemoved(address _addr);\\r\\n    event Mint(address _addr, uint256 _value);\\r\\n    event Redeem(address _addr, uint256 _value);\\r\\n    event CapitalPaused();\\r\\n    event CapitalUnpaused();\\r\\n    event RebasePaused();\\r\\n    event RebaseUnpaused();\\r\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\r\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\r\\n    event PriceProviderUpdated(address _priceProvider);\\r\\n    event AllocateThresholdUpdated(uint256 _threshold);\\r\\n    event RebaseThresholdUpdated(uint256 _threshold);\\r\\n    event StrategistUpdated(address _address);\\r\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\r\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\r\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\r\\n    event TrusteeAddressChanged(address _address);\\r\\n\\r\\n    // Assets supported by the Vault, i.e. Stablecoins\\r\\n    struct Asset {\\r\\n        bool isSupported;\\r\\n    }\\r\\n    mapping(address => Asset) internal assets;\\r\\n    address[] internal allAssets;\\r\\n\\r\\n    // Strategies approved for use by the Vault\\r\\n    struct Strategy {\\r\\n        bool isSupported;\\r\\n        uint256 _deprecated; // Deprecated storage slot\\r\\n    }\\r\\n    mapping(address => Strategy) internal strategies;\\r\\n    address[] internal allStrategies;\\r\\n\\r\\n    // Address of the Oracle price provider contract\\r\\n    address public priceProvider;\\r\\n    // Pausing bools\\r\\n    bool public rebasePaused = false;\\r\\n    bool public capitalPaused = true;\\r\\n    \\r\\n    // Redemption fee in basis points\\r\\n    uint256 public redeemFeeBps;\\r\\n    address public labsAddress;\\r\\n    uint256 public labsFeeBps;\\r\\n    address public teamAddress;\\r\\n    uint256 public teamFeeBps;\\r\\n\\r\\n    // Buffer of assets to keep in Vault to handle (most) withdrawals\\r\\n    uint256 public vaultBuffer;\\r\\n    // Mints over this amount automatically allocate funds. 18 decimals.\\r\\n    uint256 public autoAllocateThreshold;\\r\\n    // Mints over this amount automatically rebase. 18 decimals.\\r\\n    uint256 public rebaseThreshold;\\r\\n\\r\\n    CASH internal cash;\\r\\n\\r\\n    //keccak256(\\\"CASH.vault.governor.admin.impl\\\");\\r\\n    bytes32 constant adminImplPosition =\\r\\n        0x10e4e34101c81b29558fe5b91534ae1af03c346313e21b0f6446695a8e18e243;\\r\\n\\r\\n    // Address of the contract responsible for post rebase syncs with AMMs\\r\\n    address private _deprecated_rebaseHooksAddr = address(0);\\r\\n\\r\\n    // Deprecated: Address of Uniswap\\r\\n    // slither-disable-next-line constable-states\\r\\n    address private _deprecated_uniswapAddr = address(0);\\r\\n\\r\\n    // Address of the Strategist\\r\\n    address public strategistAddr = address(0);\\r\\n\\r\\n    // Mapping of asset address to the Strategy that they should automatically\\r\\n    // be allocated to\\r\\n    mapping(address => address) public assetDefaultStrategies;\\r\\n\\r\\n    uint256 public maxSupplyDiff;\\r\\n\\r\\n    // Trustee contract that can collect a percentage of yield\\r\\n    address public trusteeAddress;\\r\\n\\r\\n    // Amount of yield collected in basis points\\r\\n    uint256 public trusteeFeeBps;\\r\\n\\r\\n    // Deprecated: Tokens that should be swapped for stablecoins\\r\\n    address[] private _deprecated_swapTokens;\\r\\n\\r\\n    uint256 constant MINT_MINIMUM_ORACLE = 99800000;\\r\\n\\r\\n    address public primaryStableAddress;\\r\\n    \\r\\n    // List of strategies for quickly depositing the primaryStable to.\\r\\n    address[] public quickDepositStrategies;\\r\\n\\r\\n    // Balancer pool to swap the asset to primaryStable\\r\\n    address public balancerVault;\\r\\n    bytes32 public balancerPoolId;\\r\\n\\r\\n    // Harvester & Dripper\\r\\n    address public harvesterAddress;\\r\\n    address public dripperAddress;\\r\\n\\r\\n\\r\\n    struct StrategyWithWeight {\\r\\n        address strategy;\\r\\n        uint256 minWeight;\\r\\n        uint256 targetWeight;\\r\\n        uint256 maxWeight;\\r\\n        bool enabled;\\r\\n        bool enabledReward;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public strategyWithWeightPositions;\\r\\n    StrategyWithWeight[] public strategyWithWeights;\\r\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\r\\n\\r\\n    struct Order {\\r\\n        bool stake;\\r\\n        address strategy;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the implementation for the admin, this needs to be in a base class else we cannot set it\\r\\n     * @param newImpl address of the implementation\\r\\n     */\\r\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\r\\n        require(\\r\\n            Address.isContract(newImpl),\\r\\n            \\\"new implementation is not a contract\\\"\\r\\n        );\\r\\n        bytes32 position = adminImplPosition;\\r\\n        assembly {\\r\\n            sstore(position, newImpl)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2cdcf23e59ace4bef80150554c236305823b17dc8cbcad53fd055712701b8fc7\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526037805461ffff60a01b1916600160a81b179055604180546001600160a01b031990811690915560428054821690556043805490911690553480156200004957600080fd5b506200006233600080516020620044f083398151915255565b600080516020620044f0833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a361443680620000ba6000396000f3fe60806040526004361061027d5760003560e01c8063840189421161014f578063c3b28864116100c1578063d4c3eea01161007a578063d4c3eea0146107bc578063dbbb64b9146107d1578063e0de8939146107e7578063e6cc543214610807578063ed2a2f9d14610828578063fc0cfeee1461083f5761027d565b8063c3b28864146106d5578063c46b3dc4146106ea578063c71daccb14610717578063c7af33521461072c578063cc18f12d14610741578063d38bfff41461079c5761027d565b80639fa1826e116101135780639fa1826e1461062a578063a0aead4d14610640578063a403e4d514610655578063abaa99161461068b578063af14052c146106a0578063b888879e146106b55761027d565b8063840189421461059a5780638e510b52146105b05780638ffa4618146105c65780639be918e6146105dc5780639dc5a414146106155761027d565b806331e19cfa116101f3578063545ad78c116101ac578063545ad78c146104e5578063570d8e1d146105055780635d36b1901461052557806367c7066c1461053a5780637136a7a61461055a5780637cbc23731461057a5761027d565b806331e19cfa1461042957806349c1d54d1461043e5780634f2d7d6f1461045e57806352d38e5d1461047e57806353ca9f2414610494578063543fe442146104c55761027d565b8063156e29f611610245578063156e29f61461037b578063158274a51461039b5780631c75f085146103bb5780631edfe3da146103db578063207134b0146103f15780632acada4d146104075761027d565b8063063bde24146102c357806309f6442c146102f65780630bf413611461030c5780630c340a241461034457806310d9571c14610359575b7f10e4e34101c81b29558fe5b91534ae1af03c346313e21b0f6446695a8e18e243366000803760008036600084545af43d6000803e8080156102be573d6000f35b3d6000fd5b3480156102cf57600080fd5b506102e36b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b34801561030257600080fd5b506102e360385481565b34801561031857600080fd5b5061032c610327366004613d38565b61085f565b6040516001600160a01b0390911681526020016102ed565b34801561035057600080fd5b5061032c610889565b34801561036557600080fd5b50610379610374366004613ce3565b6108a6565b005b34801561038757600080fd5b50610379610396366004613ce3565b610924565b3480156103a757600080fd5b50604b5461032c906001600160a01b031681565b3480156103c757600080fd5b50603b5461032c906001600160a01b031681565b3480156103e757600080fd5b506102e3603d5481565b3480156103fd57600080fd5b506102e360475481565b34801561041357600080fd5b5061041c6109ae565b6040516102ed9190613e68565b34801561043557600080fd5b506036546102e3565b34801561044a57600080fd5b5060465461032c906001600160a01b031681565b34801561046a57600080fd5b5060495461032c906001600160a01b031681565b34801561048a57600080fd5b506102e3603f5481565b3480156104a057600080fd5b506037546104b590600160a01b900460ff1681565b60405190151581526020016102ed565b3480156104d157600080fd5b5060395461032c906001600160a01b031681565b3480156104f157600080fd5b50604e5461032c906001600160a01b031681565b34801561051157600080fd5b5060435461032c906001600160a01b031681565b34801561053157600080fd5b50610379610a10565b34801561054657600080fd5b50604d5461032c906001600160a01b031681565b34801561056657600080fd5b50610379610575366004613d38565b610ab6565b34801561058657600080fd5b50610379610595366004613d6a565b610ba1565b3480156105a657600080fd5b506102e3603c5481565b3480156105bc57600080fd5b506102e360455481565b3480156105d257600080fd5b506102e3603a5481565b3480156105e857600080fd5b506104b56105f7366004613cc8565b6001600160a01b031660009081526033602052604090205460ff1690565b34801561062157600080fd5b50610379610c14565b34801561063657600080fd5b506102e3603e5481565b34801561064c57600080fd5b506034546102e3565b34801561066157600080fd5b5061032c610670366004613cc8565b6044602052600090815260409020546001600160a01b031681565b34801561069757600080fd5b50610379610c83565b3480156106ac57600080fd5b50610379610ceb565b3480156106c157600080fd5b5060375461032c906001600160a01b031681565b3480156106e157600080fd5b5061041c610d29565b3480156106f657600080fd5b506102e3610705366004613cc8565b604f6020526000908152604090205481565b34801561072357600080fd5b506102e3610d89565b34801561073857600080fd5b506104b5610d93565b34801561074d57600080fd5b5061076161075c366004613d38565b610dc4565b604080516001600160a01b039097168752602087019590955293850192909252606084015215156080830152151560a082015260c0016102ed565b3480156107a857600080fd5b506103796107b7366004613cc8565b610e1b565b3480156107c857600080fd5b506102e3610eef565b3480156107dd57600080fd5b506102e3604c5481565b3480156107f357600080fd5b506102e3610802366004613d38565b610ef9565b34801561081357600080fd5b506037546104b590600160a81b900460ff1681565b34801561083457600080fd5b506102e3620186a081565b34801561084b57600080fd5b5061037961085a366004613cc8565b610f0f565b604a818154811061086f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006108a160008051602061436c8339815191525490565b905090565b603754600160a81b900460ff16156108d95760405162461bcd60e51b81526004016108d090613fba565b60405180910390fd5b60008051602061434c8339815191528054600281141561090b5760405162461bcd60e51b81526004016108d090613fe2565b6002825561091a858585610fe1565b5060019055505050565b603754600160a81b900460ff161561094e5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c833981519152805460028114156109805760405162461bcd60e51b81526004016108d090613fe2565b6002825561098f858585610fe1565b6049546109a69086906001600160a01b03166112f3565b61091a61147a565b60606034805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109e8575b5050505050905090565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b031614610aab5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016108d0565b610ab433611708565b565b603754600160a81b900460ff1615610ae05760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610b125760405162461bcd60e51b81526004016108d090613fe2565b600282556040805490516370a0823160e01b8152336004820152610b99916001600160a01b0316906370a082319060240160206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190613d51565b846117cc565b506001905550565b603754600160a81b900460ff1615610bcb5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610bfd5760405162461bcd60e51b81526004016108d090613fe2565b60028255610c0b84846117cc565b50600190555050565b603754600160a81b900460ff1615610c3e5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610c705760405162461bcd60e51b81526004016108d090613fe2565b60028255610c7c61147a565b5060019055565b603754600160a81b900460ff1615610cad5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610cdf5760405162461bcd60e51b81526004016108d090613fe2565b60028255610c7c6122ff565b60008051602061434c83398151915280546002811415610d1d5760405162461bcd60e51b81526004016108d090613fe2565b60028255610c7c61268e565b60606036805480602002602001604051908101604052809291908181526020018280548015610a06576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109e8575050505050905090565b60006108a1612b62565b6000610dab60008051602061436c8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b60508181548110610dd457600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff8082169161010090041686565b610e23610d93565b610e6f5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000060448201526064016108d0565b610e97817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b0316610eb760008051602061436c8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006108a1612cba565b600080610f0583612cd5565b5090949350505050565b610f17610d93565b610f635760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000060448201526064016108d0565b803b610fbd5760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084016108d0565b7f10e4e34101c81b29558fe5b91534ae1af03c346313e21b0f6446695a8e18e24355565b6001600160a01b03831660009081526033602052604090205460ff166110425760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b60448201526064016108d0565b600082116110925760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016108d0565b6037546040516315d5220f60e31b81526001600160a01b038581166004830152600092169063aea910789060240160206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190613d51565b90506305f5e10081111561112557506305f5e1005b6305f2d3c08110156111715760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b60448201526064016108d0565b600061117c85612e82565b9050600061118c85601284612f71565b905060006111b36111a08560126008612f71565b6111ab85600a614157565b889190612fd5565b9050841561120b578481101561120b5760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d000060448201526064016108d0565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885338260405161123c929190613e4f565b60405180910390a1603f5482101580156112605750603754600160a01b900460ff16155b1561126d5761126d61268e565b6040805490516340c10f1960e01b81526001600160a01b03909116906340c10f199061129f9033908590600401613e4f565b600060405180830381600087803b1580156112b957600080fd5b505af11580156112cd573d6000803e3d6000fd5b508992506112e99150506001600160a01b03821633308a612ff7565b5050505050505050565b604b54605180546001600160a01b0319166001600160a01b039283161790558181169083161480159061139d57506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561136357600080fd5b505afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190613d51565b115b15611476576113e26040518060400160405280601981526020017f5661756c74436f72653a205377617070696e672066726f6d2000000000000000815250838361304f565b604c546040516370a0823160e01b815230600482018190526114749291600091869186919081906001600160a01b038516906370a082319060240160206040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190613d51565b6000613096565b505b5050565b61151660405180606001604052806027815260200161438c602791396049546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190613d51565b6133e8565b604a54600090611526904361429c565b90506000604a828154811061153d5761153d6142f2565b60009182526020822001546049546040516370a0823160e01b81523060048201526001600160a01b0392831694509116906370a082319060240160206040518083038186803b15801561158f57600080fd5b505afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c79190613d51565b90506001600160a01b038216158015906115e15750600081115b1561147457600082905061163c60405180604001604052806011815260200170028bab4b1b5902232b837b9b4ba34b7339607d1b81525083604051806040016040528060048152602001630103a37960e51b8152508661342d565b604954611653906001600160a01b03168284613476565b6049546040516311f9fbc960e21b81526001600160a01b03838116926347e7ef249261168792909116908690600401613e4f565b600060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b50506049546040517f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d93506116fa92506001600160a01b039091169086908690613df7565b60405180910390a150505050565b6001600160a01b03811661175e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016108d0565b806001600160a01b031661177e60008051602061436c8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36117c98160008051602061436c83398151915255565b50565b6000821161181c5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016108d0565b600080600061182a85612cd5565b9250925092506118606040518060400160405280600e81526020016d2932b232b2b69037baba383aba1d60911b815250846133e8565b6118906040518060400160405280600e81526020016d2130b1b5b4b733903b30b63ab29d60911b815250836133e8565b6118bd6040518060400160405280600b81526020016a2932b232b2b6902332b29d60a91b815250826133e8565b6049546000906118d5906001600160a01b0316612e82565b90506000604060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192757600080fd5b505afa15801561193b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195f9190613d51565b60455490915015611a035760006119768286613495565b9050604554670de0b6b3a764000082116119a15761199c670de0b6b3a7640000836134be565b6119b3565b6119b382670de0b6b3a76400006134be565b1115611a015760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f72000060448201526064016108d0565b505b8515611a6b576000611a1786601285612f71565b905086811015611a695760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d60448201526064016108d0565b505b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63388604051611a9c929190613e4f565b60405180910390a160008511611ae85760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f2072656465656d60781b60448201526064016108d0565b6049546050546001600160a01b039091169060009067ffffffffffffffff811115611b1557611b15614308565b604051908082528060200260200182016040528015611b3e578160200160208202803683370190505b5060505490915060009067ffffffffffffffff811115611b6057611b60614308565b604051908082528060200260200182016040528015611b89578160200160208202803683370190505b506040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a082319060240160206040518083038186803b158015611bcf57600080fd5b505afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c079190613d51565b90506000805b611c17898c6140e8565b8311158015611c2a575060505460ff8316105b15611f5f57600060508360ff1681548110611c4757611c476142f2565b6000918252602091829020600590910201546040805163c71daccb60e01b815290516001600160a01b039092169263c71daccb92600480840193829003018186803b158015611c9557600080fd5b505afa158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccd9190613d51565b9050611d3e6040518060400160405280601981526020017f43757272656e742073747261746567792062616c616e63653a0000000000000081525060508560ff1681548110611d1e57611d1e6142f2565b60009182526020909120600590910201546001600160a01b0316836134ca565b8015611ee757611d4e8a8d6140e8565b611d5885836140e8565b1115611e415760508360ff1681548110611d7457611d746142f2565b600091825260209091206005909102015486516001600160a01b0390911690879060ff8516908110611da857611da86142f2565b6001600160a01b0390921660209283029190910190910152611dca8a8d6140e8565b611dd485836140e8565b611dde919061421e565b611de8908261421e565b858360ff1681518110611dfd57611dfd6142f2565b6020908102919091010152611e128a8d6140e8565b611e1c85836140e8565b611e26919061421e565b611e30908261421e565b611e3a90856140e8565b9350611ed9565b60508360ff1681548110611e5757611e576142f2565b600091825260209091206005909102015486516001600160a01b0390911690879060ff8516908110611e8b57611e8b6142f2565b60200260200101906001600160a01b031690816001600160a01b03168152505080858360ff1681518110611ec157611ec16142f2565b6020908102919091010152611ed681856140e8565b93505b81611ee38161427c565b9250505b611f4c604051806040016040528060138152602001722a37ba30b61030b6b7bab73a1030b33a32b91d60691b81525060508560ff1681548110611f2c57611f2c6142f2565b60009182526020909120600590910201546001600160a01b0316866134ca565b82611f568161427c565b93505050611c0d565b611f8e6040518060400160405280600d81526020016c2a37ba30b61030b6b7bab73a1d60991b815250846133e8565b611f98898c6140e8565b831015611ff35760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f7567682066756e647320616e79776865726520746f2072656460448201526332b2b69760e11b60648201526084016108d0565b60005b60505460ff8216101561215c5760006001600160a01b0316868260ff1681518110612023576120236142f2565b60200260200101516001600160a01b0316141561203f5761215c565b61209a6040518060600160405280602d815260200161431f602d9139878360ff1681518110612070576120706142f2565b6020026020010151878460ff168151811061208d5761208d6142f2565b60200260200101516134ca565b858160ff16815181106120af576120af6142f2565b60200260200101516001600160a01b031663d9caed1230604960009054906101000a90046001600160a01b0316888560ff16815181106120f1576120f16142f2565b60200260200101516040518463ffffffff1660e01b815260040161211793929190613df7565b600060405180830381600087803b15801561213157600080fd5b505af1158015612145573d6000803e3d6000fd5b5050505080806121549061427c565b915050611ff6565b50612167898c6140e8565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b1580156121a657600080fd5b505afa1580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190613d51565b10156122365760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f7567682066756e64732061667465722077697468647261776c6044820152601760f91b60648201526084016108d0565b61224a6001600160a01b038716338d613476565b61225389613511565b604060009054906101000a90046001600160a01b03166001600160a01b0316639dc29fac338f6040518363ffffffff1660e01b8152600401612296929190613e4f565b600060405180830381600087803b1580156122b057600080fd5b505af11580156122c4573d6000803e3d6000fd5b50505050603f548d1180156122e35750603754600160a01b900460ff16155b156122f0576122f061268e565b50505050505050505050505050565b60006123096137b5565b9050806123135750565b600061231d6138da565b9050600061232b838361392f565b905060008261235157603d5461234a90670de0b6b3a7640000906134be565b905061239a565b6123708461236a84603d5461393b90919063ffffffff16565b90613947565b905080670de0b6b3a764000011156123945761234a670de0b6b3a7640000826134be565b50505050565b806123a55750505050565b60005b60345481101561260b576000603482815481106123c7576123c76142f2565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561241557600080fd5b505afa158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190613d51565b90506124b060348481548110612465576124656142f2565b9060005260206000200160009054906101000a90046001600160a01b03166040518060400160405280600e81526020016d030b9b9b2ba2130b630b731b29d160951b81525083613953565b806124bc5750506125f9565b60006124c8828661399a565b6001600160a01b038085166000908152604460205260409020549192501680158015906124f55750600082115b156125f45761254260405180604001604052806008815260200167029b2b73234b733960c51b81525083604051806040016040528060048152602001630103a37960e51b8152508461342d565b806125576001600160a01b0386168285613476565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef24906125859088908790600401613e4f565b600060405180830381600087803b15801561259f57600080fd5b505af11580156125b3573d6000803e3d6000fd5b505050507f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d8583856040516125ea93929190613df7565b60405180910390a1505b505050505b8061260381614261565b9150506123a8565b506046546001600160a01b0316801561268757604660009054906101000a90046001600160a01b03166001600160a01b0316638119c0656040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561266e57600080fd5b505af1158015612682573d6000803e3d6000fd5b505050505b5050505050565b603754600160a01b900460ff16156126da5760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b60448201526064016108d0565b6000604060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561272a57600080fd5b505afa15801561273e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127629190613d51565b90506127996040518060400160405280601381526020017202a37ba30b61021a0a9a41029bab838363c9d1606d1b815250826133e8565b806127a15750565b60006127ab612cba565b90506127e26040518060400160405280601381526020017202a37ba30b6102b30bab63a102b30b63ab29d1606d1b815250826133e8565b60465460408051808201909152601181527002a393ab9ba32b29020b2323932b9b99d1607d1b60208201526001600160a01b039091169061282390826139af565b6001600160a01b0381161580159061283a57508282115b15612a5857612874604051806040016040528060148152602001732cb4b2b632103332b29031b7b63632b1ba34b7b760611b8152506139f4565b600061288083856134be565b90506128ab6040518060400160405280600781526020016602cb4b2b6321d160cd1b815250826133e8565b60006128c861271061236a6047548561393b90919063ffffffff16565b90506128f16040518060400160405280600581526020016402332b29d160dd1b815250826133e8565b80821161294b5760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b60648201526084016108d0565b8015612a0b576129a660405180604001604052806015815260200174026b4b73a34b7339021a0a9a4103337b9103332b29605d1b81525082604051806040016040528060048152602001630103a37960e51b8152508661342d565b6040805490516340c10f1960e01b81526001600160a01b03909116906340c10f19906129d89086908590600401613e4f565b600060405180830381600087803b1580156129f257600080fd5b505af1158015612a06573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b6040805481516318160ddd60e01b815291516001600160a01b03909116916318160ddd916004808301926020929190829003018186803b158015612a9b57600080fd5b505afa158015612aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad39190613d51565b92508282111561147457612aff6040518060800160405280604e81526020016143b3604e9139836133e8565b6040805490516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b158015612b4557600080fd5b505af1158015612b59573d6000803e3d6000fd5b50505050505050565b6049546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a082319060240160206040518083038186803b158015612ba857600080fd5b505afa158015612bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be09190613d51565b915060005b603654811015612cb557600060368281548110612c0457612c046142f2565b9060005260206000200160009054906101000a90046001600160a01b03169050612c9f816001600160a01b031663c71daccb6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c6057600080fd5b505afa158015612c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c989190613d51565b859061392f565b9350508080612cad90614261565b915050612be5565b505090565b60006108a1612cc76138da565b612ccf6137b5565b9061392f565b6037546049546040516315d5220f60e31b81526001600160a01b039182166004820152600092839283929116908290612d7090601290600890859063aea910789060240160206040518083038186803b158015612d3157600080fd5b505afa158015612d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d699190613d51565b9190612f71565b90506000612d7c612b62565b604954909150600090612d97906001600160a01b0316612e82565b90506000806000603a541180612daf57506000603c54115b15612dde57612dcf61271061236a6038548d61393b90919063ffffffff16565b9050612ddb8a826134be565b99505b612df4612ded85601286612f71565b839061392f565b9150670de0b6b3a7640000851015612e1257670de0b6b3a764000094505b6000612e2e8361236a88612e288960128a612f71565b9061393b565b90506000612e3c8c83613495565b9050612e4c8461236a888461393b565b84612e6d612e5b88601261421e565b612e6690600a614157565b8690613947565b9a509a509a5050505050505050509193909250565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612ebe57600080fd5b505afa158015612ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef69190613d8c565b60ff16905060048110158015612f0d575060128111155b612f6b5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b60648201526084016108d0565b92915050565b600081831115612fa157612f9a612f88838561421e565b612f9390600a614157565b859061393b565b9350612fcb565b81831015612fcb57612fc8612fb6848461421e565b612fc190600a614157565b8590613947565b93505b50825b9392505050565b600080612fe2858561393b565b9050612fee8184613947565b95945050505050565b612394846323b872dd60e01b85858560405160240161301893929190613df7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a37565b61147483838360405160240161306793929190613ef2565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052613b09565b60408051808201909152601981527842616c616e6365725661756c743a207377617070696e67203160381b60208201526051546000916130de916001600160a01b03166139af565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b815230600482015261318f919089906001600160a01b038216906370a082319060240160206040518083038186803b15801561315257600080fd5b505afa158015613166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318a9190613d51565b6134ca565b6051546040516370a0823160e01b81523060048201526001600160a01b038981169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156131dd57600080fd5b505afa1580156131f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132159190613d51565b6040518363ffffffff1660e01b8152600401613232929190613e4f565b602060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132849190613d16565b506132d16040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b898152602081018960018111156132ea576132ea6142dc565b908160018111156132fd576132fd6142dc565b9052506001600160a01b03888116604083810191909152888216606080850191909152608080850188905282519081018352600060208201819052918101919091528883168152878316918101919091526051549091166352bbbe29838387613368426102586140e8565b6040518563ffffffff1660e01b8152600401613387949392919061400a565b602060405180830381600087803b1580156133a157600080fd5b505af11580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d99190613d51565b9b9a5050505050505050505050565b61147682826040516024016133fe929190613f53565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052613b09565b612394848484846040516024016134479493929190613f75565b60408051601f198184030181529190526020810180516001600160e01b031663bb7235e960e01b179052613b09565b6114748363a9059cbb60e01b8484604051602401613018929190613e4f565b6000806134aa84670de0b6b3a764000061393b565b90506134b68184613947565b949350505050565b6000612fce828461421e565b6114748383836040516024016134e293929190613f25565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052613b09565b6000811161356c5760405162461bcd60e51b815260206004820152602260248201527f416d6f756e742073686f756c642062652067726561746572207468616e207a65604482015261726f60f01b60648201526084016108d0565b61359f604051806040016040528060118152602001702234b9ba3934b13aba34b733903332b29d60791b815250826133e8565b60006135b961271061236a603a54600a612f9391906141ff565b90506135ea6040518060400160405280600b81526020016a3630b139a332b2a138399d60a91b815250603a546133e8565b61361e6040518060400160405280601281526020017129b2b73234b733903630b139903332b2b99d60711b815250826133e8565b600061363f61271061236a603c54600a61363891906141ff565b869061393b565b90506136706040518060400160405280600b81526020016a3a32b0b6a332b2a138399d60a91b815250603c546133e8565b6136a46040518060400160405280601281526020017129b2b73234b733903a32b0b6903332b2b99d60711b815250826133e8565b60495460395460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926136da929116908690600401613e4f565b602060405180830381600087803b1580156136f457600080fd5b505af1158015613708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372c9190613d16565b50604954603b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92613763929116908590600401613e4f565b602060405180830381600087803b15801561377d57600080fd5b505af1158015613791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123949190613d16565b6000805b6034548110156138d6576000603482815481106137d8576137d86142f2565b6000918252602082200154603480546001600160a01b0390921693506138229185908110613808576138086142f2565b6000918252602090912001546001600160a01b0316612e82565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561386757600080fd5b505afa15801561387b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389f9190613d51565b905080156138c0576138bd6138b682601285612f71565b869061392f565b94505b50505080806138ce90614261565b9150506137b9565b5090565b6000805b6036548110156138d65761391b612ded60368381548110613901576139016142f2565b6000918252602090912001546001600160a01b0316613b2a565b91508061392781614261565b9150506138de565b6000612fce82846140e8565b6000612fce82846141ff565b6000612fce8284614100565b61147483838360405160240161396b93929190613e1b565b60408051601f198184030181529190526020810180516001600160e01b0316630e6d794560e11b179052613b09565b6000612fce8383670de0b6b3a7640000612fd5565b61147682826040516024016139c5929190613ec8565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052613b09565b6117c981604051602401613a089190613eb5565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613b09565b6000613a8c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ba19092919063ffffffff16565b8051909150156114745780806020019051810190613aaa9190613d16565b6114745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d0565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080829050806001600160a01b031663c71daccb6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6957600080fd5b505afa158015613b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fce9190613d51565b60606134b6848460008585843b613bfa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d0565b600080866001600160a01b03168587604051613c169190613ddb565b60006040518083038185875af1925050503d8060008114613c53576040519150601f19603f3d011682016040523d82523d6000602084013e613c58565b606091505b5091509150613c68828286613c73565b979650505050505050565b60608315613c82575081612fce565b825115613c925782518084602001fd5b8160405162461bcd60e51b81526004016108d09190613eb5565b80356001600160a01b0381168114613cc357600080fd5b919050565b600060208284031215613cda57600080fd5b612fce82613cac565b600080600060608486031215613cf857600080fd5b613d0184613cac565b95602085013595506040909401359392505050565b600060208284031215613d2857600080fd5b81518015158114612fce57600080fd5b600060208284031215613d4a57600080fd5b5035919050565b600060208284031215613d6357600080fd5b5051919050565b60008060408385031215613d7d57600080fd5b50508035926020909101359150565b600060208284031215613d9e57600080fd5b815160ff81168114612fce57600080fd5b60008151808452613dc7816020860160208601614235565b601f01601f19169290920160200192915050565b60008251613ded818460208701614235565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0384168152606060208201819052600090613e3f90830185613daf565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015613ea95783516001600160a01b031683529284019291840191600101613e84565b50909695505050505050565b602081526000612fce6020830184613daf565b604081526000613edb6040830185613daf565b905060018060a01b03831660208301529392505050565b606081526000613f056060830186613daf565b6001600160a01b0394851660208401529290931660409091015292915050565b606081526000613f386060830186613daf565b6001600160a01b039490941660208301525060400152919050565b604081526000613f666040830185613daf565b90508260208301529392505050565b608081526000613f886080830187613daf565b8560208401528281036040840152613fa08186613daf565b91505060018060a01b038316606083015295945050505050565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60e08152845160e0820152600060208601516002811061403a57634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b0316610120830152606086015161406f6101408401826001600160a01b03169052565b50608086015161016083015260a086015160c06101808401526140966101a0840182613daf565b9150506140d6602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b600082198211156140fb576140fb6142b0565b500190565b60008261410f5761410f6142c6565b500490565b600181815b8085111561414f578160001904821115614135576141356142b0565b8085161561414257918102915b93841c9390800290614119565b509250929050565b6000612fce838360008261416d57506001612f6b565b8161417a57506000612f6b565b8160018114614190576002811461419a576141b6565b6001915050612f6b565b60ff8411156141ab576141ab6142b0565b50506001821b612f6b565b5060208310610133831016604e8410600b84101617156141d9575081810a612f6b565b6141e38383614114565b80600019048211156141f7576141f76142b0565b029392505050565b6000816000190483118215151615614219576142196142b0565b500290565b600082821015614230576142306142b0565b500390565b60005b83811015614250578181015183820152602001614238565b838111156123945750506000910152565b6000600019821415614275576142756142b0565b5060010190565b600060ff821660ff811415614293576142936142b0565b60010192915050565b6000826142ab576142ab6142c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe5661756c74436f7265202d2052656465656d202d2057697468647261772066726f6d2073747261746567793a2048a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73717569636b416c6c6f63617465202d20207072696d617279537461626c6542616c616e63653a205374696c6c207661756c742076616c75652067726561746572207468616e20737570706c792c206368616e67696e6720737570706c79206f66204341534820666f72207661756c7456616c756520a26469706673582212204fd3bc3ec983ec8ccf72066cdd9c71b2d48a5d7b6c67907e24decf2d63fca30a64736f6c6343000806003383f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c8063840189421161014f578063c3b28864116100c1578063d4c3eea01161007a578063d4c3eea0146107bc578063dbbb64b9146107d1578063e0de8939146107e7578063e6cc543214610807578063ed2a2f9d14610828578063fc0cfeee1461083f5761027d565b8063c3b28864146106d5578063c46b3dc4146106ea578063c71daccb14610717578063c7af33521461072c578063cc18f12d14610741578063d38bfff41461079c5761027d565b80639fa1826e116101135780639fa1826e1461062a578063a0aead4d14610640578063a403e4d514610655578063abaa99161461068b578063af14052c146106a0578063b888879e146106b55761027d565b8063840189421461059a5780638e510b52146105b05780638ffa4618146105c65780639be918e6146105dc5780639dc5a414146106155761027d565b806331e19cfa116101f3578063545ad78c116101ac578063545ad78c146104e5578063570d8e1d146105055780635d36b1901461052557806367c7066c1461053a5780637136a7a61461055a5780637cbc23731461057a5761027d565b806331e19cfa1461042957806349c1d54d1461043e5780634f2d7d6f1461045e57806352d38e5d1461047e57806353ca9f2414610494578063543fe442146104c55761027d565b8063156e29f611610245578063156e29f61461037b578063158274a51461039b5780631c75f085146103bb5780631edfe3da146103db578063207134b0146103f15780632acada4d146104075761027d565b8063063bde24146102c357806309f6442c146102f65780630bf413611461030c5780630c340a241461034457806310d9571c14610359575b7f10e4e34101c81b29558fe5b91534ae1af03c346313e21b0f6446695a8e18e243366000803760008036600084545af43d6000803e8080156102be573d6000f35b3d6000fd5b3480156102cf57600080fd5b506102e36b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b34801561030257600080fd5b506102e360385481565b34801561031857600080fd5b5061032c610327366004613d38565b61085f565b6040516001600160a01b0390911681526020016102ed565b34801561035057600080fd5b5061032c610889565b34801561036557600080fd5b50610379610374366004613ce3565b6108a6565b005b34801561038757600080fd5b50610379610396366004613ce3565b610924565b3480156103a757600080fd5b50604b5461032c906001600160a01b031681565b3480156103c757600080fd5b50603b5461032c906001600160a01b031681565b3480156103e757600080fd5b506102e3603d5481565b3480156103fd57600080fd5b506102e360475481565b34801561041357600080fd5b5061041c6109ae565b6040516102ed9190613e68565b34801561043557600080fd5b506036546102e3565b34801561044a57600080fd5b5060465461032c906001600160a01b031681565b34801561046a57600080fd5b5060495461032c906001600160a01b031681565b34801561048a57600080fd5b506102e3603f5481565b3480156104a057600080fd5b506037546104b590600160a01b900460ff1681565b60405190151581526020016102ed565b3480156104d157600080fd5b5060395461032c906001600160a01b031681565b3480156104f157600080fd5b50604e5461032c906001600160a01b031681565b34801561051157600080fd5b5060435461032c906001600160a01b031681565b34801561053157600080fd5b50610379610a10565b34801561054657600080fd5b50604d5461032c906001600160a01b031681565b34801561056657600080fd5b50610379610575366004613d38565b610ab6565b34801561058657600080fd5b50610379610595366004613d6a565b610ba1565b3480156105a657600080fd5b506102e3603c5481565b3480156105bc57600080fd5b506102e360455481565b3480156105d257600080fd5b506102e3603a5481565b3480156105e857600080fd5b506104b56105f7366004613cc8565b6001600160a01b031660009081526033602052604090205460ff1690565b34801561062157600080fd5b50610379610c14565b34801561063657600080fd5b506102e3603e5481565b34801561064c57600080fd5b506034546102e3565b34801561066157600080fd5b5061032c610670366004613cc8565b6044602052600090815260409020546001600160a01b031681565b34801561069757600080fd5b50610379610c83565b3480156106ac57600080fd5b50610379610ceb565b3480156106c157600080fd5b5060375461032c906001600160a01b031681565b3480156106e157600080fd5b5061041c610d29565b3480156106f657600080fd5b506102e3610705366004613cc8565b604f6020526000908152604090205481565b34801561072357600080fd5b506102e3610d89565b34801561073857600080fd5b506104b5610d93565b34801561074d57600080fd5b5061076161075c366004613d38565b610dc4565b604080516001600160a01b039097168752602087019590955293850192909252606084015215156080830152151560a082015260c0016102ed565b3480156107a857600080fd5b506103796107b7366004613cc8565b610e1b565b3480156107c857600080fd5b506102e3610eef565b3480156107dd57600080fd5b506102e3604c5481565b3480156107f357600080fd5b506102e3610802366004613d38565b610ef9565b34801561081357600080fd5b506037546104b590600160a81b900460ff1681565b34801561083457600080fd5b506102e3620186a081565b34801561084b57600080fd5b5061037961085a366004613cc8565b610f0f565b604a818154811061086f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006108a160008051602061436c8339815191525490565b905090565b603754600160a81b900460ff16156108d95760405162461bcd60e51b81526004016108d090613fba565b60405180910390fd5b60008051602061434c8339815191528054600281141561090b5760405162461bcd60e51b81526004016108d090613fe2565b6002825561091a858585610fe1565b5060019055505050565b603754600160a81b900460ff161561094e5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c833981519152805460028114156109805760405162461bcd60e51b81526004016108d090613fe2565b6002825561098f858585610fe1565b6049546109a69086906001600160a01b03166112f3565b61091a61147a565b60606034805480602002602001604051908101604052809291908181526020018280548015610a0657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109e8575b5050505050905090565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b031614610aab5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b60648201526084016108d0565b610ab433611708565b565b603754600160a81b900460ff1615610ae05760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610b125760405162461bcd60e51b81526004016108d090613fe2565b600282556040805490516370a0823160e01b8152336004820152610b99916001600160a01b0316906370a082319060240160206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190613d51565b846117cc565b506001905550565b603754600160a81b900460ff1615610bcb5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610bfd5760405162461bcd60e51b81526004016108d090613fe2565b60028255610c0b84846117cc565b50600190555050565b603754600160a81b900460ff1615610c3e5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610c705760405162461bcd60e51b81526004016108d090613fe2565b60028255610c7c61147a565b5060019055565b603754600160a81b900460ff1615610cad5760405162461bcd60e51b81526004016108d090613fba565b60008051602061434c83398151915280546002811415610cdf5760405162461bcd60e51b81526004016108d090613fe2565b60028255610c7c6122ff565b60008051602061434c83398151915280546002811415610d1d5760405162461bcd60e51b81526004016108d090613fe2565b60028255610c7c61268e565b60606036805480602002602001604051908101604052809291908181526020018280548015610a06576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109e8575050505050905090565b60006108a1612b62565b6000610dab60008051602061436c8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b60508181548110610dd457600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff8082169161010090041686565b610e23610d93565b610e6f5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000060448201526064016108d0565b610e97817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b0316610eb760008051602061436c8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006108a1612cba565b600080610f0583612cd5565b5090949350505050565b610f17610d93565b610f635760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000060448201526064016108d0565b803b610fbd5760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b60648201526084016108d0565b7f10e4e34101c81b29558fe5b91534ae1af03c346313e21b0f6446695a8e18e24355565b6001600160a01b03831660009081526033602052604090205460ff166110425760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b60448201526064016108d0565b600082116110925760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016108d0565b6037546040516315d5220f60e31b81526001600160a01b038581166004830152600092169063aea910789060240160206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190613d51565b90506305f5e10081111561112557506305f5e1005b6305f2d3c08110156111715760405162461bcd60e51b815260206004820152601560248201527441737365742070726963652062656c6f772070656760581b60448201526064016108d0565b600061117c85612e82565b9050600061118c85601284612f71565b905060006111b36111a08560126008612f71565b6111ab85600a614157565b889190612fd5565b9050841561120b578481101561120b5760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d000060448201526064016108d0565b7f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885338260405161123c929190613e4f565b60405180910390a1603f5482101580156112605750603754600160a01b900460ff16155b1561126d5761126d61268e565b6040805490516340c10f1960e01b81526001600160a01b03909116906340c10f199061129f9033908590600401613e4f565b600060405180830381600087803b1580156112b957600080fd5b505af11580156112cd573d6000803e3d6000fd5b508992506112e99150506001600160a01b03821633308a612ff7565b5050505050505050565b604b54605180546001600160a01b0319166001600160a01b039283161790558181169083161480159061139d57506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b15801561136357600080fd5b505afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190613d51565b115b15611476576113e26040518060400160405280601981526020017f5661756c74436f72653a205377617070696e672066726f6d2000000000000000815250838361304f565b604c546040516370a0823160e01b815230600482018190526114749291600091869186919081906001600160a01b038516906370a082319060240160206040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190613d51565b6000613096565b505b5050565b61151660405180606001604052806027815260200161438c602791396049546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190613d51565b6133e8565b604a54600090611526904361429c565b90506000604a828154811061153d5761153d6142f2565b60009182526020822001546049546040516370a0823160e01b81523060048201526001600160a01b0392831694509116906370a082319060240160206040518083038186803b15801561158f57600080fd5b505afa1580156115a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c79190613d51565b90506001600160a01b038216158015906115e15750600081115b1561147457600082905061163c60405180604001604052806011815260200170028bab4b1b5902232b837b9b4ba34b7339607d1b81525083604051806040016040528060048152602001630103a37960e51b8152508661342d565b604954611653906001600160a01b03168284613476565b6049546040516311f9fbc960e21b81526001600160a01b03838116926347e7ef249261168792909116908690600401613e4f565b600060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b50506049546040517f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d93506116fa92506001600160a01b039091169086908690613df7565b60405180910390a150505050565b6001600160a01b03811661175e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f72206973206164647265737328302900000000000060448201526064016108d0565b806001600160a01b031661177e60008051602061436c8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36117c98160008051602061436c83398151915255565b50565b6000821161181c5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016108d0565b600080600061182a85612cd5565b9250925092506118606040518060400160405280600e81526020016d2932b232b2b69037baba383aba1d60911b815250846133e8565b6118906040518060400160405280600e81526020016d2130b1b5b4b733903b30b63ab29d60911b815250836133e8565b6118bd6040518060400160405280600b81526020016a2932b232b2b6902332b29d60a91b815250826133e8565b6049546000906118d5906001600160a01b0316612e82565b90506000604060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192757600080fd5b505afa15801561193b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195f9190613d51565b60455490915015611a035760006119768286613495565b9050604554670de0b6b3a764000082116119a15761199c670de0b6b3a7640000836134be565b6119b3565b6119b382670de0b6b3a76400006134be565b1115611a015760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f72000060448201526064016108d0565b505b8515611a6b576000611a1786601285612f71565b905086811015611a695760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d60448201526064016108d0565b505b7f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a63388604051611a9c929190613e4f565b60405180910390a160008511611ae85760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f2072656465656d60781b60448201526064016108d0565b6049546050546001600160a01b039091169060009067ffffffffffffffff811115611b1557611b15614308565b604051908082528060200260200182016040528015611b3e578160200160208202803683370190505b5060505490915060009067ffffffffffffffff811115611b6057611b60614308565b604051908082528060200260200182016040528015611b89578160200160208202803683370190505b506040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a082319060240160206040518083038186803b158015611bcf57600080fd5b505afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c079190613d51565b90506000805b611c17898c6140e8565b8311158015611c2a575060505460ff8316105b15611f5f57600060508360ff1681548110611c4757611c476142f2565b6000918252602091829020600590910201546040805163c71daccb60e01b815290516001600160a01b039092169263c71daccb92600480840193829003018186803b158015611c9557600080fd5b505afa158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccd9190613d51565b9050611d3e6040518060400160405280601981526020017f43757272656e742073747261746567792062616c616e63653a0000000000000081525060508560ff1681548110611d1e57611d1e6142f2565b60009182526020909120600590910201546001600160a01b0316836134ca565b8015611ee757611d4e8a8d6140e8565b611d5885836140e8565b1115611e415760508360ff1681548110611d7457611d746142f2565b600091825260209091206005909102015486516001600160a01b0390911690879060ff8516908110611da857611da86142f2565b6001600160a01b0390921660209283029190910190910152611dca8a8d6140e8565b611dd485836140e8565b611dde919061421e565b611de8908261421e565b858360ff1681518110611dfd57611dfd6142f2565b6020908102919091010152611e128a8d6140e8565b611e1c85836140e8565b611e26919061421e565b611e30908261421e565b611e3a90856140e8565b9350611ed9565b60508360ff1681548110611e5757611e576142f2565b600091825260209091206005909102015486516001600160a01b0390911690879060ff8516908110611e8b57611e8b6142f2565b60200260200101906001600160a01b031690816001600160a01b03168152505080858360ff1681518110611ec157611ec16142f2565b6020908102919091010152611ed681856140e8565b93505b81611ee38161427c565b9250505b611f4c604051806040016040528060138152602001722a37ba30b61030b6b7bab73a1030b33a32b91d60691b81525060508560ff1681548110611f2c57611f2c6142f2565b60009182526020909120600590910201546001600160a01b0316866134ca565b82611f568161427c565b93505050611c0d565b611f8e6040518060400160405280600d81526020016c2a37ba30b61030b6b7bab73a1d60991b815250846133e8565b611f98898c6140e8565b831015611ff35760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f7567682066756e647320616e79776865726520746f2072656460448201526332b2b69760e11b60648201526084016108d0565b60005b60505460ff8216101561215c5760006001600160a01b0316868260ff1681518110612023576120236142f2565b60200260200101516001600160a01b0316141561203f5761215c565b61209a6040518060600160405280602d815260200161431f602d9139878360ff1681518110612070576120706142f2565b6020026020010151878460ff168151811061208d5761208d6142f2565b60200260200101516134ca565b858160ff16815181106120af576120af6142f2565b60200260200101516001600160a01b031663d9caed1230604960009054906101000a90046001600160a01b0316888560ff16815181106120f1576120f16142f2565b60200260200101516040518463ffffffff1660e01b815260040161211793929190613df7565b600060405180830381600087803b15801561213157600080fd5b505af1158015612145573d6000803e3d6000fd5b5050505080806121549061427c565b915050611ff6565b50612167898c6140e8565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a082319060240160206040518083038186803b1580156121a657600080fd5b505afa1580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190613d51565b10156122365760405162461bcd60e51b815260206004820152602160248201527f4e6f7420656e6f7567682066756e64732061667465722077697468647261776c6044820152601760f91b60648201526084016108d0565b61224a6001600160a01b038716338d613476565b61225389613511565b604060009054906101000a90046001600160a01b03166001600160a01b0316639dc29fac338f6040518363ffffffff1660e01b8152600401612296929190613e4f565b600060405180830381600087803b1580156122b057600080fd5b505af11580156122c4573d6000803e3d6000fd5b50505050603f548d1180156122e35750603754600160a01b900460ff16155b156122f0576122f061268e565b50505050505050505050505050565b60006123096137b5565b9050806123135750565b600061231d6138da565b9050600061232b838361392f565b905060008261235157603d5461234a90670de0b6b3a7640000906134be565b905061239a565b6123708461236a84603d5461393b90919063ffffffff16565b90613947565b905080670de0b6b3a764000011156123945761234a670de0b6b3a7640000826134be565b50505050565b806123a55750505050565b60005b60345481101561260b576000603482815481106123c7576123c76142f2565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561241557600080fd5b505afa158015612429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244d9190613d51565b90506124b060348481548110612465576124656142f2565b9060005260206000200160009054906101000a90046001600160a01b03166040518060400160405280600e81526020016d030b9b9b2ba2130b630b731b29d160951b81525083613953565b806124bc5750506125f9565b60006124c8828661399a565b6001600160a01b038085166000908152604460205260409020549192501680158015906124f55750600082115b156125f45761254260405180604001604052806008815260200167029b2b73234b733960c51b81525083604051806040016040528060048152602001630103a37960e51b8152508461342d565b806125576001600160a01b0386168285613476565b6040516311f9fbc960e21b81526001600160a01b038216906347e7ef24906125859088908790600401613e4f565b600060405180830381600087803b15801561259f57600080fd5b505af11580156125b3573d6000803e3d6000fd5b505050507f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d8583856040516125ea93929190613df7565b60405180910390a1505b505050505b8061260381614261565b9150506123a8565b506046546001600160a01b0316801561268757604660009054906101000a90046001600160a01b03166001600160a01b0316638119c0656040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561266e57600080fd5b505af1158015612682573d6000803e3d6000fd5b505050505b5050505050565b603754600160a01b900460ff16156126da5760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b60448201526064016108d0565b6000604060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561272a57600080fd5b505afa15801561273e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127629190613d51565b90506127996040518060400160405280601381526020017202a37ba30b61021a0a9a41029bab838363c9d1606d1b815250826133e8565b806127a15750565b60006127ab612cba565b90506127e26040518060400160405280601381526020017202a37ba30b6102b30bab63a102b30b63ab29d1606d1b815250826133e8565b60465460408051808201909152601181527002a393ab9ba32b29020b2323932b9b99d1607d1b60208201526001600160a01b039091169061282390826139af565b6001600160a01b0381161580159061283a57508282115b15612a5857612874604051806040016040528060148152602001732cb4b2b632103332b29031b7b63632b1ba34b7b760611b8152506139f4565b600061288083856134be565b90506128ab6040518060400160405280600781526020016602cb4b2b6321d160cd1b815250826133e8565b60006128c861271061236a6047548561393b90919063ffffffff16565b90506128f16040518060400160405280600581526020016402332b29d160dd1b815250826133e8565b80821161294b5760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b60648201526084016108d0565b8015612a0b576129a660405180604001604052806015815260200174026b4b73a34b7339021a0a9a4103337b9103332b29605d1b81525082604051806040016040528060048152602001630103a37960e51b8152508661342d565b6040805490516340c10f1960e01b81526001600160a01b03909116906340c10f19906129d89086908590600401613e4f565b600060405180830381600087803b1580156129f257600080fd5b505af1158015612a06573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b6040805481516318160ddd60e01b815291516001600160a01b03909116916318160ddd916004808301926020929190829003018186803b158015612a9b57600080fd5b505afa158015612aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad39190613d51565b92508282111561147457612aff6040518060800160405280604e81526020016143b3604e9139836133e8565b6040805490516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b158015612b4557600080fd5b505af1158015612b59573d6000803e3d6000fd5b50505050505050565b6049546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a082319060240160206040518083038186803b158015612ba857600080fd5b505afa158015612bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be09190613d51565b915060005b603654811015612cb557600060368281548110612c0457612c046142f2565b9060005260206000200160009054906101000a90046001600160a01b03169050612c9f816001600160a01b031663c71daccb6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c6057600080fd5b505afa158015612c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c989190613d51565b859061392f565b9350508080612cad90614261565b915050612be5565b505090565b60006108a1612cc76138da565b612ccf6137b5565b9061392f565b6037546049546040516315d5220f60e31b81526001600160a01b039182166004820152600092839283929116908290612d7090601290600890859063aea910789060240160206040518083038186803b158015612d3157600080fd5b505afa158015612d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d699190613d51565b9190612f71565b90506000612d7c612b62565b604954909150600090612d97906001600160a01b0316612e82565b90506000806000603a541180612daf57506000603c54115b15612dde57612dcf61271061236a6038548d61393b90919063ffffffff16565b9050612ddb8a826134be565b99505b612df4612ded85601286612f71565b839061392f565b9150670de0b6b3a7640000851015612e1257670de0b6b3a764000094505b6000612e2e8361236a88612e288960128a612f71565b9061393b565b90506000612e3c8c83613495565b9050612e4c8461236a888461393b565b84612e6d612e5b88601261421e565b612e6690600a614157565b8690613947565b9a509a509a5050505050505050509193909250565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612ebe57600080fd5b505afa158015612ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef69190613d8c565b60ff16905060048110158015612f0d575060128111155b612f6b5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b60648201526084016108d0565b92915050565b600081831115612fa157612f9a612f88838561421e565b612f9390600a614157565b859061393b565b9350612fcb565b81831015612fcb57612fc8612fb6848461421e565b612fc190600a614157565b8590613947565b93505b50825b9392505050565b600080612fe2858561393b565b9050612fee8184613947565b95945050505050565b612394846323b872dd60e01b85858560405160240161301893929190613df7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a37565b61147483838360405160240161306793929190613ef2565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052613b09565b60408051808201909152601981527842616c616e6365725661756c743a207377617070696e67203160381b60208201526051546000916130de916001600160a01b03166139af565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b815230600482015261318f919089906001600160a01b038216906370a082319060240160206040518083038186803b15801561315257600080fd5b505afa158015613166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318a9190613d51565b6134ca565b6051546040516370a0823160e01b81523060048201526001600160a01b038981169263095ea7b39291169083906370a082319060240160206040518083038186803b1580156131dd57600080fd5b505afa1580156131f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132159190613d51565b6040518363ffffffff1660e01b8152600401613232929190613e4f565b602060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132849190613d16565b506132d16040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b898152602081018960018111156132ea576132ea6142dc565b908160018111156132fd576132fd6142dc565b9052506001600160a01b03888116604083810191909152888216606080850191909152608080850188905282519081018352600060208201819052918101919091528883168152878316918101919091526051549091166352bbbe29838387613368426102586140e8565b6040518563ffffffff1660e01b8152600401613387949392919061400a565b602060405180830381600087803b1580156133a157600080fd5b505af11580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d99190613d51565b9b9a5050505050505050505050565b61147682826040516024016133fe929190613f53565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052613b09565b612394848484846040516024016134479493929190613f75565b60408051601f198184030181529190526020810180516001600160e01b031663bb7235e960e01b179052613b09565b6114748363a9059cbb60e01b8484604051602401613018929190613e4f565b6000806134aa84670de0b6b3a764000061393b565b90506134b68184613947565b949350505050565b6000612fce828461421e565b6114748383836040516024016134e293929190613f25565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052613b09565b6000811161356c5760405162461bcd60e51b815260206004820152602260248201527f416d6f756e742073686f756c642062652067726561746572207468616e207a65604482015261726f60f01b60648201526084016108d0565b61359f604051806040016040528060118152602001702234b9ba3934b13aba34b733903332b29d60791b815250826133e8565b60006135b961271061236a603a54600a612f9391906141ff565b90506135ea6040518060400160405280600b81526020016a3630b139a332b2a138399d60a91b815250603a546133e8565b61361e6040518060400160405280601281526020017129b2b73234b733903630b139903332b2b99d60711b815250826133e8565b600061363f61271061236a603c54600a61363891906141ff565b869061393b565b90506136706040518060400160405280600b81526020016a3a32b0b6a332b2a138399d60a91b815250603c546133e8565b6136a46040518060400160405280601281526020017129b2b73234b733903a32b0b6903332b2b99d60711b815250826133e8565b60495460395460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926136da929116908690600401613e4f565b602060405180830381600087803b1580156136f457600080fd5b505af1158015613708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372c9190613d16565b50604954603b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92613763929116908590600401613e4f565b602060405180830381600087803b15801561377d57600080fd5b505af1158015613791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123949190613d16565b6000805b6034548110156138d6576000603482815481106137d8576137d86142f2565b6000918252602082200154603480546001600160a01b0390921693506138229185908110613808576138086142f2565b6000918252602090912001546001600160a01b0316612e82565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561386757600080fd5b505afa15801561387b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389f9190613d51565b905080156138c0576138bd6138b682601285612f71565b869061392f565b94505b50505080806138ce90614261565b9150506137b9565b5090565b6000805b6036548110156138d65761391b612ded60368381548110613901576139016142f2565b6000918252602090912001546001600160a01b0316613b2a565b91508061392781614261565b9150506138de565b6000612fce82846140e8565b6000612fce82846141ff565b6000612fce8284614100565b61147483838360405160240161396b93929190613e1b565b60408051601f198184030181529190526020810180516001600160e01b0316630e6d794560e11b179052613b09565b6000612fce8383670de0b6b3a7640000612fd5565b61147682826040516024016139c5929190613ec8565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052613b09565b6117c981604051602401613a089190613eb5565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613b09565b6000613a8c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ba19092919063ffffffff16565b8051909150156114745780806020019051810190613aaa9190613d16565b6114745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d0565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080829050806001600160a01b031663c71daccb6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6957600080fd5b505afa158015613b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fce9190613d51565b60606134b6848460008585843b613bfa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d0565b600080866001600160a01b03168587604051613c169190613ddb565b60006040518083038185875af1925050503d8060008114613c53576040519150601f19603f3d011682016040523d82523d6000602084013e613c58565b606091505b5091509150613c68828286613c73565b979650505050505050565b60608315613c82575081612fce565b825115613c925782518084602001fd5b8160405162461bcd60e51b81526004016108d09190613eb5565b80356001600160a01b0381168114613cc357600080fd5b919050565b600060208284031215613cda57600080fd5b612fce82613cac565b600080600060608486031215613cf857600080fd5b613d0184613cac565b95602085013595506040909401359392505050565b600060208284031215613d2857600080fd5b81518015158114612fce57600080fd5b600060208284031215613d4a57600080fd5b5035919050565b600060208284031215613d6357600080fd5b5051919050565b60008060408385031215613d7d57600080fd5b50508035926020909101359150565b600060208284031215613d9e57600080fd5b815160ff81168114612fce57600080fd5b60008151808452613dc7816020860160208601614235565b601f01601f19169290920160200192915050565b60008251613ded818460208701614235565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0384168152606060208201819052600090613e3f90830185613daf565b9050826040830152949350505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015613ea95783516001600160a01b031683529284019291840191600101613e84565b50909695505050505050565b602081526000612fce6020830184613daf565b604081526000613edb6040830185613daf565b905060018060a01b03831660208301529392505050565b606081526000613f056060830186613daf565b6001600160a01b0394851660208401529290931660409091015292915050565b606081526000613f386060830186613daf565b6001600160a01b039490941660208301525060400152919050565b604081526000613f666040830185613daf565b90508260208301529392505050565b608081526000613f886080830187613daf565b8560208401528281036040840152613fa08186613daf565b91505060018060a01b038316606083015295945050505050565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60e08152845160e0820152600060208601516002811061403a57634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b0316610120830152606086015161406f6101408401826001600160a01b03169052565b50608086015161016083015260a086015160c06101808401526140966101a0840182613daf565b9150506140d6602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b600082198211156140fb576140fb6142b0565b500190565b60008261410f5761410f6142c6565b500490565b600181815b8085111561414f578160001904821115614135576141356142b0565b8085161561414257918102915b93841c9390800290614119565b509250929050565b6000612fce838360008261416d57506001612f6b565b8161417a57506000612f6b565b8160018114614190576002811461419a576141b6565b6001915050612f6b565b60ff8411156141ab576141ab6142b0565b50506001821b612f6b565b5060208310610133831016604e8410600b84101617156141d9575081810a612f6b565b6141e38383614114565b80600019048211156141f7576141f76142b0565b029392505050565b6000816000190483118215151615614219576142196142b0565b500290565b600082821015614230576142306142b0565b500390565b60005b83811015614250578181015183820152602001614238565b838111156123945750506000910152565b6000600019821415614275576142756142b0565b5060010190565b600060ff821660ff811415614293576142936142b0565b60010192915050565b6000826142ab576142ab6142c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe5661756c74436f7265202d2052656465656d202d2057697468647261772066726f6d2073747261746567793a2048a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73717569636b416c6c6f63617465202d20207072696d617279537461626c6542616c616e63653a205374696c6c207661756c742076616c75652067726561746572207468616e20737570706c792c206368616e67696e6720737570706c79206f66204341534820666f72207661756c7456616c756520a26469706673582212204fd3bc3ec983ec8ccf72066cdd9c71b2d48a5d7b6c67907e24decf2d63fca30a64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocate()": {
        "details": "Allocate unallocated funds on Vault to strategies.*"
      },
      "checkBalance()": {
        "returns": {
          "_0": "uint256 Balance of asset in decimals of asset"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "getAllAssets()": {
        "details": "Return all asset addresses in order"
      },
      "getAllStrategies()": {
        "details": "Return the array of all strategies"
      },
      "getAssetCount()": {
        "details": "Return the number of assets supported by the Vault."
      },
      "getStrategyCount()": {
        "details": "Return the number of strategies active on the Vault."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "mint(address,uint256,uint256)": {
        "details": "Deposit a supported asset and mint CASH.",
        "params": {
          "_amount": "Amount of the asset being deposited",
          "_asset": "Address of the asset being deposited",
          "_minimumCASHAmount": "Minimum CASH to mint"
        }
      },
      "quickAllocate()": {
        "details": "Allocate unallocated funds on Vault to quick deposit strategies.*"
      },
      "rebase()": {
        "details": "Calculate the total value of assets held by the Vault and all      strategies and update the supply of CASH."
      },
      "redeem(uint256,uint256)": {
        "details": "Withdraw a supported asset and burn CASH.",
        "params": {
          "_amount": "Amount of CASH to burn",
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "redeemAll(uint256)": {
        "params": {
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "setAdminImpl(address)": {
        "details": "set the implementation for the admin, this needs to be in a base class else we cannot set it",
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "totalValue()": {
        "details": "Determine the total value of assets held by the vault and its         strategies.",
        "returns": {
          "value": "Total value in USD (1e18)"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocate()": {
        "notice": "Allocate unallocated funds on Vault to strategies."
      },
      "calculateRedeemOutput(uint256)": {
        "notice": "Calculate the output for a redeem function"
      },
      "checkBalance()": {
        "notice": "Get the balance of an asset held in Vault and all strategies."
      },
      "quickAllocate()": {
        "notice": "Allocate unallocated funds on Vault to quick deposit strategies."
      },
      "redeemAll(uint256)": {
        "notice": "Withdraw a supported asset and burn all CASH."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29936,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29939,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29979,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 35717,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)35712_storage)"
      },
      {
        "astId": 35720,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 35730,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)35725_storage)"
      },
      {
        "astId": 35733,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 35735,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 35738,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 35741,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 35743,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 35745,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "labsAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 35747,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "labsFeeBps",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 35749,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "teamAddress",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 35751,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "teamFeeBps",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 35753,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 35755,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 35757,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 35760,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "cash",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(CASH)29225"
      },
      {
        "astId": 35769,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "65",
        "type": "t_address"
      },
      {
        "astId": 35775,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "_deprecated_uniswapAddr",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 35781,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "67",
        "type": "t_address"
      },
      {
        "astId": 35785,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 35787,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 35789,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "70",
        "type": "t_address"
      },
      {
        "astId": 35791,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 35794,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "_deprecated_swapTokens",
        "offset": 0,
        "slot": "72",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 35799,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "primaryStableAddress",
        "offset": 0,
        "slot": "73",
        "type": "t_address"
      },
      {
        "astId": 35802,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "quickDepositStrategies",
        "offset": 0,
        "slot": "74",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 35804,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "balancerVault",
        "offset": 0,
        "slot": "75",
        "type": "t_address"
      },
      {
        "astId": 35806,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "balancerPoolId",
        "offset": 0,
        "slot": "76",
        "type": "t_bytes32"
      },
      {
        "astId": 35808,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "77",
        "type": "t_address"
      },
      {
        "astId": 35810,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "dripperAddress",
        "offset": 0,
        "slot": "78",
        "type": "t_address"
      },
      {
        "astId": 35827,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "strategyWithWeightPositions",
        "offset": 0,
        "slot": "79",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35831,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "strategyWithWeights",
        "offset": 0,
        "slot": "80",
        "type": "t_array(t_struct(StrategyWithWeight)35823_storage)dyn_storage"
      },
      {
        "astId": 6121,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "balancerVault",
        "offset": 0,
        "slot": "81",
        "type": "t_contract(IVault)11696"
      },
      {
        "astId": 7164,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "__gap",
        "offset": 0,
        "slot": "82",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StrategyWithWeight)35823_storage)dyn_storage": {
        "base": "t_struct(StrategyWithWeight)35823_storage",
        "encoding": "dynamic_array",
        "label": "struct VaultStorage.StrategyWithWeight[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CASH)29225": {
        "encoding": "inplace",
        "label": "contract CASH",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)11696": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Asset)35712_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)35712_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)35725_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)35725_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Asset)35712_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 35711,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)35725_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 35722,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 35724,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyWithWeight)35823_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.StrategyWithWeight",
        "members": [
          {
            "astId": 35812,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 35814,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "minWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35816,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "targetWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 35818,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "maxWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 35820,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "enabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 35822,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "enabledReward",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}