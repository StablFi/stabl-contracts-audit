{
  "address": "0x8c89cfC1eF24747BADAB156C1950f8680aF7F181",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "TransferLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_primaryStable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStable",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickDragon",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickSwapPair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickSwapPairStaker",
      "outputs": [
        {
          "internalType": "contract IStakingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickTokenNew",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        }
      ],
      "name": "setBalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf549876d53d88b48e4076aacca6132fd036b669799eb8edba7eee1308491291e",
  "receipt": {
    "to": null,
    "from": "0x442bB41E499bB21aFc6a42327C9E257a7d09872e",
    "contractAddress": "0x8c89cfC1eF24747BADAB156C1950f8680aF7F181",
    "transactionIndex": 39,
    "gasUsed": "4755557",
    "logsBloom": "0x
    "blockHash": "0x2d1ff52ab5cf33bd49028fe81f04540e1b6458bbbce3efe9d6af5c31a19fd71e",
    "transactionHash": "0xf549876d53d88b48e4076aacca6132fd036b669799eb8edba7eee1308491291e",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 32267884,
        "transactionHash": "0xf549876d53d88b48e4076aacca6132fd036b669799eb8edba7eee1308491291e",
        "address": "0x8c89cfC1eF24747BADAB156C1950f8680aF7F181",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e"
        ],
        "data": "0x",
        "logIndex": 159,
        "blockHash": "0x2d1ff52ab5cf33bd49028fe81f04540e1b6458bbbce3efe9d6af5c31a19fd71e"
      },
      {
        "transactionIndex": 39,
        "blockNumber": 32267884,
        "transactionHash": "0xf549876d53d88b48e4076aacca6132fd036b669799eb8edba7eee1308491291e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000442bb41e499bb21afc6a42327c9e257a7d09872e",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002a3b5c8a9ca687900000000000000000000000000000000000000000000000068c53ccdd72497a300000000000000000000000000000000000000000000007d778158d08e9cdeed000000000000000000000000000000000000000000000000662187052d5a2f2a00000000000000000000000000000000000000000000007d7a250e9938674766",
        "logIndex": 160,
        "blockHash": "0x2d1ff52ab5cf33bd49028fe81f04540e1b6458bbbce3efe9d6af5c31a19fd71e"
      }
    ],
    "blockNumber": 32267884,
    "cumulativeGasUsed": "9892162",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5c59d1940f5b316b29c3b177eb2fc83f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"TransferLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_primaryStable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStable\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickDragon\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickSwapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickSwapPairStaker\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickTokenNew\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"}],\"name\":\"setBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance()\":{\"details\":\"Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.\",\"returns\":{\"_0\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit an amount of asset into the platform\",\"params\":{\"_amount\":\"Units of asset to deposit\",\"_asset\":\"Address for the asset\"}},\"depositAll()\":{\"details\":\"Deposit balance of all supported assets into the platform\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdrawAll()\":{\"details\":\"Withdraw all assets from strategy sending assets to Vault.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address,address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as QuickSwap strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/QuickSwapStrategy.sol\":\"QuickSwapStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/connectors/quickswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    // Views\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    // Mutative\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function exit() external;\\r\\n}\",\"keccak256\":\"0xe6a430237e7773acf25672c205df1a1b0a3dc750f67bfc1b06dd5092134d5dfd\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x5046381702b4601ffc562ffbbe0d55cc982ddc32028b3ba2ae023b69fa2aca50\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\n/**\\n * IUniswapV2Router01.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\n */\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n\\n}\\n\",\"keccak256\":\"0x8635dc634259e971de8edde1ac635dd2338e5223370c9a6e22ed58527cdbab07\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\n/**\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\n */\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\n\\n}\\n\",\"keccak256\":\"0x5ca1e640d0522c5fdcb8814e1c7972435a71e589703741f7ffdaf2116fcb6cb3\",\"license\":\"GNU-3\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IGeneralPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IPoolSwapStructs.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract BalancerExchange {\\r\\n\\r\\n    int256 public constant MAX_VALUE = 10 ** 27;\\r\\n\\r\\n    IVault private balancerVault;\\r\\n\\r\\n    function setBalancerVault(address _balancerVault) internal {\\r\\n        balancerVault = IVault(_balancerVault);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 limit\\r\\n    ) internal returns (uint256) {\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(balancerVault));\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        console.log(\\\"BalancerVault: swapping 2\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        bytes32 poolId1,\\r\\n        bytes32 poolId2,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenMid,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap1;\\r\\n        batchSwap1.poolId = poolId1;\\r\\n        batchSwap1.assetInIndex = 0;\\r\\n        batchSwap1.assetOutIndex = 1;\\r\\n        batchSwap1.amount = amount;\\r\\n        swaps[0] = batchSwap1;\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap2;\\r\\n        batchSwap2.poolId = poolId2;\\r\\n        batchSwap2.assetInIndex = 1;\\r\\n        batchSwap2.assetOutIndex = 2;\\r\\n        batchSwap2.amount = 0;\\r\\n        swaps[1] = batchSwap2;\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = tokenIn;\\r\\n        assets[1] = tokenMid;\\r\\n        assets[2] = tokenOut;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = recipient;\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\r\\n            limits[0] = MAX_VALUE;\\r\\n            limits[1] = MAX_VALUE;\\r\\n            limits[2] = MAX_VALUE;\\r\\n        } else {\\r\\n            limits[0] = 0;\\r\\n            limits[1] = 0;\\r\\n            limits[2] = 0;\\r\\n        }\\r\\n\\r\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\r\\n    }\\r\\n\\r\\n    function onSwap(\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 balance\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = balance;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock) = balancerVault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountToSwap(\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        console.log(\\\"amount0ToSwap\\\", amount0ToSwap);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            console.log(\\\"onSwap\\\", address(token0), address(token1));\\r\\n            uint256 amount1 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\r\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\r\\n        }\\r\\n\\r\\n        return amount0ToSwap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountLpTokensToWithdraw(\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < 1; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = onSwap(poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\r\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n        return lpBalance;\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0x4a022c4fcad6949070d21553876d5de39862570505461f6abd90587208ee3599\",\"license\":\"MIT\"},\"contracts/exchanges/UniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/OvnMath.sol\\\";\\nabstract contract UniswapV2Exchange {\\n\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 4;\\n\\n    IUniswapV2Router02 private uniswapRouter;\\n\\n    function _setUniswapRouter(address _uniswapRouter) internal {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n    }\\n\\n    function _swapExactTokensForTokens(\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(uniswapRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountsOut(inputToken, outputToken, amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n\\n        uint[] memory amounts = uniswapRouter.swapExactTokensForTokens(\\n            amountInput,\\n            OvnMath.subBasisPoints(amountOutMin, BASIS_POINTS_FOR_SLIPPAGE),\\n            path,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function _getAmountsOut(\\n        address inputToken,\\n        address outputToken,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = inputToken;\\n        path[1] = outputToken;\\n        uint[] memory amounts = uniswapRouter.getAmountsOut(amountInput, path);\\n        return amounts[1];\\n    }\\n\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(uniswapRouter), amountADesired);\\n        IERC20(tokenB).approve(address(uniswapRouter), amountBDesired);\\n\\n        return uniswapRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    function _removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(uniswapRouter), liquidity);\\n\\n        return uniswapRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3d0cde2a23dd363890bda17f17ed6f0fe8154827735681c5fce7312a758ea780\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x5ea8a858a99674f94a7ee4a75ede7a29074228f754ec15043e8e9389c192d8b3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4b2d22bff80c423dcd8b10442e1ee1782100321f6bd3c00649e38d8b1f40c91b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev IPools with the General specialization setting should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\n * grant to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IGeneralPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x5a4963a182807f12235071151cb535109a8f3066ba1af6fef80c0c829ddd7722\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0614fa16712fbf61015568ad06ede003075147da1dd773d78bbf52e1925b7b59\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xe1424191e0efbf544f52f2510ec3b1ae451f4af9345dae9b25a370a7c496c219\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n    external\\n    view\\n    returns (\\n        uint256 cash,\\n        uint256 managed,\\n        uint256 lastChangeBlock,\\n        address assetManager\\n    );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n        IERC20[] memory tokens,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock\\n    );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00522f13583cc1876568fd1c57c8afbce4baf1fe89dcea4a9b60a8a988f4df25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/QuickSwapStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title QuickSwap Strategy\\r\\n * @notice Investment strategy for investing stablecoins via QuickSwap Strategy\\r\\n */\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\"  ;\\r\\n\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport \\\"../exchanges/UniswapV2Exchange.sol\\\";\\r\\nimport \\\"../exchanges/BalancerExchange.sol\\\";\\r\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../connectors/quickswap/IStakingRewards.sol\\\";\\r\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\ncontract QuickSwapStrategy is InitializableAbstractStrategy, UniswapV2Exchange, BalancerExchange   {\\r\\n    using StableMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    IERC20 public token0;\\r\\n    IERC20 public token1;\\r\\n    IERC20 public primaryStable;\\r\\n    IERC20 public quickTokenNew;\\r\\n    IERC20 public quickDragon;\\r\\n\\r\\n    IUniswapV2Pair public quickSwapPair;\\r\\n    bytes32 public poolId;\\r\\n\\r\\n    mapping(address => uint256 ) public assetToDenominator;\\r\\n    IStakingRewards public quickSwapPairStaker;\\r\\n    /**\\r\\n     * Initializer for setting up strategy internal state. This overrides the\\r\\n     * InitializableAbstractStrategy initializer as QuickSwap strategies don't fit\\r\\n     * well within that abstraction.\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress, // QuickToken address\\r\\n        address _vaultAddress,    // VaultProxy address\\r\\n        address[] calldata _rewardTokenAddresses, // USDC - as in end USDC will be sent to Harvester\\r\\n        address[] calldata _assets, // USDC + DAI\\r\\n        address[] calldata _pTokens, //  quickSwapUSDCDAIPair\\r\\n        address _primaryStable, // USDC address\\r\\n        address _router, // quickSwapRouter02\\r\\n        address _staker, // quickSwapStakingReward\\r\\n        address _rewardToken // quickSwapDragonQuick\\r\\n    ) external onlyGovernor initializer {\\r\\n        require(_rewardTokenAddresses[0] != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_pTokens[0] != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_platformAddress != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_router != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_staker != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_rewardToken != address(0), \\\"Zero address not allowed\\\");\\r\\n       \\r\\n\\r\\n        token0 = IERC20(_assets[0]);\\r\\n        token1 = IERC20(_assets[1]);\\r\\n        primaryStable = IERC20(_primaryStable);\\r\\n        quickTokenNew = IERC20(_platformAddress);\\r\\n        quickDragon = IERC20(_rewardToken);\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assetToDenominator[_assets[i]] = 10 ** IERC20Metadata(_assets[i]).decimals();\\r\\n        }\\r\\n        quickSwapPair = IUniswapV2Pair(_pTokens[0]);\\r\\n        quickSwapPairStaker = IStakingRewards(_staker);\\r\\n        _setUniswapRouter(_router);\\r\\n\\r\\n        super._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n        _abstractSetPToken(_assets[0],_pTokens[0]);\\r\\n        _abstractSetPToken(_assets[1],_pTokens[1]);\\r\\n    }\\r\\n    function setBalancer(address _balancerVault, bytes32 _balancerPoolId) external onlyGovernor {\\r\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_balancerPoolId != \\\"\\\", \\\"Empty pool id not allowed\\\");\\r\\n\\r\\n        setBalancerVault(_balancerVault);\\r\\n        poolId = _balancerPoolId;\\r\\n    }\\r\\n    function getReserves() internal view returns (uint256,uint256) {\\r\\n        ( uint256 reserve0, uint256  reserve1,) = quickSwapPair.getReserves();\\r\\n        require(reserve0 > (10 ** (IERC20Metadata(address(token0) ).decimals() - 3))  && reserve1 > (10 ** (IERC20Metadata(address(token1) ).decimals() - 3)), \\\"Reserves too low\\\");\\r\\n        return (reserve0, reserve1) ;\\r\\n\\r\\n    }\\r\\n    function _deposit(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    )  internal {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        (uint256 reserve0, uint256 reserve1) = getReserves();\\r\\n\\r\\n        _swapPrimaryStableToToken0();\\r\\n\\r\\n        // count amount token1 to swap\\r\\n        uint256 token1Balance = token1.balanceOf(address(this));\\r\\n        uint256 amount0From1;\\r\\n        if (token1Balance > 0) {\\r\\n            amount0From1 = onSwap(\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                token1,\\r\\n                token0,\\r\\n                token1Balance\\r\\n            );\\r\\n        }\\r\\n        uint256 token0Balance = token0.balanceOf(address(this));\\r\\n        //TODO add parameter to _getAmountToSwap() second token amount\\r\\n        uint256 amount0ToSwap = _getAmountToSwap(\\r\\n            token0Balance - (amount0From1 / 2),\\r\\n            reserve0,\\r\\n            reserve1,\\r\\n            assetToDenominator[address(token0)],\\r\\n            assetToDenominator[address(token1)],\\r\\n            1,\\r\\n            poolId,\\r\\n            token0,\\r\\n            token1\\r\\n        );\\r\\n\\r\\n        // swap token0 to other token\\r\\n        swap(\\r\\n            poolId,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            IAsset(address(token0)),\\r\\n            IAsset(address(token1)),\\r\\n            address(this),\\r\\n            address(this),\\r\\n            amount0ToSwap,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // add liquidity\\r\\n        token0Balance = token0.balanceOf(address(this));\\r\\n        token1Balance = token1.balanceOf(address(this));\\r\\n        _addLiquidity(\\r\\n            address(token0),\\r\\n            address(token1),\\r\\n            token0Balance,\\r\\n            token1Balance,\\r\\n            OvnMath.subBasisPoints(token0Balance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            OvnMath.subBasisPoints(token1Balance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            address(this)\\r\\n        );\\r\\n        // console.log(\\\"LP: \\\", quickSwapPair.balanceOf(address(this)) );\\r\\n        stakeLPForDragon();\\r\\n    }\\r\\n    function deposit(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    )   external\\r\\n        override\\r\\n        onlyVault\\r\\n        nonReentrant {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        _deposit(_asset, _amount);\\r\\n    }\\r\\n    function depositAll() external override onlyVault nonReentrant {\\r\\n        _deposit(address(primaryStable), primaryStable.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _beneficiary,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyVault nonReentrant  {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        (uint256 reserve0, uint256 reserve1,) = quickSwapPair.getReserves();\\r\\n        uint256 lpTokenBalance = quickSwapPairStaker.balanceOf(address(this)); //quickSwapPair.balanceOf(address(this));\\r\\n        // console.log(\\\"lpTokenBalance: \\\", lpTokenBalance);\\r\\n\\r\\n        if (lpTokenBalance > 0) {\\r\\n            // count amount to unstake\\r\\n            uint256 totalLpBalance = quickSwapPair.totalSupply();\\r\\n            uint256 lpTokensToWithdraw = _getAmountLpTokensToWithdraw(\\r\\n                OvnMath.addBasisPoints(_amount, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                reserve0,\\r\\n                reserve1,\\r\\n                totalLpBalance,\\r\\n                assetToDenominator[address(token0)],\\r\\n                assetToDenominator[address(token1)],\\r\\n                poolId,\\r\\n                token0,\\r\\n                token1\\r\\n            );\\r\\n            if (lpTokensToWithdraw > lpTokenBalance) {\\r\\n                lpTokensToWithdraw = lpTokenBalance;\\r\\n            }\\r\\n            uint256 amountOut0Min = reserve0 * lpTokensToWithdraw / totalLpBalance;\\r\\n            uint256 amountOut1Min = reserve1 * lpTokensToWithdraw / totalLpBalance;\\r\\n            // console.log(\\\"lpTokensToWithdraw: \\\", lpTokensToWithdraw);\\r\\n            unstakeDragonForLP(lpTokensToWithdraw);\\r\\n            // remove liquidity\\r\\n            _removeLiquidity(\\r\\n                address(token0),\\r\\n                address(token1),\\r\\n                address(quickSwapPair),\\r\\n                lpTokensToWithdraw,\\r\\n                OvnMath.subBasisPoints(amountOut0Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                OvnMath.subBasisPoints(amountOut1Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n        _swapAssetsToPrimaryStable();\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Withdraw USDC: \\\", primaryStableBalance);\\r\\n        primaryStable.safeTransfer(_beneficiary, primaryStableBalance);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant  {\\r\\n        (uint256 reserve0, uint256 reserve1,) = quickSwapPair.getReserves();\\r\\n\\r\\n        unstakeDragonForLP();\\r\\n        uint256 lpTokenBalance = quickSwapPair.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = quickSwapPair.totalSupply();\\r\\n            uint256 amountOut0Min = reserve0 * lpTokenBalance / totalLpBalance;\\r\\n            uint256 amountOut1Min = reserve1 * lpTokenBalance / totalLpBalance;\\r\\n            // remove liquidity\\r\\n            _removeLiquidity(\\r\\n                address(token0),\\r\\n                address(token1),\\r\\n                address(quickSwapPair),\\r\\n                lpTokenBalance,\\r\\n                OvnMath.subBasisPoints(amountOut0Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                OvnMath.subBasisPoints(amountOut1Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n        _swapAssetsToPrimaryStable();\\r\\n\\r\\n        lpTokenBalance = quickSwapPair.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            stakeLPForDragon();\\r\\n        }\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Withdraw Primary Stable: \\\", primaryStableBalance);\\r\\n        primaryStable.safeTransfer(vaultAddress, primaryStableBalance);\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        uint256 token0Balance = token0.balanceOf(address(this));\\r\\n        uint256 token1Balance = token1.balanceOf(address(this));\\r\\n\\r\\n        uint256 lpTokenBalance = quickSwapPairStaker.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = quickSwapPair.totalSupply();\\r\\n            (uint256 reserve0, uint256 reserve1,) = quickSwapPair.getReserves();\\r\\n            token0Balance += reserve0 * lpTokenBalance / totalLpBalance;\\r\\n            token1Balance += reserve1 * lpTokenBalance / totalLpBalance;\\r\\n        }\\r\\n\\r\\n        uint256 primaryStableBalanceFromToken0;\\r\\n        if ( (address(token0) != address(primaryStable))  ) {\\r\\n            if (token0Balance > 0) {\\r\\n                primaryStableBalanceFromToken0 = onSwap(\\r\\n                    poolId,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    token0,\\r\\n                    primaryStable,\\r\\n                    token0Balance\\r\\n                );\\r\\n                // console.log(\\\"Token0 swap -  primaryStableBalanceFromToken0 \\\", primaryStableBalanceFromToken0);\\r\\n            }\\r\\n        } else {\\r\\n            primaryStableBalanceFromToken0 += token0Balance;\\r\\n        }\\r\\n\\r\\n        uint256 primaryStableBalanceFromToken1;\\r\\n        if ( (address(token1) != address(primaryStable))  ) {\\r\\n            if (token1Balance > 0) {\\r\\n                primaryStableBalanceFromToken1 = onSwap(\\r\\n                    poolId,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    token1,\\r\\n                    primaryStable,\\r\\n                    token1Balance\\r\\n                );\\r\\n                // console.log(\\\"Token1 swap -  primaryStableBalanceFromToken1 \\\", primaryStableBalanceFromToken1);\\r\\n            }\\r\\n        } else {\\r\\n            primaryStableBalanceFromToken1 += token1Balance;\\r\\n        }\\r\\n        // console.log(\\\"primaryStableBalanceFromToken0: \\\", primaryStableBalanceFromToken0);\\r\\n        // console.log(\\\"primaryStableBalanceFromToken1: \\\", primaryStableBalanceFromToken1);\\r\\n        return primaryStableBalanceFromToken0 + primaryStableBalanceFromToken1;\\r\\n    }\\r\\n    function stakeLPForDragon() internal {\\r\\n        uint256 lpTokenBalance = quickSwapPair.balanceOf(address(this));\\r\\n        // console.log(\\\"Staking lpTokenBalance\\\", lpTokenBalance);\\r\\n        IUniswapV2Pair(quickSwapPair).approve(address(quickSwapPairStaker), lpTokenBalance);\\r\\n        quickSwapPairStaker.stake(lpTokenBalance);\\r\\n        // console.log(\\\"LP Balance staked: \\\", quickSwapPairStaker.balanceOf(address(this)));\\r\\n    }\\r\\n    function unstakeDragonForLP(uint256 _amount)  internal{\\r\\n        quickSwapPairStaker.withdraw(_amount);\\r\\n    }\\r\\n    function unstakeDragonForLP()  internal {\\r\\n        quickSwapPairStaker.exit();\\r\\n    }\\r\\n    function _collectRewards() internal {\\r\\n        // claim rewards\\r\\n        quickSwapPairStaker.getReward();\\r\\n        // sell rewards\\r\\n        uint256 totalRewards = 0;\\r\\n        uint256 quickDragonBalance = quickDragon.balanceOf(address(this));\\r\\n        if (quickDragonBalance > 0) {\\r\\n            uint256 quickReward = _swapExactTokensForTokens(\\r\\n                address(quickDragon),\\r\\n                address(primaryStable),\\r\\n                quickDragonBalance,\\r\\n                address(this)\\r\\n            );\\r\\n            totalRewards += quickReward;\\r\\n        }\\r\\n        uint256 balance = primaryStable.balanceOf(address(this));\\r\\n        if (balance > 0) {\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                address(primaryStable),\\r\\n                balance\\r\\n            );\\r\\n            primaryStable.transfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n    function collectRewardTokens()\\r\\n        external\\r\\n        override\\r\\n        onlyHarvester\\r\\n        nonReentrant\\r\\n    {\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function _swapAssetsToPrimaryStable() internal {\\r\\n        if ( (address(token0) != address(primaryStable)) && (token0.balanceOf(address(this)) > 0) )  {\\r\\n            // console.log(\\\"Swapping token0\\\");\\r\\n            swap(\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(token0)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                token0.balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        if ( (address(token1) != address(primaryStable)) && (token1.balanceOf(address(this)) > 0) )  {\\r\\n            // console.log(\\\"Swapping token1\\\");\\r\\n            swap(\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(token1)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                token1.balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    function _swapPrimaryStableToToken0() internal {\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        if (address(primaryStable) != address(token0)) {\\r\\n            swap(\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(primaryStable)),\\r\\n                IAsset(address(token0)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                primaryStableBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n     /**\\r\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\r\\n     * @param _asset Address of the asset\\r\\n     */\\r\\n    function supportsAsset(address _asset)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _asset == address(primaryStable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the spending of all assets by their corresponding cToken,\\r\\n     *      if for some reason is it necessary.\\r\\n     */\\r\\n    function safeApproveAllTokens() external override {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal method to respond to the addition of new asset / cTokens\\r\\n     *      We need to approve the cToken and give it permission to spend the asset\\r\\n     * @param _asset Address of the asset to approve\\r\\n     * @param _cToken The cToken for the approval\\r\\n     */\\r\\n    function _abstractSetPToken(address _asset, address _cToken)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n    }\\r\\n   \\r\\n}\\r\\n\",\"keccak256\":\"0x939207f135e8e07fa4832f03bc7020ca96f968f9315eadd0c451ef376c259752\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event PTokenAdded(address indexed _asset, address _pToken);\\r\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\r\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event RewardTokenCollected(\\r\\n        address recipient,\\r\\n        address rewardToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event RewardTokenAddressesUpdated(\\r\\n        address[] _oldAddresses,\\r\\n        address[] _newAddresses\\r\\n    );\\r\\n    event HarvesterAddressesUpdated(\\r\\n        address _oldHarvesterAddress,\\r\\n        address _newHarvesterAddress\\r\\n    );\\r\\n    event TransferLog (\\r\\n        string _message,\\r\\n        address _asset,\\r\\n        uint256 _number\\r\\n    );\\r\\n\\r\\n    // Core address for the given platform\\r\\n    address public platformAddress;\\r\\n\\r\\n    address public vaultAddress;\\r\\n\\r\\n    // asset => pToken (Platform Specific Token Address)\\r\\n    mapping(address => address) public assetToPToken;\\r\\n\\r\\n    // Full list of all assets supported here\\r\\n    address[] internal assetsMapped;\\r\\n\\r\\n    // Deprecated: Reward token address\\r\\n    // slither-disable-next-line constable-states\\r\\n    address public _deprecated_rewardTokenAddress;\\r\\n\\r\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\r\\n    // slither-disable-next-line constable-states\\r\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\r\\n\\r\\n    // Address of the one address allowed to collect reward tokens\\r\\n    address public harvesterAddress;\\r\\n\\r\\n    // Reward token addresses\\r\\n    address[] public rewardTokenAddresses;\\r\\n    // Reserved for future expansion\\r\\n    int256[98] private _reserved;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal initialize function, to set up initial internal state\\r\\n     * @param _platformAddress Generic platform address\\r\\n     * @param _vaultAddress Address of the Vault\\r\\n     * @param _rewardTokenAddresses Address of reward token for platform\\r\\n     * @param _assets Addresses of initial supported assets\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] calldata _assets,\\r\\n        address[] calldata _pTokens\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableAbstractStrategy._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] memory _assets,\\r\\n        address[] memory _pTokens\\r\\n    ) internal {\\r\\n        platformAddress = _platformAddress;\\r\\n        vaultAddress = _vaultAddress;\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Collect accumulated reward token and send to Vault.\\r\\n     */\\r\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\r\\n        _collectRewardTokens();\\r\\n    }\\r\\n\\r\\n    function _collectRewardTokens() internal {\\r\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\r\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\r\\n            uint256 balance = rewardToken.balanceOf(address(this));\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                rewardTokenAddresses[i],\\r\\n                balance\\r\\n            );\\r\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault.\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Harvester.\\r\\n     */\\r\\n    modifier onlyHarvester() {\\r\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault or Governor.\\r\\n     */\\r\\n    modifier onlyVaultOrGovernor() {\\r\\n        require(\\r\\n            msg.sender == vaultAddress || msg.sender == governor(),\\r\\n            \\\"Caller is not the Vault or Governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _rewardTokenAddresses Address array of the reward token\\r\\n     */\\r\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\r\\n            require(\\r\\n                _rewardTokenAddresses[i] != address(0),\\r\\n                \\\"Can not set an empty address as a reward token\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RewardTokenAddressesUpdated(\\r\\n            rewardTokenAddresses,\\r\\n            _rewardTokenAddresses\\r\\n        );\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the reward token addresses.\\r\\n     * @return address[] the reward token addresses.\\r\\n     */\\r\\n    function getRewardTokenAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function setPTokenAddress(address _asset, address _pToken)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setPTokenAddress(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a supported asset by passing its index.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _assetIndex Index of the asset to be removed\\r\\n     */\\r\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\r\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\r\\n        address asset = assetsMapped[_assetIndex];\\r\\n        address pToken = assetToPToken[asset];\\r\\n\\r\\n        if (_assetIndex < assetsMapped.length - 1) {\\r\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\r\\n        }\\r\\n        assetsMapped.pop();\\r\\n        assetToPToken[asset] = address(0);\\r\\n\\r\\n        emit PTokenRemoved(asset, pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      Add to internal mappings and execute the platform specific,\\r\\n     * abstract method `_abstractSetPToken`\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\r\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\r\\n        require(\\r\\n            _asset != address(0) && _pToken != address(0),\\r\\n            \\\"Invalid addresses\\\"\\r\\n        );\\r\\n\\r\\n        assetToPToken[_asset] = _pToken;\\r\\n        assetsMapped.push(_asset);\\r\\n\\r\\n        emit PTokenAdded(_asset, _pToken);\\r\\n\\r\\n        _abstractSetPToken(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      strategy contracts, i.e. mistaken sends.\\r\\n     * @param _asset Address for the asset\\r\\n     * @param _amount Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address _asset, uint256 _amount)\\r\\n        public\\r\\n        onlyGovernor\\r\\n    {\\r\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _harvesterAddress Address of the harvester\\r\\n     */\\r\\n    function setHarvesterAddress(address _harvesterAddress)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        harvesterAddress = _harvesterAddress;\\r\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                 Abstract\\r\\n    ****************************************/\\r\\n\\r\\n    function _abstractSetPToken(address _asset, address _pToken)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    function safeApproveAllTokens() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit an amount of asset into the platform\\r\\n     * @param _asset               Address for the asset\\r\\n     * @param _amount              Units of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit balance of all supported assets into the platform\\r\\n     */\\r\\n    function depositAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an amount of asset from the platform.\\r\\n     * @param _recipient         Address to which the asset should be sent\\r\\n     * @param _asset             Address of the asset\\r\\n     * @param _amount            Units of asset to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\r\\n     */\\r\\n    function withdrawAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total primary stable value held in the platform.\\r\\n     *      This includes any interest that was generated since depositing.\\r\\n     * @return balance    Total value of the asset in the platform\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an asset is supported.\\r\\n     * @param _asset    Address of the asset\\r\\n     * @return bool     Whether asset is supported\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x232664a78773fffce1d3f7cf05c43d7a08c81966ace4ce55fcfceaa2555589a5\",\"license\":\"agpl-3.0\"},\"contracts/utils/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x72976e446429837ea5cf2b52b6a9b8e0dbf2790e52b1c0d218103cb08daf2a2e\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80638eac22231161013b578063c7af3352116100b8578063dbe55e561161007c578063dbe55e56146104e2578063de5f6268146104f5578063f664b3d9146104fd578063f6ca71b014610505578063f817bc631461051a57600080fd5b8063c7af33521461048c578063d21220a714610494578063d2f24893146104a8578063d38bfff4146104bc578063d9caed12146104cf57600080fd5b8063a95329f4116100ff578063a95329f41461042a578063aa388af61461043e578063ad1728cb146102d0578063c2e1e3f414610471578063c71daccb1461048457600080fd5b80638eac2223146103cb5780639136616a146103de5780639688d2fc146103f157806396d538bb14610404578063997781d61461041757600080fd5b80632e655201116101c95780635bdd18d61161018d5780635bdd18d6146103815780635d36b1901461039557806367c7066c1461039d5780637b2d9b2c146103b0578063853828b6146103c357600080fd5b80632e655201146103365780633e0dc34e14610349578063430bf08a1461035357806347e7ef24146103665780635a063f631461037957600080fd5b80630ed57b3a116102105780630ed57b3a146102bd5780630fc3b4c4146102d25780631072cbea146102fb5780631380e1d61461030e5780632a4d90a41461032257600080fd5b8063063bde24146102425780630b7132cf146102685780630c340a24146102895780630dfe1681146102a9575b600080fd5b6102556b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b61025561027636600461468d565b6101086020526000908152604090205481565b610291610523565b6040516001600160a01b03909116815260200161025f565b61010154610291906001600160a01b031681565b6102d06102cb3660046146aa565b610540565b005b6102916102e036600461468d565b6035602052600090815260409020546001600160a01b031681565b6102d06103093660046148f2565b61057b565b61010554610291906001600160a01b031681565b61010954610291906001600160a01b031681565b603754610291906001600160a01b031681565b6102556101075481565b603454610291906001600160a01b031681565b6102d06103743660046148f2565b6105bb565b6102d061065c565b61010654610291906001600160a01b031681565b6102d06106fb565b603954610291906001600160a01b031681565b6102916103be366004614b0f565b6107a1565b6102d06107cb565b6102d06103d93660046147a2565b610bf5565b6102d06103ec366004614b0f565b61115c565b6102d06103ff3660046146e3565b611327565b6102d0610412366004614951565b611430565b6102d06104253660046148f2565b611556565b61010454610291906001600160a01b031681565b61046161044c36600461468d565b610103546001600160a01b0391821691161490565b604051901515815260200161025f565b6102d061047f36600461468d565b61160f565b61025561168e565b610461611ad1565b61010254610291906001600160a01b031681565b61010354610291906001600160a01b031681565b6102d06104ca36600461468d565b611b02565b6102d06104dd3660046148b1565b611ba6565b603354610291906001600160a01b031681565b6102d0611f51565b610255600481565b61050d612036565b60405161025f9190614d19565b61025560385481565b600061053b6000805160206154448339815191525490565b905090565b610548611ad1565b61056d5760405162461bcd60e51b815260040161056490614ebb565b60405180910390fd5b6105778282612098565b5050565b610583611ad1565b61059f5760405162461bcd60e51b815260040161056490614ebb565b6105776105aa610523565b6001600160a01b03841690836121f7565b6034546001600160a01b031633146105e55760405162461bcd60e51b815260040161056490614e84565b600080516020615424833981519152805460028114156106175760405162461bcd60e51b815260040161056490614f6e565b60028255610103546001600160a01b038581169116146106495760405162461bcd60e51b815260040161056490614f40565b6106538484612249565b50600190555050565b6039546001600160a01b031633146106b65760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610564565b600080516020615424833981519152805460028114156106e85760405162461bcd60e51b815260040161056490614f6e565b600282556106f461258e565b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b0316146107965760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610564565b61079f3361281a565b565b603a81815481106107b157600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b03163314806107fc57506107e7610523565b6001600160a01b0316336001600160a01b0316145b6108545760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610564565b600080516020615424833981519152805460028114156108865760405162461bcd60e51b815260040161056490614f6e565b6002825560008061010660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156108dc57600080fd5b505afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109149190614abf565b506001600160701b031691506001600160701b031691506109336128de565b610106546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561097857600080fd5b505afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190614b28565b90508015610aaf5761010654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156109fe57600080fd5b505afa158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a369190614b28565b9050600081610a4584876152e0565b610a4f91906151d0565b9050600082610a5e85876152e0565b610a6891906151d0565b610101546101025461010654929350610aa9926001600160a01b0392831692918216911687610a98876004612943565b610aa3876004612943565b3061296f565b50505050505b610ab7612ad3565b610106546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b339190614b28565b90508015610b4357610b43612d02565b610103546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b8857600080fd5b505afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc09190614b28565b60345461010354919250610be1916001600160a01b039081169116836121f7565b610be961258e565b50505050600182555050565b610bfd611ad1565b610c195760405162461bcd60e51b815260040161056490614ebb565b600054610100900460ff1680610c32575060005460ff16155b610c4e5760405162461bcd60e51b815260040161056490614ef2565b600054610100900460ff16158015610c70576000805461ffff19166101011790555b60008b8b8281610c8257610c826153e2565b9050602002016020810190610c97919061468d565b6001600160a01b03161415610cbe5760405162461bcd60e51b815260040161056490614f96565b600087878281610cd057610cd06153e2565b9050602002016020810190610ce5919061468d565b6001600160a01b03161415610d0c5760405162461bcd60e51b815260040161056490614f96565b6001600160a01b038d16610d325760405162461bcd60e51b815260040161056490614f96565b6001600160a01b038416610d585760405162461bcd60e51b815260040161056490614f96565b6001600160a01b038316610d7e5760405162461bcd60e51b815260040161056490614f96565b6001600160a01b038216610da45760405162461bcd60e51b815260040161056490614f96565b88886000818110610db757610db76153e2565b9050602002016020810190610dcc919061468d565b61010180546001600160a01b0319166001600160a01b039290921691909117905588886001818110610e0057610e006153e2565b9050602002016020810190610e15919061468d565b61010260006101000a8154816001600160a01b0302191690836001600160a01b031602179055508461010360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c61010460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508161010560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600089899050905060005b81811015610fc1578a8a82818110610ed957610ed96153e2565b9050602002016020810190610eee919061468d565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190614b93565b610f6990600a615235565b61010860008d8d85818110610f8057610f806153e2565b9050602002016020810190610f95919061468d565b6001600160a01b0316815260208101919091526040016000205580610fb981615365565b915050610ebf565b5087876000818110610fd557610fd56153e2565b9050602002016020810190610fea919061468d565b61010680546001600160a01b03199081166001600160a01b039384161790915561010980548216878416179055609d80549091169187169190911790556110a98e8e8e8e8e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612e6f92505050565b6110fc8a8a60008181106110bf576110bf6153e2565b90506020020160208101906110d4919061468d565b898960008181106110e7576110e76153e2565b9050602002016020810190610577919061468d565b61113a8a8a6001818110611112576111126153e2565b9050602002016020810190611127919061468d565b898960018181106110e7576110e76153e2565b50801561114d576000805461ff00191690555b50505050505050505050505050565b611164611ad1565b6111805760405162461bcd60e51b815260040161056490614ebb565b60365481106111c15760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610564565b6000603682815481106111d6576111d66153e2565b60009182526020808320909101546001600160a01b03908116808452603590925260409092205460365491935090911690611213906001906152ff565b831015611295576036805461122a906001906152ff565b8154811061123a5761123a6153e2565b600091825260209091200154603680546001600160a01b039092169185908110611266576112666153e2565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60368054806112a6576112a66153cc565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b61132f611ad1565b61134b5760405162461bcd60e51b815260040161056490614ebb565b600054610100900460ff1680611364575060005460ff16155b6113805760405162461bcd60e51b815260040161056490614ef2565b600054610100900460ff161580156113a2576000805461ffff19166101011790555b6114138989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612e6f92505050565b8015611425576000805461ff00191690555b505050505050505050565b611438611ad1565b6114545760405162461bcd60e51b815260040161056490614ebb565b60005b81811015611508576000838383818110611473576114736153e2565b9050602002016020810190611488919061468d565b6001600160a01b031614156114f65760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610564565b8061150081615365565b915050611457565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161153d93929190614d2c565b60405180910390a1611551603a8383614530565b505050565b61155e611ad1565b61157a5760405162461bcd60e51b815260040161056490614ebb565b6001600160a01b0382166115a05760405162461bcd60e51b815260040161056490614f96565b806115ed5760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f776564000000000000006044820152606401610564565b60cf80546001600160a01b0319166001600160a01b0384161790556101075550565b611617611ad1565b6116335760405162461bcd60e51b815260040161056490614ebb565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b610103546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f9190614b28565b610101546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561175957600080fd5b505afa15801561176d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117919190614b28565b610102546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156117db57600080fd5b505afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118139190614b28565b610109546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561185d57600080fd5b505afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118959190614b28565b905080156119fe5761010654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156118e357600080fd5b505afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b9190614b28565b905060008061010660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561196f57600080fd5b505afa158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a79190614abf565b506001600160701b039182169350169050826119c385846152e0565b6119cd91906151d0565b6119d790876151b8565b9550826119e485836152e0565b6119ee91906151d0565b6119f890866151b8565b94505050505b61010354610101546000916001600160a01b03918216911614611a50578315611a4b57610107546101015461010354611a4892916000916001600160a01b03918216911688612f4e565b90505b611a5d565b611a5a84826151b8565b90505b61010354610102546000916001600160a01b03918216911614611aaf578315611aaa57610107546101025461010354611aa792916000916001600160a01b03918216911688612f4e565b90505b611abc565b611ab984826151b8565b90505b611ac681836151b8565b965050505050505090565b6000611ae96000805160206154448339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611b0a611ad1565b611b265760405162461bcd60e51b815260040161056490614ebb565b611b4e817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b0316611b6e6000805160206154448339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b03163314611bd05760405162461bcd60e51b815260040161056490614e84565b60008051602061542483398151915280546002811415611c025760405162461bcd60e51b815260040161056490614f6e565b60028255610103546001600160a01b03858116911614611c345760405162461bcd60e51b815260040161056490614f40565b60008061010660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c8657600080fd5b505afa158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe9190614abf565b50610109546040516370a0823160e01b81523060048201526001600160701b0393841695509190921692506000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d1757600080fd5b505afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f9190614b28565b90508015611ea25761010654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611d9d57600080fd5b505afa158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd59190614b28565b90506000611e27611de7896004613432565b610101546001600160a01b03908116600081815261010860205260408082205461010254909416808352912054610107548b948b948a9491939291613441565b905082811115611e345750815b600082611e4183886152e0565b611e4b91906151d0565b9050600083611e5a84886152e0565b611e6491906151d0565b9050611e6f8361351f565b610101546101025461010654611e9b926001600160a01b03908116928116911686610a98876004612943565b5050505050505b611eaa612ad3565b610103546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611eef57600080fd5b505afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190614b28565b61010354909150611f42906001600160a01b03168a836121f7565b50505050600182555050505050565b6034546001600160a01b03163314611f7b5760405162461bcd60e51b815260040161056490614e84565b60008051602061542483398151915280546002811415611fad5760405162461bcd60e51b815260040161056490614f6e565b60028255610103546040516370a0823160e01b81523060048201526106f4916001600160a01b03169081906370a082319060240160206040518083038186803b158015611ff957600080fd5b505afa15801561200d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120319190614b28565b612249565b6060603a80548060200260200160405190810160405280929190818152602001828054801561208e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612070575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156120f55760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610564565b6001600160a01b0382161580159061211557506001600160a01b03811615155b6121555760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610564565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611551908490613551565b610103546001600160a01b038381169116146122775760405162461bcd60e51b815260040161056490614f40565b600080612282613623565b9150915061228e61384c565b610102546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156122d357600080fd5b505afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b9190614b28565b90506000811561233f5761010754610102546101015461233c92916000916001600160a01b03918216911686612f4e565b90505b610101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561238457600080fd5b505afa158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc9190614b28565b905060006124196123ce6002856151d0565b6123d890846152ff565b610101546001600160a01b03908116600081815261010860205260408082205461010254909416808352912054610107548c948c9490936001929190613910565b610107546101015461010254929350612445926000916001600160a01b03908116911630808785613a08565b50610101546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561248a57600080fd5b505afa15801561249e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c29190614b28565b610102546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a082319060240160206040518083038186803b15801561250757600080fd5b505afa15801561251b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253f9190614b28565b6101015461010254919550612579916001600160a01b0391821691168487612568826004612943565b6125738a6004612943565b30613d69565b505050612584612d02565b5050505050505050565b61010960009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125df57600080fd5b505af11580156125f3573d6000803e3d6000fd5b5050610105546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b15801561264057600080fd5b505afa158015612654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126789190614b28565b905080156126b35761010554610103546000916126a3916001600160a01b0391821691168430613f63565b90506126af81846151b8565b9250505b610103546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156126f857600080fd5b505afa15801561270c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127309190614b28565b905080156115515760395461010354604080516001600160a01b03938416815292909116602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a16101035460395460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b1580156127dc57600080fd5b505af11580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128149190614a9d565b50505050565b6001600160a01b0381166128705760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610564565b806001600160a01b03166128906000805160206154448339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36128db8160008051602061544483398151915255565b50565b61010960009054906101000a90046001600160a01b03166001600160a01b031663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561292f57600080fd5b505af1158015612814573d6000803e3d6000fd5b600061271061295283826152ff565b61295c90856152e0565b61296691906151d0565b90505b92915050565b609d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905260009182919088169063095ea7b390604401602060405180830381600087803b1580156129c257600080fd5b505af11580156129d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fa9190614a9d565b50609d546001600160a01b031663baa2abde8a8a89898989612a1e426102586151b8565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b158015612a8b57600080fd5b505af1158015612a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac39190614b41565b9150915097509795505050505050565b61010354610101546001600160a01b03908116911614801590612b705750610101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612b3657600080fd5b505afa158015612b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6e9190614b28565b115b15612c15576101075461010154610103546040516370a0823160e01b81523060048201819052612c1394936000936001600160a01b039182169391169190819084906370a08231906024015b60206040518083038186803b158015612bd457600080fd5b505afa158015612be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0c9190614b28565b6000613a08565b505b61010354610102546001600160a01b03908116911614801590612cb25750610102546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612c7857600080fd5b505afa158015612c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb09190614b28565b115b1561079f576101075461010254610103546040516370a0823160e01b815230600482018190526128db94936000936001600160a01b039182169391169190819084906370a0823190602401612bbc565b610106546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d4757600080fd5b505afa158015612d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7f9190614b28565b610106546101095460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015612dd357600080fd5b505af1158015612de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0b9190614a9d565b506101095460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a906024015b600060405180830381600087803b158015612e5457600080fd5b505af1158015612e68573d6000803e3d6000fd5b5050505050565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612eab603a8585614530565b50815181518114612ef55760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610564565b60005b8181101561258457612f3c848281518110612f1557612f156153e2565b6020026020010151848381518110612f2f57612f2f6153e2565b6020026020010151612098565b80612f4681615365565b915050612ef8565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082015280866001811115612fa857612fa86153b6565b90816001811115612fbb57612fbb6153b6565b9052506001600160a01b0385811660208301528481166040808401919091526060830185905260cf549051631f29a8cd60e31b8152600481018a90526000928392839291169063f94d46689060240160006040518083038186803b15801561302257600080fd5b505afa158015613036573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261305e9190810190614993565b60cf5460405163f6c0092760e01b8152600481018f9052939650919450925060009182916001600160a01b03169063f6c0092790602401604080518083038186803b1580156130ac57600080fd5b505afa1580156130c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e4919061491e565b909250905060008160028111156130fd576130fd6153b6565b14156132365760008060005b87518160ff1610156131a5578c6001600160a01b0316888260ff1681518110613134576131346153e2565b60200260200101516001600160a01b03161415613156578060ff169250613193565b8b6001600160a01b0316888260ff1681518110613175576131756153e2565b60200260200101516001600160a01b03161415613193578060ff1691505b8061319d81615380565b915050613109565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a906131d7908b908a9087908790600401615088565b60206040518083038186803b1580156131ef57600080fd5b505afa158015613203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132279190614b28565b98505050505050505050613429565b600181600281111561324a5761324a6153b6565b14156133555760008060005b87518160ff161015613324578c6001600160a01b0316888260ff1681518110613281576132816153e2565b60200260200101516001600160a01b031614156132bc57868160ff16815181106132ad576132ad6153e2565b60200260200101519250613312565b8b6001600160a01b0316888260ff16815181106132db576132db6153e2565b60200260200101516001600160a01b0316141561331257868160ff1681518110613307576133076153e2565b602002602001015191505b8061331c81615380565b915050613256565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c906131d7908b90869086906004016150e9565b60008060005b87518160ff161015613324578c6001600160a01b0316888260ff1681518110613386576133866153e2565b60200260200101516001600160a01b031614156133c157868160ff16815181106133b2576133b26153e2565b60200260200101519250613417565b8b6001600160a01b0316888260ff16815181106133e0576133e06153e2565b60200260200101516001600160a01b0316141561341757868160ff168151811061340c5761340c6153e2565b602002602001015191505b8061342181615380565b91505061335b565b95945050505050565b600061271061295283826151b8565b60008061344e878a6152e0565b613458878c6152e0565b61346291906151b8565b8661346d8d8b6152e0565b61347791906152e0565b61348191906151d0565b905060005b60018110156135105760008961349c848d6152e0565b6134a691906151d0565b905060006134b8886000888a86612f4e565b90506134c4818d6152e0565b6134ce838f6152e0565b6134d891906151b8565b828f8d6134e591906152e0565b6134ef91906152e0565b6134f991906151d0565b93505050808061350890615365565b915050613486565b509a9950505050505050505050565b61010954604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401612e3a565b60006135a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141509092919063ffffffff16565b80519091501561155157808060200190518101906135c49190614a9d565b6115515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610564565b60008060008061010660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561367857600080fd5b505afa15801561368c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b09190614abf565b506001600160701b031691506001600160701b03169150600361010160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561371857600080fd5b505afa15801561372c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137509190614b93565b61375a9190615316565b61376590600a615235565b821180156138045750610102546040805163313ce56760e01b815290516003926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156137b457600080fd5b505afa1580156137c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ec9190614b93565b6137f69190615316565b61380190600a615235565b81115b6138435760405162461bcd60e51b815260206004820152601060248201526f526573657276657320746f6f206c6f7760801b6044820152606401610564565b90939092509050565b610103546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561389157600080fd5b505afa1580156138a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c99190614b28565b61010154610103549192506001600160a01b039182169116146128db5761010754610103546101015461057792916000916001600160a01b03918216911630808785613a08565b600080888861391f898d6152e0565b61392991906151d0565b61393391906151b8565b61393d8a8d6152e0565b61394791906151d0565b90506139786040518060400160405280600d81526020016c0616d6f756e7430546f5377617609c1b81525082614169565b60005b86811015613510576139ac6040518060400160405280600681526020016506f6e537761760d41b81525086866141ae565b60006139bc876000888887612f4e565b90508a836139ca838f6152e0565b6139d491906151d0565b6139de91906151b8565b6139e88c8f6152e0565b6139f291906151d0565b9250508080613a0090615365565b91505061397b565b60408051808201909152601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015260cf54600091613a50916001600160a01b03166141f5565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b8152306004820152613b01919089906001600160a01b038216906370a082319060240160206040518083038186803b158015613ac457600080fd5b505afa158015613ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afc9190614b28565b61423a565b60cf546040516370a0823160e01b81523060048201526001600160a01b038981169263095ea7b39291169083906370a082319060240160206040518083038186803b158015613b4f57600080fd5b505afa158015613b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b879190614b28565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015613bcd57600080fd5b505af1158015613be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c059190614a9d565b50613c526040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b89815260208101896001811115613c6b57613c6b6153b6565b90816001811115613c7e57613c7e6153b6565b9052506001600160a01b038881166040838101919091528882166060808501919091526080808501889052825190810183526000602082018190529181019190915288831681528783169181019190915260cf549091166352bbbe29838387613ce9426102586151b8565b6040518563ffffffff1660e01b8152600401613d089493929190614fcd565b602060405180830381600087803b158015613d2257600080fd5b505af1158015613d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d5a9190614b28565b9b9a5050505050505050505050565b609d5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101879052600091829182918b169063095ea7b390604401602060405180830381600087803b158015613dbd57600080fd5b505af1158015613dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df59190614a9d565b50609d5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101899052908a169063095ea7b390604401602060405180830381600087803b158015613e4457600080fd5b505af1158015613e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e7c9190614a9d565b50609d546001600160a01b031663e8e337008b8b8b8b8b8b8b613ea1426102586151b8565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015613f1857600080fd5b505af1158015613f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f509190614b65565b9250925092509750975097945050505050565b609d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905260009186169063095ea7b390604401602060405180830381600087803b158015613fb357600080fd5b505af1158015613fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613feb9190614a9d565b506000613ff9868686614281565b90508061400a576000915050614148565b604080516002808252606082018352600092602083019080368337019050509050868160008151811061403f5761403f6153e2565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110614073576140736153e2565b6001600160a01b039283166020918202929092010152609d54600091166338ed1739876140a1866004612943565b85896140af426102586151b8565b6040518663ffffffff1660e01b81526004016140cf959493929190615127565b600060405180830381600087803b1580156140e957600080fd5b505af11580156140fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141259190810190614a68565b90508060018151811061413a5761413a6153e2565b602002602001015193505050505b949350505050565b606061415f84846000856143ae565b90505b9392505050565b610577828260405160240161417f929190614e62565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526144d6565b6115518383836040516024016141c693929190614e01565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b1790526144d6565b610577828260405160240161420b929190614dd7565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526144d6565b61155183838360405160240161425293929190614e34565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526144d6565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106142ba576142ba6153e2565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106142ee576142ee6153e2565b6001600160a01b039283166020918202929092010152609d5460405163d06ca61f60e01b8152600092919091169063d06ca61f90614332908790869060040161510e565b60006040518083038186803b15801561434a57600080fd5b505afa15801561435e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143869190810190614a68565b90508060018151811061439b5761439b6153e2565b6020026020010151925050509392505050565b60608247101561440f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610564565b843b61445d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610564565b600080866001600160a01b031685876040516144799190614cfd565b60006040518083038185875af1925050503d80600081146144b6576040519150601f19603f3d011682016040523d82523d6000602084013e6144bb565b606091505b50915091506144cb8282866144f7565b979650505050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60608315614506575081614162565b8251156145165782518084602001fd5b8160405162461bcd60e51b81526004016105649190614dc4565b828054828255906000526020600020908101928215614583579160200282015b828111156145835781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614550565b5061458f929150614593565b5090565b5b8082111561458f5760008155600101614594565b80356145b38161540e565b919050565b60008083601f8401126145ca57600080fd5b50813567ffffffffffffffff8111156145e257600080fd5b6020830191508360208260051b85010111156145fd57600080fd5b9250929050565b600082601f83011261461557600080fd5b8151602061462a61462583615194565b615163565b80838252828201915082860187848660051b890101111561464a57600080fd5b60005b858110156146695781518452928401929084019060010161464d565b5090979650505050505050565b80516001600160701b03811681146145b357600080fd5b60006020828403121561469f57600080fd5b81356141628161540e565b600080604083850312156146bd57600080fd5b82356146c88161540e565b915060208301356146d88161540e565b809150509250929050565b60008060008060008060008060a0898b0312156146ff57600080fd5b883561470a8161540e565b9750602089013561471a8161540e565b9650604089013567ffffffffffffffff8082111561473757600080fd5b6147438c838d016145b8565b909850965060608b013591508082111561475c57600080fd5b6147688c838d016145b8565b909650945060808b013591508082111561478157600080fd5b5061478e8b828c016145b8565b999c989b5096995094979396929594505050565b6000806000806000806000806000806000806101208d8f0312156147c557600080fd5b6147ce8d6145a8565b9b506147dc60208e016145a8565b9a5067ffffffffffffffff60408e013511156147f757600080fd5b6148078e60408f01358f016145b8565b909a50985067ffffffffffffffff60608e0135111561482557600080fd5b6148358e60608f01358f016145b8565b909850965067ffffffffffffffff60808e0135111561485357600080fd5b6148638e60808f01358f016145b8565b909650945061487460a08e016145a8565b935061488260c08e016145a8565b925061489060e08e016145a8565b915061489f6101008e016145a8565b90509295989b509295989b509295989b565b6000806000606084860312156148c657600080fd5b83356148d18161540e565b925060208401356148e18161540e565b929592945050506040919091013590565b6000806040838503121561490557600080fd5b82356149108161540e565b946020939093013593505050565b6000806040838503121561493157600080fd5b825161493c8161540e565b6020840151909250600381106146d857600080fd5b6000806020838503121561496457600080fd5b823567ffffffffffffffff81111561497b57600080fd5b614987858286016145b8565b90969095509350505050565b6000806000606084860312156149a857600080fd5b835167ffffffffffffffff808211156149c057600080fd5b818601915086601f8301126149d457600080fd5b815160206149e461462583615194565b8083825282820191508286018b848660051b8901011115614a0457600080fd5b600096505b84871015614a30578051614a1c8161540e565b835260019690960195918301918301614a09565b5091890151919750909350505080821115614a4a57600080fd5b50614a5786828701614604565b925050604084015190509250925092565b600060208284031215614a7a57600080fd5b815167ffffffffffffffff811115614a9157600080fd5b61414884828501614604565b600060208284031215614aaf57600080fd5b8151801515811461416257600080fd5b600080600060608486031215614ad457600080fd5b614add84614676565b9250614aeb60208501614676565b9150604084015163ffffffff81168114614b0457600080fd5b809150509250925092565b600060208284031215614b2157600080fd5b5035919050565b600060208284031215614b3a57600080fd5b5051919050565b60008060408385031215614b5457600080fd5b505080516020909101519092909150565b600080600060608486031215614b7a57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614ba557600080fd5b815160ff8116811461416257600080fd5b600081518084526020808501945080840160005b83811015614bef5781516001600160a01b031687529582019590820190600101614bca565b509495945050505050565b60008151808452614c12816020860160208601615339565b601f01601f19169290920160200192915050565b60028110614c4457634e487b7160e01b600052602160045260246000fd5b9052565b6000610120614c58848451614c26565b6020838101516001600160a01b03169085015260408084015190614c86908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151614cbf60c08601826001600160a01b03169052565b5060e0830151614cda60e08601826001600160a01b03169052565b50610100808401518282870152614cf383870182614bfa565b9695505050505050565b60008251614d0f818460208701615339565b9190910192915050565b6020815260006129666020830184614bb6565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015614d765781546001600160a01b031684529284019260019182019101614d51565b505050838103828501528481528590820160005b86811015614db8578235614d9d8161540e565b6001600160a01b031682529183019190830190600101614d8a565b50979650505050505050565b6020815260006129666020830184614bfa565b604081526000614dea6040830185614bfa565b905060018060a01b03831660208301529392505050565b606081526000614e146060830186614bfa565b6001600160a01b0394851660208401529290931660409091015292915050565b606081526000614e476060830186614bfa565b6001600160a01b039490941660208301525060400152919050565b604081526000614e756040830185614bfa565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60e08152845160e082015260006020860151614fed610100840182614c26565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c06101808401526150366101a0840182614bfa565b915050615076602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b60808152600061509b6080830187614c48565b82810360208481019190915286518083528782019282019060005b818110156150d2578451835293830193918301916001016150b6565b505060408501969096525050506060015292915050565b6060815260006150fc6060830186614c48565b60208301949094525060400152919050565b82815260406020820152600061415f6040830184614bb6565b85815284602082015260a06040820152600061514660a0830186614bb6565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561518c5761518c6153f8565b604052919050565b600067ffffffffffffffff8211156151ae576151ae6153f8565b5060051b60200190565b600082198211156151cb576151cb6153a0565b500190565b6000826151ed57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561522d578160001904821115615213576152136153a0565b8085161561522057918102915b93841c93908002906151f7565b509250929050565b600061296660ff84168360008261524e57506001612969565b8161525b57506000612969565b8160018114615271576002811461527b57615297565b6001915050612969565b60ff84111561528c5761528c6153a0565b50506001821b612969565b5060208310610133831016604e8410600b84101617156152ba575081810a612969565b6152c483836151f2565b80600019048211156152d8576152d86153a0565b029392505050565b60008160001904831182151516156152fa576152fa6153a0565b500290565b600082821015615311576153116153a0565b500390565b600060ff821660ff841680821015615330576153306153a0565b90039392505050565b60005b8381101561535457818101518382015260200161533c565b838111156128145750506000910152565b6000600019821415615379576153796153a0565b5060010190565b600060ff821660ff811415615397576153976153a0565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146128db57600080fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a264697066735822122076c5aa128ed3a6c9e9d242dc04e5a950bbc5db45b9118a3a85c20af014dad5b464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance()": {
        "details": "Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.",
        "returns": {
          "_0": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit an amount of asset into the platform",
        "params": {
          "_amount": "Units of asset to deposit",
          "_asset": "Address for the asset"
        }
      },
      "depositAll()": {
        "details": "Deposit balance of all supported assets into the platform"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdrawAll()": {
        "details": "Withdraw all assets from strategy sending assets to Vault."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address,address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as QuickSwap strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29944,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29947,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 29987,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30071,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 30073,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 30077,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30080,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30082,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 30084,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30086,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 30089,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30093,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 7451,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IUniswapV2Router02)5584"
      },
      {
        "astId": 7713,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6121,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "balancerVault",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IVault)11711"
      },
      {
        "astId": 7164,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25177,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "token0",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25180,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "token1",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25183,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "primaryStable",
        "offset": 0,
        "slot": "259",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25186,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickTokenNew",
        "offset": 0,
        "slot": "260",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25189,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickDragon",
        "offset": 0,
        "slot": "261",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25192,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickSwapPair",
        "offset": 0,
        "slot": "262",
        "type": "t_contract(IUniswapV2Pair)5175"
      },
      {
        "astId": 25194,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "poolId",
        "offset": 0,
        "slot": "263",
        "type": "t_bytes32"
      },
      {
        "astId": 25198,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "assetToDenominator",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25201,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickSwapPairStaker",
        "offset": 0,
        "slot": "265",
        "type": "t_contract(IStakingRewards)4684"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingRewards)4684": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)5175": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)5584": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)11711": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}