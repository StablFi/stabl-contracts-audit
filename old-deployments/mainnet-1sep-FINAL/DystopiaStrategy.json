{
  "address": "0x08712b9533538E15D443DA23c526C66E3a012393",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "TransferLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystPair",
      "outputs": [
        {
          "internalType": "contract IDystopiaLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract IDystopiaLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_primaryStable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_intermediatory_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "middleToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penLens",
      "outputs": [
        {
          "internalType": "contract IPenLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStable",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dystPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dystRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_userProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penLens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penToken",
          "type": "address"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userProxy",
      "outputs": [
        {
          "internalType": "contract IUserProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x816972dd2953ca143c9a0858d00fd7a79d2b7fe4fd988a5771febd1cac0f7b7c",
  "receipt": {
    "to": null,
    "from": "0xA2a067351C977113B98096F75c9685a3d51614eC",
    "contractAddress": "0x08712b9533538E15D443DA23c526C66E3a012393",
    "transactionIndex": 69,
    "gasUsed": "5355940",
    "logsBloom": "0x
    "blockHash": "0xe54ba8c987609db605a2a2602e21ae6559c3a976127039760b0cb96077e7bca9",
    "transactionHash": "0x816972dd2953ca143c9a0858d00fd7a79d2b7fe4fd988a5771febd1cac0f7b7c",
    "logs": [
      {
        "transactionIndex": 69,
        "blockNumber": 32558912,
        "transactionHash": "0x816972dd2953ca143c9a0858d00fd7a79d2b7fe4fd988a5771febd1cac0f7b7c",
        "address": "0x08712b9533538E15D443DA23c526C66E3a012393",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec"
        ],
        "data": "0x",
        "logIndex": 332,
        "blockHash": "0xe54ba8c987609db605a2a2602e21ae6559c3a976127039760b0cb96077e7bca9"
      },
      {
        "transactionIndex": 69,
        "blockNumber": 32558912,
        "transactionHash": "0x816972dd2953ca143c9a0858d00fd7a79d2b7fe4fd988a5771febd1cac0f7b7c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000034b1f9c82bcfad40000000000000000000000000000000000000000000000026566e4ea4b45d2a30000000000000000000000000000000000000000000005ade8c216502a6d2a7e000000000000000000000000000000000000000000000002621bc54dc888d7cf0000000000000000000000000000000000000000000005adec0d35ecad2a2552",
        "logIndex": 333,
        "blockHash": "0xe54ba8c987609db605a2a2602e21ae6559c3a976127039760b0cb96077e7bca9"
      }
    ],
    "blockNumber": 32558912,
    "cumulativeGasUsed": "17492349",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "687ed9fa5cffd3a4c7a6373a1d9ad1d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"TransferLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystPair\",\"outputs\":[{\"internalType\":\"contract IDystopiaLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract IDystopiaLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_primaryStable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_intermediatory_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"middleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penLens\",\"outputs\":[{\"internalType\":\"contract IPenLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStable\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dystPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dystRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penLens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penToken\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProxy\",\"outputs\":[{\"internalType\":\"contract IUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance()\":{\"details\":\"Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.\",\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit an amount of asset into the platform\",\"params\":{\"_amount\":\"Units of asset to deposit\",\"_asset\":\"Address for the asset\"}},\"depositAll()\":{\"details\":\"Deposit balance of all supported assets into the platform\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdrawAll()\":{\"details\":\"Withdraw all assets from strategy sending assets to Vault.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Dystopia strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/DystopiaStrategy.sol\":\"DystopiaStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/connectors/IPenLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPenLens {\\r\\n\\r\\n    /* ========== PUBLIC VARS ========== */\\r\\n\\r\\n    function penPoolFactoryAddress() external view returns (address);\\r\\n\\r\\n    function rewardsDistributorAddress() external view returns (address);\\r\\n\\r\\n    function userProxyFactoryAddress() external view returns (address);\\r\\n\\r\\n    function dystopiaLensAddress() external view returns (address);\\r\\n\\r\\n    function penAddress() external view returns (address);\\r\\n\\r\\n    function vlPenAddress() external view returns (address);\\r\\n\\r\\n    function penDystAddress() external view returns (address);\\r\\n\\r\\n    function voterProxyAddress() external view returns (address);\\r\\n\\r\\n    function veAddress() external view returns (address);\\r\\n\\r\\n    function dystAddress() external view returns (address);\\r\\n\\r\\n    function penDystRewardsPoolAddress() external view returns (address);\\r\\n\\r\\n    function partnersRewardsPoolAddress() external view returns (address);\\r\\n\\r\\n    function treasuryAddress() external view returns (address);\\r\\n\\r\\n    function cvlPenAddress() external view returns (address);\\r\\n\\r\\n    function penV1RewardsAddress() external view returns (address);\\r\\n\\r\\n    function penV1RedeemAddress() external view returns (address);\\r\\n\\r\\n    function penV1Address() external view returns (address);\\r\\n\\r\\n    function tokensAllowlistAddress() external view returns (address);\\r\\n\\r\\n    /* ========== PUBLIC VIEW FUNCTIONS ========== */\\r\\n\\r\\n    function voterAddress() external view returns (address);\\r\\n\\r\\n    function poolsFactoryAddress() external view returns (address);\\r\\n\\r\\n    function gaugesFactoryAddress() external view returns (address);\\r\\n\\r\\n    function minterAddress() external view returns (address);\\r\\n\\r\\n    function penPoolsLength() external view returns (uint256);\\r\\n\\r\\n    function userProxiesLength() external view returns (uint256);\\r\\n\\r\\n    function userProxyByAccount(address accountAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n    function userProxyByIndex(uint256 index) external view returns (address);\\r\\n\\r\\n    function gaugeByDystPool(address) external view returns (address);\\r\\n\\r\\n    function dystPoolByPenPool(address penPoolAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n    function penPoolByDystPool(address dystPoolAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n    function stakingRewardsByDystPool(address dystPoolAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n    function stakingRewardsByPenPool(address dystPoolAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n    function isPenPool(address penPoolAddress) external view returns (bool);\\r\\n\\r\\n    function penPoolsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    function isPartner(address userProxyAddress) external view returns (bool);\\r\\n\\r\\n    function stakedPenDystBalanceOf(address accountAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 stakedBalance);\\r\\n\\r\\n    function dystInflationSinceInception() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x55f812be224cfef3d4bde816b95f7cd678b791b239af10be57afe5a439b40b96\",\"license\":\"MIT\"},\"contracts/connectors/IUserProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IUserProxy {\\r\\n    struct PositionStakingPool {\\r\\n        address stakingPoolAddress;\\r\\n        address penPoolAddress;\\r\\n        address dystPoolAddress;\\r\\n        uint256 balanceOf;\\r\\n        RewardToken[] rewardTokens;\\r\\n    }\\r\\n\\r\\n    struct RewardToken {\\r\\n        address rewardTokenAddress;\\r\\n        uint256 rewardRate;\\r\\n        uint256 rewardPerToken;\\r\\n        uint256 getRewardForDuration;\\r\\n        uint256 earned;\\r\\n    }\\r\\n\\r\\n    struct Vote {\\r\\n        address poolAddress;\\r\\n        int256 weight;\\r\\n    }\\r\\n\\r\\n    function convertNftToPenDyst(uint256) external;\\r\\n\\r\\n    function convertDystToPenDyst(uint256) external;\\r\\n\\r\\n    function depositLpAndStake(address, uint256) external;\\r\\n\\r\\n    function depositLp(address, uint256) external;\\r\\n\\r\\n    function stakingAddresses() external view returns (address[] memory);\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n\\r\\n    function stakingPoolsLength() external view returns (uint256);\\r\\n\\r\\n    function unstakeLpAndWithdraw(\\r\\n        address,\\r\\n        uint256,\\r\\n        bool\\r\\n    ) external;\\r\\n\\r\\n    function unstakeLpAndWithdraw(address, uint256) external;\\r\\n\\r\\n    function unstakeLpWithdrawAndClaim(address) external;\\r\\n\\r\\n    function unstakeLpWithdrawAndClaim(address, uint256) external;\\r\\n\\r\\n    function withdrawLp(address, uint256) external;\\r\\n\\r\\n    function stakePenLp(address, uint256) external;\\r\\n\\r\\n    function unstakePenLp(address, uint256) external;\\r\\n\\r\\n    function ownerAddress() external view returns (address);\\r\\n\\r\\n    function stakingPoolsPositions()\\r\\n    external\\r\\n    view\\r\\n    returns (PositionStakingPool[] memory);\\r\\n\\r\\n    function stakePenDyst(uint256) external;\\r\\n\\r\\n    function unstakePenDyst(uint256) external;\\r\\n\\r\\n    function unstakePenDyst(address, uint256) external;\\r\\n\\r\\n    function convertDystToPenDystAndStake(uint256) external;\\r\\n\\r\\n    function convertNftToPenDystAndStake(uint256) external;\\r\\n\\r\\n    function claimPenDystStakingRewards() external;\\r\\n\\r\\n    function claimPartnerStakingRewards() external;\\r\\n\\r\\n    function claimStakingRewards(address) external;\\r\\n\\r\\n    function claimStakingRewards(address[] memory) external;\\r\\n\\r\\n    function claimStakingRewards() external;\\r\\n\\r\\n    function claimVlPenRewards() external;\\r\\n\\r\\n    function depositPen(uint256, uint256) external;\\r\\n\\r\\n    function withdrawPen(bool, uint256) external;\\r\\n\\r\\n    function voteLockPen(uint256, uint256) external;\\r\\n\\r\\n    function withdrawVoteLockedPen(uint256, bool) external;\\r\\n\\r\\n    function relockVoteLockedPen(uint256) external;\\r\\n\\r\\n    function removeVote(address) external;\\r\\n\\r\\n    function registerStake(address) external;\\r\\n\\r\\n    function registerUnstake(address) external;\\r\\n\\r\\n    function resetVotes() external;\\r\\n\\r\\n    function setVoteDelegate(address) external;\\r\\n\\r\\n    function clearVoteDelegate() external;\\r\\n\\r\\n    function vote(address, int256) external;\\r\\n\\r\\n    function vote(Vote[] memory) external;\\r\\n\\r\\n    function votesByAccount(address) external view returns (Vote[] memory);\\r\\n\\r\\n    function migratePenDystToPartner() external;\\r\\n\\r\\n    function stakePenDystInPenV1(uint256) external;\\r\\n\\r\\n    function unstakePenDystInPenV1(uint256) external;\\r\\n\\r\\n    function redeemPenV1(uint256) external;\\r\\n\\r\\n    function redeemAndStakePenV1(uint256) external;\\r\\n\\r\\n    function whitelist(address) external;\\r\\n\\r\\n    function implementationsAddresses()\\r\\n    external\\r\\n    view\\r\\n    returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x62da1491ab3a83ec2d2aae32b1b66d4083f4def9f27542c5ed8980bd67f553db\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\r\\nimport {DataTypes} from '../protocol/DataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title IPool\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an Aave Pool.\\r\\n **/\\r\\ninterface IPool {\\r\\n  /**\\r\\n   * @dev Emitted on mintUnbacked()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the supply\\r\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\r\\n   * @param amount The amount of supplied assets\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event MintUnbacked(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on backUnbacked()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param backer The address paying for the backing\\r\\n   * @param amount The amount added as backing\\r\\n   * @param fee The amount paid in fees\\r\\n   **/\\r\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on supply()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the supply\\r\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\r\\n   * @param amount The amount supplied\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event Supply(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on withdraw()\\r\\n   * @param reserve The address of the underlying asset being withdrawn\\r\\n   * @param user The address initiating the withdrawal, owner of aTokens\\r\\n   * @param to The address that will receive the underlying\\r\\n   * @param amount The amount to be withdrawn\\r\\n   **/\\r\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n   * @param reserve The address of the underlying asset being borrowed\\r\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n   * initiator of the transaction on flashLoan()\\r\\n   * @param onBehalfOf The address that will be getting the debt\\r\\n   * @param amount The amount borrowed out\\r\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event Borrow(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    DataTypes.InterestRateMode interestRateMode,\\r\\n    uint256 borrowRate,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on repay()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n   * @param amount The amount repaid\\r\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\r\\n   **/\\r\\n  event Repay(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    address indexed repayer,\\r\\n    uint256 amount,\\r\\n    bool useATokens\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on swapBorrowRateMode()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user swapping his rate mode\\r\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n   **/\\r\\n  event SwapBorrowRateMode(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    DataTypes.InterestRateMode interestRateMode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param totalDebt The total isolation mode debt for the reserve\\r\\n   */\\r\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the user selects a certain asset category for eMode\\r\\n   * @param user The address of the user\\r\\n   * @param categoryId The category id\\r\\n   **/\\r\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   **/\\r\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   **/\\r\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on rebalanceStableBorrowRate()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user for which the rebalance has been executed\\r\\n   **/\\r\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on flashLoan()\\r\\n   * @param target The address of the flash loan receiver contract\\r\\n   * @param initiator The address initiating the flash loan\\r\\n   * @param asset The address of the asset being flash borrowed\\r\\n   * @param amount The amount flash borrowed\\r\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n   * @param premium The fee flash borrowed\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event FlashLoan(\\r\\n    address indexed target,\\r\\n    address initiator,\\r\\n    address indexed asset,\\r\\n    uint256 amount,\\r\\n    DataTypes.InterestRateMode interestRateMode,\\r\\n    uint256 premium,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a borrower is liquidated.\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n   * @param liquidator The address of the liquidator\\r\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  event LiquidationCall(\\r\\n    address indexed collateralAsset,\\r\\n    address indexed debtAsset,\\r\\n    address indexed user,\\r\\n    uint256 debtToCover,\\r\\n    uint256 liquidatedCollateralAmount,\\r\\n    address liquidator,\\r\\n    bool receiveAToken\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the state of a reserve is updated.\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The next liquidity rate\\r\\n   * @param stableBorrowRate The next stable borrow rate\\r\\n   * @param variableBorrowRate The next variable borrow rate\\r\\n   * @param liquidityIndex The next liquidity index\\r\\n   * @param variableBorrowIndex The next variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed reserve,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 stableBorrowRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\r\\n   * @param reserve The address of the reserve\\r\\n   * @param amountMinted The amount minted to the treasury\\r\\n   **/\\r\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\r\\n   * @param asset The address of the underlying asset to mint\\r\\n   * @param amount The amount to mint\\r\\n   * @param onBehalfOf The address that will receive the aTokens\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function mintUnbacked(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n   * @param asset The address of the underlying asset to back\\r\\n   * @param amount The amount to back\\r\\n   * @param fee The amount paid in fees\\r\\n   **/\\r\\n  function backUnbacked(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 fee\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function supply(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param deadline The deadline timestamp that the permit is valid\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param permitV The V parameter of ERC712 permit sig\\r\\n   * @param permitR The R parameter of ERC712 permit sig\\r\\n   * @param permitS The S parameter of ERC712 permit sig\\r\\n   **/\\r\\n  function supplyWithPermit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode,\\r\\n    uint256 deadline,\\r\\n    uint8 permitV,\\r\\n    bytes32 permitR,\\r\\n    bytes32 permitS\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n   * @param asset The address of the underlying asset to borrow\\r\\n   * @param amount The amount to be borrowed\\r\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n   * if he has been given credit delegation allowance\\r\\n   **/\\r\\n  function borrow(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    uint16 referralCode,\\r\\n    address onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repay(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    address onBehalfOf\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @param deadline The deadline timestamp that the permit is valid\\r\\n   * @param permitV The V parameter of ERC712 permit sig\\r\\n   * @param permitR The R parameter of ERC712 permit sig\\r\\n   * @param permitS The S parameter of ERC712 permit sig\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repayWithPermit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    address onBehalfOf,\\r\\n    uint256 deadline,\\r\\n    uint8 permitV,\\r\\n    bytes32 permitR,\\r\\n    bytes32 permitS\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\r\\n   * equivalent debt tokens\\r\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\r\\n   * balance is not enough to cover the whole debt\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repayWithATokens(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n   **/\\r\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n   * - Users can be rebalanced if the following conditions are satisfied:\\r\\n   *     1. Usage ratio is above 95%\\r\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param user The address of the user to be rebalanced\\r\\n   **/\\r\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n   * @param asset The address of the underlying asset supplied\\r\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n   **/\\r\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  function liquidationCall(\\r\\n    address collateralAsset,\\r\\n    address debtAsset,\\r\\n    address user,\\r\\n    uint256 debtToCover,\\r\\n    bool receiveAToken\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n   * into consideration. For further details please visit https://developers.aave.com\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n   * @param assets The addresses of the assets being flash-borrowed\\r\\n   * @param amounts The amounts of the assets being flash-borrowed\\r\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata interestRateModes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n   * into consideration. For further details please visit https://developers.aave.com\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n   * @param asset The address of the asset being flash-borrowed\\r\\n   * @param amount The amount of the asset being flash-borrowed\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function flashLoanSimple(\\r\\n    address receiverAddress,\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user account data across all the reserves\\r\\n   * @param user The address of the user\\r\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n   * @return ltv The loan to value of The user\\r\\n   * @return healthFactor The current health factor of the user\\r\\n   **/\\r\\n  function getUserAccountData(address user)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint256 totalCollateralBase,\\r\\n    uint256 totalDebtBase,\\r\\n    uint256 availableBorrowsBase,\\r\\n    uint256 currentLiquidationThreshold,\\r\\n    uint256 ltv,\\r\\n    uint256 healthFactor\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\r\\n   * interest rate strategy\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\r\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function initReserve(\\r\\n    address asset,\\r\\n    address aTokenAddress,\\r\\n    address stableDebtAddress,\\r\\n    address variableDebtAddress,\\r\\n    address interestRateStrategyAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Drop a reserve\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   **/\\r\\n  function dropReserve(address asset) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the interest rate strategy contract\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\r\\n  external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param configuration The new configuration bitmap\\r\\n   **/\\r\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\r\\n  external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The configuration of the reserve\\r\\n   **/\\r\\n  function getConfiguration(address asset)\\r\\n  external\\r\\n  view\\r\\n  returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the configuration of the user across all the reserves\\r\\n   * @param user The user address\\r\\n   * @return The configuration of the user\\r\\n   **/\\r\\n  function getUserConfiguration(address user)\\r\\n  external\\r\\n  view\\r\\n  returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the normalized income normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the normalized variable debt per unit of asset\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state and configuration data of the reserve\\r\\n   **/\\r\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Validates and finalizes an aToken transfer\\r\\n   * @dev Only callable by the overlying aToken of the `asset`\\r\\n   * @param asset The address of the underlying asset of the aToken\\r\\n   * @param from The user from which the aTokens are transferred\\r\\n   * @param to The user receiving the aTokens\\r\\n   * @param amount The amount being transferred/withdrawn\\r\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\r\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\r\\n   */\\r\\n  function finalizeTransfer(\\r\\n    address asset,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 balanceFromBefore,\\r\\n    uint256 balanceToBefore\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n   * @dev It does not include dropped reserves\\r\\n   * @return The addresses of the underlying assets of the initialized reserves\\r\\n   **/\\r\\n  function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n   * @return The address of the reserve associated with id\\r\\n   **/\\r\\n  function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n   * @return The address of the PoolAddressesProvider\\r\\n   **/\\r\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the protocol fee on the bridging\\r\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n   */\\r\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\r\\n   * - A part is collected by the protocol treasury\\r\\n   * @dev The total premium is calculated on the total borrowed amount\\r\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n   */\\r\\n  function updateFlashloanPremiums(\\r\\n    uint128 flashLoanPremiumTotal,\\r\\n    uint128 flashLoanPremiumToProtocol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Configures a new category for the eMode.\\r\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n   * The category 0 is reserved as it's the default for volatile assets\\r\\n   * @param id The id of the category\\r\\n   * @param config The configuration of the category\\r\\n   */\\r\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the data of an eMode category\\r\\n   * @param id The id of the category\\r\\n   * @return The configuration data of the category\\r\\n   */\\r\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a user to use the protocol in eMode\\r\\n   * @param categoryId The id of the category\\r\\n   */\\r\\n  function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the eMode the user is using\\r\\n   * @param user The address of the user\\r\\n   * @return The eMode id\\r\\n   */\\r\\n  function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n   * @dev It requires the given asset has zero debt ceiling\\r\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n   */\\r\\n  function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n   */\\r\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total fee on flash loans\\r\\n   * @return The total fee on flashloans\\r\\n   */\\r\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the part of the bridge fees sent to protocol\\r\\n   * @return The bridge fee sent to the protocol treasury\\r\\n   */\\r\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the part of the flashloan fees sent to protocol\\r\\n   * @return The flashloan fee sent to the protocol treasury\\r\\n   */\\r\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n   * @return The maximum number of reserves supported\\r\\n   */\\r\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n  /**\\r\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\r\\n   * @param assets The list of reserves for which the minting needs to be executed\\r\\n   **/\\r\\n  function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rescue and transfer tokens locked in this contract\\r\\n   * @param token The address of the token\\r\\n   * @param to The address of the recipient\\r\\n   * @param amount The amount of token to transfer\\r\\n   */\\r\\n  function rescueTokens(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n   * @dev Deprecated: Use the `supply` function instead\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function deposit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n}\",\"keccak256\":\"0xbe7607f494194a9b070218380a3ebaa2c306d5acd5e298ac0a1e464d72b02c23\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n **/\\r\\ninterface IPoolAddressesProvider {\\r\\n  /**\\r\\n   * @dev Emitted when the market identifier is updated.\\r\\n   * @param oldMarketId The old id of the market\\r\\n   * @param newMarketId The new id of the market\\r\\n   */\\r\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool is updated.\\r\\n   * @param oldAddress The old address of the Pool\\r\\n   * @param newAddress The new address of the Pool\\r\\n   */\\r\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool configurator is updated.\\r\\n   * @param oldAddress The old address of the PoolConfigurator\\r\\n   * @param newAddress The new address of the PoolConfigurator\\r\\n   */\\r\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle is updated.\\r\\n   * @param oldAddress The old address of the PriceOracle\\r\\n   * @param newAddress The new address of the PriceOracle\\r\\n   */\\r\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL manager is updated.\\r\\n   * @param oldAddress The old address of the ACLManager\\r\\n   * @param newAddress The new address of the ACLManager\\r\\n   */\\r\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the ACL admin is updated.\\r\\n   * @param oldAddress The old address of the ACLAdmin\\r\\n   * @param newAddress The new address of the ACLAdmin\\r\\n   */\\r\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the price oracle sentinel is updated.\\r\\n   * @param oldAddress The old address of the PriceOracleSentinel\\r\\n   * @param newAddress The new address of the PriceOracleSentinel\\r\\n   */\\r\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pool data provider is updated.\\r\\n   * @param oldAddress The old address of the PoolDataProvider\\r\\n   * @param newAddress The new address of the PoolDataProvider\\r\\n   */\\r\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new proxy is created.\\r\\n   * @param id The identifier of the proxy\\r\\n   * @param proxyAddress The address of the created proxy contract\\r\\n   * @param implementationAddress The address of the implementation contract\\r\\n   */\\r\\n  event ProxyCreated(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address indexed implementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a new non-proxied contract address is registered.\\r\\n   * @param id The identifier of the contract\\r\\n   * @param oldAddress The address of the old contract\\r\\n   * @param newAddress The address of the new contract\\r\\n   */\\r\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n   * @param id The identifier of the contract\\r\\n   * @param proxyAddress The address of the proxy contract\\r\\n   * @param oldImplementationAddress The address of the old implementation contract\\r\\n   * @param newImplementationAddress The address of the new implementation contract\\r\\n   */\\r\\n  event AddressSetAsProxy(\\r\\n    bytes32 indexed id,\\r\\n    address indexed proxyAddress,\\r\\n    address oldImplementationAddress,\\r\\n    address indexed newImplementationAddress\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id of the Aave market to which this contract points to.\\r\\n   * @return The market id\\r\\n   **/\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n   * identify and validate multiple Aave markets.\\r\\n   * @param newMarketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns an address by its identifier.\\r\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n   * @dev It returns ZERO if there is no registered address with the given id\\r\\n   * @param id The id\\r\\n   * @return The address of the registered for the specified id\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `newImplementationAddress`.\\r\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param newImplementationAddress The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the Pool proxy.\\r\\n   * @return The Pool proxy address\\r\\n   **/\\r\\n  function getPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n   * setting the new `pool` implementation when the function is called for the first time.\\r\\n   * @param newPoolImpl The new Pool implementation\\r\\n   **/\\r\\n  function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the PoolConfigurator proxy.\\r\\n   * @return The PoolConfigurator proxy address\\r\\n   **/\\r\\n  function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n   **/\\r\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle.\\r\\n   * @return The address of the PriceOracle\\r\\n   */\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle.\\r\\n   * @param newPriceOracle The address of the new PriceOracle\\r\\n   */\\r\\n  function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL manager.\\r\\n   * @return The address of the ACLManager\\r\\n   */\\r\\n  function getACLManager() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL manager.\\r\\n   * @param newAclManager The address of the new ACLManager\\r\\n   **/\\r\\n  function setACLManager(address newAclManager) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the ACL admin.\\r\\n   * @return The address of the ACL admin\\r\\n   */\\r\\n  function getACLAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the ACL admin.\\r\\n   * @param newAclAdmin The address of the new ACL admin\\r\\n   */\\r\\n  function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the price oracle sentinel.\\r\\n   * @return The address of the PriceOracleSentinel\\r\\n   */\\r\\n  function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the price oracle sentinel.\\r\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n   **/\\r\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the data provider.\\r\\n   * @return The address of the DataProvider\\r\\n   */\\r\\n  function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the data provider.\\r\\n   * @param newDataProvider The address of the new DataProvider\\r\\n   **/\\r\\n  function setPoolDataProvider(address newDataProvider) external;\\r\\n}\",\"keccak256\":\"0x67f4c56d57831913a60b095b935fa8cd96ac7a7b50f613bbfe79343f02b90a2d\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n}\",\"keccak256\":\"0x0fd560b921057efaefe7857d5c9bba39d126e581352fc0fbe0ada3da12f89cba\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/protocol/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    //timestamp of last update\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint16 id;\\r\\n    //aToken address\\r\\n    address aTokenAddress;\\r\\n    //stableDebtToken address\\r\\n    address stableDebtTokenAddress;\\r\\n    //variableDebtToken address\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the current treasury balance, scaled\\r\\n    uint128 accruedToTreasury;\\r\\n    //the outstanding unbacked aTokens minted through the bridging feature\\r\\n    uint128 unbacked;\\r\\n    //the outstanding debt borrowed against this asset in isolation mode\\r\\n    uint128 isolationModeTotalDebt;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60: asset is paused\\r\\n    //bit 61: borrowing in isolation mode is enabled\\r\\n    //bit 62-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n    //bit 152-167 liquidation protocol fee\\r\\n    //bit 168-175 eMode category\\r\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n    //bit 252-255 unused\\r\\n\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    /**\\r\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n     * asset is borrowed by the user.\\r\\n     */\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct EModeCategory {\\r\\n    // each eMode category has a custom ltv and liquidation threshold\\r\\n    uint16 ltv;\\r\\n    uint16 liquidationThreshold;\\r\\n    uint16 liquidationBonus;\\r\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n    address priceSource;\\r\\n    string label;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {\\r\\n    NONE,\\r\\n    STABLE,\\r\\n    VARIABLE\\r\\n  }\\r\\n\\r\\n  struct ReserveCache {\\r\\n    uint256 currScaledVariableDebt;\\r\\n    uint256 nextScaledVariableDebt;\\r\\n    uint256 currPrincipalStableDebt;\\r\\n    uint256 currAvgStableBorrowRate;\\r\\n    uint256 currTotalStableDebt;\\r\\n    uint256 nextAvgStableBorrowRate;\\r\\n    uint256 nextTotalStableDebt;\\r\\n    uint256 currLiquidityIndex;\\r\\n    uint256 nextLiquidityIndex;\\r\\n    uint256 currVariableBorrowIndex;\\r\\n    uint256 nextVariableBorrowIndex;\\r\\n    uint256 currLiquidityRate;\\r\\n    uint256 currVariableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    ReserveConfigurationMap reserveConfiguration;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    uint40 reserveLastUpdateTimestamp;\\r\\n    uint40 stableDebtLastUpdateTimestamp;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidationCallParams {\\r\\n    uint256 reservesCount;\\r\\n    uint256 debtToCover;\\r\\n    address collateralAsset;\\r\\n    address debtAsset;\\r\\n    address user;\\r\\n    bool receiveAToken;\\r\\n    address priceOracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSupplyParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address asset;\\r\\n    address user;\\r\\n    address onBehalfOf;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint16 referralCode;\\r\\n    bool releaseUnderlying;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    address onBehalfOf;\\r\\n    bool useATokens;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSetUserEModeParams {\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 categoryId;\\r\\n  }\\r\\n\\r\\n  struct FinalizeTransferParams {\\r\\n    address asset;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFromBefore;\\r\\n    uint256 balanceToBefore;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 fromEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct FlashloanParams {\\r\\n    address receiverAddress;\\r\\n    address[] assets;\\r\\n    uint256[] amounts;\\r\\n    uint256[] interestRateModes;\\r\\n    address onBehalfOf;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address addressesProvider;\\r\\n    uint8 userEModeCategory;\\r\\n    bool isAuthorizedFlashBorrower;\\r\\n  }\\r\\n\\r\\n  struct FlashloanSimpleParams {\\r\\n    address receiverAddress;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n  }\\r\\n\\r\\n  struct FlashLoanRepaymentParams {\\r\\n    uint256 amount;\\r\\n    uint256 totalPremium;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    address asset;\\r\\n    address receiverAddress;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct CalculateUserAccountDataParams {\\r\\n    UserConfigurationMap userConfig;\\r\\n    uint256 reservesCount;\\r\\n    address user;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ValidateBorrowParams {\\r\\n    ReserveCache reserveCache;\\r\\n    UserConfigurationMap userConfig;\\r\\n    address asset;\\r\\n    address userAddress;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint256 maxStableLoanPercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n    bool isolationModeActive;\\r\\n    address isolationModeCollateralAddress;\\r\\n    uint256 isolationModeDebtCeiling;\\r\\n  }\\r\\n\\r\\n  struct ValidateLiquidationCallParams {\\r\\n    ReserveCache debtReserveCache;\\r\\n    uint256 totalDebt;\\r\\n    uint256 healthFactor;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct CalculateInterestRatesParams {\\r\\n    uint256 unbacked;\\r\\n    uint256 liquidityAdded;\\r\\n    uint256 liquidityTaken;\\r\\n    uint256 totalStableDebt;\\r\\n    uint256 totalVariableDebt;\\r\\n    uint256 averageStableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    address reserve;\\r\\n    address aToken;\\r\\n  }\\r\\n\\r\\n  struct InitReserveParams {\\r\\n    address asset;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtAddress;\\r\\n    address variableDebtAddress;\\r\\n    address interestRateStrategyAddress;\\r\\n    uint16 reservesCount;\\r\\n    uint16 maxNumberReserves;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x36eb55078351c37daaf5d674808d9cd60250cd6081057d3fe396e68a561f3328\",\"license\":\"BUSL-1.1\"},\"contracts/connectors/uniswap/v3/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // 512-bit multiply [prod1 prod0] = a * b\\r\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n        // then use the Chinese Remainder Theorem to reconstruct\\r\\n        // the 512 bit result. The result is stored in two 256\\r\\n        // variables such that product = prod1 * 2**256 + prod0\\r\\n        uint256 prod0; // Least significant 256 bits of the product\\r\\n        uint256 prod1; // Most significant 256 bits of the product\\r\\n        assembly {\\r\\n            let mm := mulmod(a, b, not(0))\\r\\n            prod0 := mul(a, b)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        // Handle non-overflow cases, 256 by 256 division\\r\\n        if (prod1 == 0) {\\r\\n            require(denominator > 0);\\r\\n            assembly {\\r\\n                result := div(prod0, denominator)\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        // Make sure the result is less than 2**256.\\r\\n        // Also prevents denominator == 0\\r\\n        require(denominator > prod1);\\r\\n\\r\\n        ///////////////////////////////////////////////\\r\\n        // 512 by 256 division.\\r\\n        ///////////////////////////////////////////////\\r\\n\\r\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n        // Compute remainder using mulmod\\r\\n        uint256 remainder;\\r\\n        assembly {\\r\\n            remainder := mulmod(a, b, denominator)\\r\\n        }\\r\\n        // Subtract 256 bit number from 512 bit number\\r\\n        assembly {\\r\\n            prod1 := sub(prod1, gt(remainder, prod0))\\r\\n            prod0 := sub(prod0, remainder)\\r\\n        }\\r\\n\\r\\n        // Factor powers of two out of denominator\\r\\n        // Compute largest power of two divisor of denominator.\\r\\n        // Always >= 1.\\r\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\r\\n        // Divide denominator by power of two\\r\\n        assembly {\\r\\n            denominator := div(denominator, twos)\\r\\n        }\\r\\n\\r\\n        // Divide [prod1 prod0] by the factors of two\\r\\n        assembly {\\r\\n            prod0 := div(prod0, twos)\\r\\n        }\\r\\n        // Shift in bits from prod1 into prod0. For this we need\\r\\n        // to flip `twos` such that it is 2**256 / twos.\\r\\n        // If twos is zero, then it becomes one\\r\\n        assembly {\\r\\n            twos := add(div(sub(0, twos), twos), 1)\\r\\n        }\\r\\n        prod0 |= prod1 * twos;\\r\\n\\r\\n        // Invert denominator mod 2**256\\r\\n        // Now that denominator is an odd number, it has an inverse\\r\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n        // Compute the inverse by starting with a seed that is correct\\r\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n        uint256 inv = (3 * denominator) ^ 2;\\r\\n        // Now use Newton-Raphson iteration to improve the precision.\\r\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n        // arithmetic, doubling the correct bits in each step.\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n        // Because the division is now exact we can divide by multiplying\\r\\n        // with the modular inverse of denominator. This will give us the\\r\\n        // correct result modulo 2**256. Since the precoditions guarantee\\r\\n        // that the outcome is less than 2**256, this is the final result.\\r\\n        // We don't need to compute the high bits of the result and prod1\\r\\n        // is no longer required.\\r\\n        result = prod0 * inv;\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    function mulDivRoundingUp(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n            require(result < type(uint256).max);\\r\\n            result++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc53edae600561a9e6b0040a7a25725788ed96b9f9bfa0aeb6506188935c6a339\",\"license\":\"MIT\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IGeneralPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IPoolSwapStructs.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract BalancerExchange {\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    int256 public constant MAX_VALUE = 10 ** 27;\\r\\n    uint256 public constant MAX_SLIPPAGE = 1e16; // = 1%\\r\\n    function swap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 limit\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(balancerVault));\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        if (limit == 0) {\\r\\n            limit =  onSwap(_balancerVault, poolId, kind,  IERC20(address(tokenIn)),  IERC20(address(tokenOut)), amount);\\r\\n            limit = limit.mulTruncate(\\r\\n                uint256(1e18) - MAX_SLIPPAGE\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        console.log(\\\"BalancerVault: swapping 2\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId1,\\r\\n        bytes32 poolId2,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenMid,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap1;\\r\\n        batchSwap1.poolId = poolId1;\\r\\n        batchSwap1.assetInIndex = 0;\\r\\n        batchSwap1.assetOutIndex = 1;\\r\\n        batchSwap1.amount = amount;\\r\\n        swaps[0] = batchSwap1;\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap2;\\r\\n        batchSwap2.poolId = poolId2;\\r\\n        batchSwap2.assetInIndex = 1;\\r\\n        batchSwap2.assetOutIndex = 2;\\r\\n        batchSwap2.amount = 0;\\r\\n        swaps[1] = batchSwap2;\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = tokenIn;\\r\\n        assets[1] = tokenMid;\\r\\n        assets[2] = tokenOut;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = recipient;\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\r\\n            limits[0] = MAX_VALUE;\\r\\n            limits[1] = MAX_VALUE;\\r\\n            limits[2] = MAX_VALUE;\\r\\n        } else {\\r\\n            limits[0] = 0;\\r\\n            limits[1] = 0;\\r\\n            limits[2] = 0;\\r\\n        }\\r\\n\\r\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\r\\n    }\\r\\n\\r\\n    function onSwap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 balance\\r\\n    ) internal view returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = balance;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances,) = balancerVault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountToSwap(\\r\\n        address _balancerVault,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        console.log(\\\"amount0ToSwap\\\", amount0ToSwap);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            console.log(\\\"onSwap\\\", address(token0), address(token1));\\r\\n            uint256 amount1 = onSwap(_balancerVault, poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\r\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\r\\n        }\\r\\n\\r\\n        return amount0ToSwap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountLpTokensToWithdraw(\\r\\n        address _balancerVault,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < 1; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = onSwap(_balancerVault, poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\r\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n        return lpBalance;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0xbe570d3bea74a4a0a9ec5c7919748d6f817d2c45902d498740d7dcb2e3172aa3\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBasicToken {\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c53c94ab507ab0f44e541d130910e822d39d724bd88bf7c66de5a411334cfb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IDystopiaLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5 <0.9.0;\\r\\n\\r\\nimport \\\"./uniswap/IUniswapV2Pair.sol\\\";\\r\\n\\r\\nabstract contract IDystopiaLP is IUniswapV2Pair {\\r\\n    \\r\\n    mapping(address => uint) public override balanceOf;\\r\\n\\r\\n    function deposit(uint amount, uint tokenId) external virtual;\\r\\n    \\r\\n    function withdraw(uint amount) external virtual;\\r\\n    \\r\\n    function withdrawAll() external virtual;\\r\\n\\r\\n    function getReward(address account, address[] memory tokens) external virtual;\\r\\n\\r\\n    function token0() external virtual view returns (address);\\r\\n\\r\\n}\",\"keccak256\":\"0x335aa349e2e53dc5046fb67fd7d073fb008bff5464787bba7f11e24a4bade83f\",\"license\":\"MIT\"},\"contracts/interfaces/IDystopiaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IDystopiaRouter {\\r\\n    \\r\\n    struct Route {\\r\\n        address from;\\r\\n        address to;\\r\\n        bool stable;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\r\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\r\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\r\\n}\",\"keccak256\":\"0x43b78e409d7afc3125ce8f0306e84f05c7e0dc8eea82a5a83c12e6ff104d1081\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n}\",\"keccak256\":\"0xd289755363e22a44898d875aca0a419cc6c2bac227b4fa60c4f7711ac74db523\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Structures.sol\\\";\\r\\n\\r\\n\\r\\ninterface ISwapper is Structures {\\r\\n\\r\\n    // --- events\\r\\n\\r\\n    event SwapPlaceInfoRegistered(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pool,\\r\\n        string swapPlaceType\\r\\n    );\\r\\n\\r\\n    event SwapPlaceInfoRemoved(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pool\\r\\n    );\\r\\n\\r\\n    event SwapPlaceRegistered(\\r\\n        string swapPlaceType,\\r\\n        address swapPlace\\r\\n    );\\r\\n\\r\\n    event SwapPlaceRemoved(\\r\\n        string swapPlaceType\\r\\n    );\\r\\n\\r\\n    \\r\\n    // ---  structures\\r\\n\\r\\n    struct SwapPlaceInfo {\\r\\n        address pool;\\r\\n        string swapPlaceType;\\r\\n    }\\r\\n\\r\\n    struct SwapParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMin;\\r\\n        uint256 partsAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ---  logic\\r\\n\\r\\n    function swap(SwapParams calldata params) external returns (uint256);\\r\\n\\r\\n    function getAmountOut(SwapParams calldata params) external view returns (uint256);\\r\\n\\r\\n    function swapPath(SwapParams calldata params) external view returns (SwapRoute[] memory);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9145f9eab19132998922af81ac89b6137ed1a7313cab673dd01f87c8cdf54eeb\",\"license\":\"MIT\"},\"contracts/interfaces/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\ninterface Structures {\\r\\n\\r\\n    struct SwapRoute {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOut;\\r\\n        address swapPlace;\\r\\n        address pool;\\r\\n        //        string swapPlaceType;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3e56aea2b31ff1aad0a086c18473b8b8340c97c3d8eeefb0a96870eecb5e4aa6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\r\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\r\\n * types.\\r\\n *\\r\\n * This concept is unrelated to a Pool's Asset Managers.\\r\\n */\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\",\"keccak256\":\"0x3509f39516a60dda160e4b06c6767332b7575e481780b267bdc1af3b93493317\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\nimport \\\"./IPoolSwapStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\r\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\r\\n * either IGeneralPool or IMinimalSwapInfoPool\\r\\n */\\r\\ninterface IBasePool is IPoolSwapStructs {\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\r\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\r\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\r\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\r\\n     *\\r\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\r\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\r\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as minting pool shares.\\r\\n     */\\r\\n    function onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\r\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\r\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\r\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\r\\n     * `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\r\\n     *\\r\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\r\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\r\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as burning pool shares.\\r\\n     */\\r\\n    function onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    function getPoolId() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x346508790e1b3f82b399b1313ed16a1e1fe3d3e86b19c67cb82084fe57475777\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev IPools with the General specialization setting should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\r\\n * grant to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IGeneralPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x89cc84a63e52afa04dabfdeda368399994b7cf8f0bf7a0605b3f3473cab46b76\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\r\\n * to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IMinimalSwapInfoPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256 currentBalanceTokenIn,\\r\\n        uint256 currentBalanceTokenOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xe1439eeab21fc38a546a22e3463dd08a7f50ba4d97cb90daeafb215891925a5a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IPoolSwapStructs {\\r\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\r\\n    // IMinimalSwapInfoPool.\\r\\n    //\\r\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\r\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\r\\n    //\\r\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\r\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\r\\n    //\\r\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\r\\n    // some Pools.\\r\\n    //\\r\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\r\\n    // one Pool.\\r\\n    //\\r\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\r\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\r\\n    //    balance.\\r\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\r\\n    //\\r\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\r\\n    // where the Pool sends the outgoing tokens.\\r\\n    //\\r\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe058df50060904ef53e0fe5c80a2475bc27423c608befab165f42cc1ff458f97\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IAsset.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user's Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 cash,\\r\\n        uint256 managed,\\r\\n        uint256 lastChangeBlock,\\r\\n        address assetManager\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool's internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xae7589cc88d2a39410d54f6b12a9fe06a2b8fcb118837499fc2cff60ad132487\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function sync() external;\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xa0e142ca3e447d177e00432c246d5cdb3fd36d17b5035a3cb1996ceef1744f57\",\"license\":\"agpl-3.0\"},\"contracts/strategies/DystopiaExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/IDystopiaRouter.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract DystopiaExchange {\\r\\n\\r\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 4;\\r\\n\\r\\n    IDystopiaRouter private dystRouter;\\r\\n\\r\\n    function _setDystopiaRouter(address _dystRouter) internal {\\r\\n        dystRouter = IDystopiaRouter(_dystRouter);\\r\\n    }\\r\\n\\r\\n    function _swapExactTokensForTokens(\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        bool isStablePair1,\\r\\n        uint256 amountInput,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\r\\n\\r\\n        uint256 amountOutMin = _getAmountsOut(address(inputToken), address(middleToken), address(outputToken), isStablePair0, isStablePair1, amountInput);\\r\\n        // console.log(\\\"amountOutMin: \\\", amountOutMin);\\r\\n        if (amountOutMin == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\r\\n        route[0].from = inputToken;\\r\\n        route[0].to = middleToken;\\r\\n        route[0].stable = isStablePair0;\\r\\n        route[1].from = middleToken;\\r\\n        route[1].to = outputToken;\\r\\n        route[1].stable = isStablePair1;\\r\\n\\r\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            0,\\r\\n            route,\\r\\n            recipient,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    \\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function _getAmountsOut(\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        bool isStablePair1,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\r\\n        route[0].from = inputToken;\\r\\n        route[0].to = middleToken;\\r\\n        route[0].stable = isStablePair0;\\r\\n        route[1].from = middleToken;\\r\\n        route[1].to = outputToken;\\r\\n        route[1].stable = isStablePair1;\\r\\n\\r\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\r\\n\\r\\n        return amounts[2];\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\r\\n\\r\\n        IERC20(tokenA).approve(address(dystRouter), amountADesired);\\r\\n        IERC20(tokenB).approve(address(dystRouter), amountBDesired);\\r\\n\\r\\n        return dystRouter.addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            true,\\r\\n            amountADesired,\\r\\n            amountBDesired,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address lpToken,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB) {\\r\\n\\r\\n        IERC20(lpToken).approve(address(dystRouter), liquidity);\\r\\n\\r\\n        return dystRouter.removeLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            true,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0x4f63e92884164d401fe369d7af6189c5b92309c54d097b27fa1ad26a86ad3c3a\",\"license\":\"MIT\"},\"contracts/strategies/DystopiaStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Dystopia Strategy\\r\\n * @notice Investment strategy for investing stablecoins via Dystopia Strategy\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\"  ;\\r\\n\\r\\nimport { IRewardStaking } from \\\"./IRewardStaking.sol\\\";\\r\\nimport { DystopiaExchange } from \\\"./DystopiaExchange.sol\\\";\\r\\nimport { IConvexDeposits } from \\\"./IConvexDeposits.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\r\\nimport { AaveBorrowLibrary } from \\\"../utils/AaveBorrowLibrary.sol\\\";\\r\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\r\\nimport \\\"../interfaces/IDystopiaLP.sol\\\";\\r\\nimport \\\"../interfaces/ISwapper.sol\\\";\\r\\nimport \\\"../connectors/IUserProxy.sol\\\";\\r\\nimport \\\"../connectors/IPenLens.sol\\\";\\r\\nimport \\\"../exchanges/BalancerExchange.sol\\\";\\r\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\r\\nimport { OvnMath } from \\\"../utils/OvnMath.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\ncontract DystopiaStrategy is InitializableAbstractStrategy, DystopiaExchange, BalancerExchange  {\\r\\n    using StableMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(address => uint256 ) public assetToDenominator;\\r\\n\\r\\n    IDystopiaLP  public  gauge;\\r\\n    IDystopiaLP  public  dystPair;\\r\\n\\r\\n    address public  dystRouter;\\r\\n\\r\\n    bytes32 public poolId;\\r\\n\\r\\n\\r\\n    IERC20 public primaryStable;\\r\\n    IERC20 public middleToken;\\r\\n    IERC20 public token0;\\r\\n    IERC20 public token1;\\r\\n\\r\\n    IERC20 public dystToken;\\r\\n\\r\\n\\r\\n\\r\\n    IERC20 public penToken;\\r\\n    IUserProxy public userProxy;\\r\\n    IPenLens public penLens;\\r\\n\\r\\n    address public balancerVault;\\r\\n\\r\\n    /**\\r\\n     * Initializer for setting up strategy internal state. This overrides the\\r\\n     * InitializableAbstractStrategy initializer as Dystopia strategies don't fit\\r\\n     * well within that abstraction.\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress, // dystToken address\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses, // USDC\\r\\n        address[] calldata _assets, // USDC & DAI etc\\r\\n        address[] calldata _pTokens, // DystPair\\r\\n        address _primaryStable, // USDC\\r\\n        address _intermediatory_token // wMATIC\\r\\n    ) external onlyGovernor initializer {\\r\\n\\r\\n        token0 = IERC20(_assets[0]);\\r\\n        token1 = IERC20(_assets[1]);\\r\\n        primaryStable = IERC20(_primaryStable);\\r\\n        middleToken = IERC20(_intermediatory_token);\\r\\n\\r\\n        dystToken = IERC20(_platformAddress);\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assetToDenominator[_assets[i]] = 10 ** IERC20Metadata(_assets[i]).decimals();\\r\\n        }\\r\\n        super._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n    function setParams(\\r\\n        address _gauge,\\r\\n        address _dystPair,\\r\\n        address _dystRouter,\\r\\n        address _balancerVault,\\r\\n        bytes32 _poolId,// _poolIdUsdcTusdDaiUsdt\\r\\n        address _userProxy,\\r\\n        address _penLens,\\r\\n        address _penToken\\r\\n    ) external onlyGovernor {\\r\\n        balancerVault = _balancerVault;\\r\\n        poolId = _poolId;\\r\\n        gauge = IDystopiaLP(_gauge);\\r\\n        dystPair = IDystopiaLP(_dystPair);\\r\\n        _setDystopiaRouter(_dystRouter);\\r\\n        userProxy = IUserProxy(_userProxy);\\r\\n        penLens = IPenLens(_penLens);\\r\\n        penToken = IERC20(_penToken);\\r\\n    }\\r\\n\\r\\n    function getReserves() internal view returns (uint256,uint256) {\\r\\n        (uint256 reserve0, uint256 reserve1,) = dystPair.getReserves();\\r\\n        require(reserve0 > (10 ** (IERC20Metadata(address(token0) ).decimals() - 3))  && reserve1 > (10 ** (IERC20Metadata(address(token1) ).decimals() - 3)), \\\"Reserves too low\\\");\\r\\n        return (reserve0, reserve1) ;\\r\\n    }\\r\\n    // TODO: _amount is not being used.\\r\\n    function _deposit(address _asset, uint256 _amount)  internal {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        (uint256 reserve0, uint256 reserve1) = getReserves();\\r\\n        _swapPrimaryStableToToken0();\\r\\n\\r\\n        // count amount token1 to swap\\r\\n        uint256 token1Balance = token1.balanceOf(address(this));\\r\\n        uint256 amount0From1;\\r\\n        if (token1Balance > 0) {\\r\\n            amount0From1 = onSwap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                token1,\\r\\n                token0,\\r\\n                token1Balance\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 token0Balance = token0.balanceOf(address(this));\\r\\n        // console.log(\\\"token0\\\", address(token0));\\r\\n        // console.log(\\\"token1\\\", address(token1));\\r\\n        // console.log(\\\"token0Balance\\\", token0Balance);\\r\\n        // console.log(\\\"token1Balance\\\", token1Balance);\\r\\n        // console.log(\\\"reserve0\\\", reserve0);\\r\\n        // console.log(\\\"reserve1\\\", reserve1);\\r\\n        uint256 amountToken0ToSwap = _getAmountToSwap(\\r\\n            balancerVault,\\r\\n            token0Balance,\\r\\n            reserve0,\\r\\n            reserve1,\\r\\n            assetToDenominator[address(token0)],\\r\\n            assetToDenominator[address(token1)],\\r\\n            1,\\r\\n            poolId,\\r\\n            token0,\\r\\n            token1\\r\\n        );\\r\\n        // console.log(\\\"amountToken0ToSwap\\\", amountToken0ToSwap);\\r\\n        // swap some of token0 to token1\\r\\n        swap(\\r\\n            balancerVault,\\r\\n            poolId,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            IAsset(address(token0)),\\r\\n            IAsset(address(token1)),\\r\\n            address(this),\\r\\n            address(this),\\r\\n            amountToken0ToSwap,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // add liquidity\\r\\n        token0Balance = token0.balanceOf(address(this));\\r\\n        token1Balance = token1.balanceOf(address(this));\\r\\n\\r\\n        _addLiquidity(\\r\\n            address(token0),\\r\\n            address(token1),\\r\\n            token0Balance,\\r\\n            token1Balance,\\r\\n            OvnMath.subBasisPoints(token0Balance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            OvnMath.subBasisPoints(token1Balance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        uint256 lpTokenBalance = dystPair.balanceOf(address(this));\\r\\n         // console.log(\\\"Dyst LP Token Balance: \\\", lpTokenBalance);\\r\\n        _stakeToPenrose(lpTokenBalance);\\r\\n\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    )   external\\r\\n        override\\r\\n        onlyVault\\r\\n        nonReentrant {\\r\\n\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        _deposit(_asset, _amount);\\r\\n    }\\r\\n\\r\\n    function depositAll() external override onlyVault nonReentrant {\\r\\n        _deposit(address(primaryStable), primaryStable.balanceOf(address(this)));\\r\\n    }\\r\\n    function withdraw(\\r\\n        address _beneficiary,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyVault nonReentrant  {\\r\\n\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        (uint256 reserve0, uint256 reserve1) = getReserves();\\r\\n\\r\\n        // Fetch amount of penPool LP currently staked\\r\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\r\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\r\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\r\\n\\r\\n        if (lpTokenBalance > 0) {\\r\\n            // count amount to unstake\\r\\n            uint256 totalLpBalance = dystPair.totalSupply();\\r\\n            uint256 lpTokensToWithdraw = _getAmountLpTokensToWithdraw(\\r\\n                balancerVault,\\r\\n                OvnMath.addBasisPoints(_amount, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                reserve0,\\r\\n                reserve1,\\r\\n                totalLpBalance,\\r\\n                assetToDenominator[address(token0)],\\r\\n                assetToDenominator[address(token1)],\\r\\n                poolId,\\r\\n                token0,\\r\\n                token1\\r\\n            );\\r\\n\\r\\n            if (lpTokensToWithdraw > lpTokenBalance) {\\r\\n                lpTokensToWithdraw = lpTokenBalance;\\r\\n            }\\r\\n\\r\\n            userProxy.unstakeLpAndWithdraw(address(dystPair), lpTokensToWithdraw);\\r\\n            uint256 unstakedLPTokenBalance = dystPair.balanceOf(address(this));\\r\\n            // remove liquidity\\r\\n            _removeLiquidity(\\r\\n                address(token0),\\r\\n                address(token1),\\r\\n                address(dystPair),\\r\\n                unstakedLPTokenBalance,\\r\\n                OvnMath.subBasisPoints(reserve0 * unstakedLPTokenBalance / totalLpBalance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                OvnMath.subBasisPoints(reserve1 * unstakedLPTokenBalance / totalLpBalance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n        _swapAssetsToPrimaryStable();\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n         // console.log(\\\"Withdraw USDC: \\\", primaryStableBalance);\\r\\n        primaryStable.safeTransfer(_beneficiary, primaryStableBalance);\\r\\n       \\r\\n    }\\r\\n\\r\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant  {\\r\\n        (uint256 reserve0, uint256 reserve1) = getReserves();\\r\\n        _withdrawFromDystopiaAndStakeToPenrose();\\r\\n        // Fetch amount of penPool LP currently staked\\r\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\r\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\r\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\r\\n        if (lpTokenBalance == 0) {\\r\\n            return;\\r\\n        }\\r\\n        userProxy.unstakeLpAndWithdraw(address(dystPair), lpTokenBalance);\\r\\n        uint256 unstakedLPTokenBalance = dystPair.balanceOf(address(this));\\r\\n        if (unstakedLPTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = dystPair.totalSupply();\\r\\n            uint256 amountOutUsdcMin = reserve0 * unstakedLPTokenBalance / totalLpBalance;\\r\\n            uint256 amountOutOtherMin = reserve1 * unstakedLPTokenBalance / totalLpBalance;\\r\\n            // remove liquidity\\r\\n            _removeLiquidity(\\r\\n                address(token0),\\r\\n                address(token1),\\r\\n                address(dystPair),\\r\\n                unstakedLPTokenBalance,\\r\\n                OvnMath.subBasisPoints(amountOutUsdcMin, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                OvnMath.subBasisPoints(amountOutOtherMin, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _swapAssetsToPrimaryStable();\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n         // console.log(\\\"Withdraw Primary Stable: \\\", primaryStableBalance);\\r\\n        primaryStable.safeTransfer(vaultAddress, primaryStableBalance);\\r\\n        _collectRewards();\\r\\n    }\\r\\n\\r\\n\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        uint256 token0Balance = token0.balanceOf(address(this));\\r\\n        uint256 token1Balance = token1.balanceOf(address(this));\\r\\n\\r\\n        // Fetch amount of penPool LP currently staked\\r\\n        address userProxyThis = penLens.userProxyByAccount(address(this));\\r\\n         // console.log(\\\"dystPair\\\", address(dystPair));\\r\\n        address stakingAddress = penLens.stakingRewardsByDystPool(address(dystPair));\\r\\n         // console.log(\\\"stakingAddress: \\\", stakingAddress);\\r\\n        uint256 lpTokenBalance = IERC20(stakingAddress).balanceOf(userProxyThis);\\r\\n        lpTokenBalance += gauge.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = dystPair.totalSupply();\\r\\n            (uint256 reserve0, uint256 reserve1) = getReserves();\\r\\n            token0Balance += reserve0 * lpTokenBalance / totalLpBalance;\\r\\n            token1Balance += reserve1 * lpTokenBalance / totalLpBalance;\\r\\n        }\\r\\n        // console.log(\\\"tokenBalance\\\", token0Balance, token1Balance);\\r\\n\\r\\n        uint256 primaryStableBalanceFromToken0;\\r\\n        if ( (address(token0) != address(primaryStable))  ) {\\r\\n            if (token0Balance > 0) {\\r\\n                primaryStableBalanceFromToken0 = onSwap(\\r\\n                    balancerVault,\\r\\n                    poolId,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    token0,\\r\\n                    primaryStable,\\r\\n                    token0Balance\\r\\n                );\\r\\n                // console.log(\\\"Token0 swap -  primaryStableBalanceFromToken0 \\\", primaryStableBalanceFromToken0);\\r\\n            }\\r\\n        } else {\\r\\n            primaryStableBalanceFromToken0 += token0Balance;\\r\\n        }\\r\\n\\r\\n        uint256 primaryStableBalanceFromToken1;\\r\\n        if ( (address(token1) != address(primaryStable))  ) {\\r\\n            if (token1Balance > 0) {\\r\\n                primaryStableBalanceFromToken1 = onSwap(\\r\\n                    balancerVault,\\r\\n                    poolId,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    token1,\\r\\n                    primaryStable,\\r\\n                    token1Balance\\r\\n                );\\r\\n                // console.log(\\\"Token1 swap -  primaryStableBalanceFromToken1 \\\", primaryStableBalanceFromToken1);\\r\\n            }\\r\\n        } else {\\r\\n            primaryStableBalanceFromToken1 += token1Balance;\\r\\n        }\\r\\n         // console.log(\\\"primaryStableBalanceFromToken0: \\\", primaryStableBalanceFromToken0);\\r\\n         // console.log(\\\"primaryStableBalanceFromToken1: \\\", primaryStableBalanceFromToken1);\\r\\n        return primaryStableBalanceFromToken0 + primaryStableBalanceFromToken1 + primaryStableBalance;\\r\\n    }\\r\\n\\r\\n    function collectRewardTokens()\\r\\n        external\\r\\n        override\\r\\n        onlyHarvester\\r\\n        nonReentrant\\r\\n    {\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function _collectRewards() internal {\\r\\n         console.log(\\\"Starting collection of rewards\\\");\\r\\n        _withdrawFromDystopiaAndStakeToPenrose();\\r\\n\\r\\n         console.log(\\\"_withdrawFromDystopiaAndStakeToPenrose called\\\");\\r\\n        // claim rewards\\r\\n        userProxy.claimStakingRewards();\\r\\n         console.log(\\\"claimStakingRewards called\\\");\\r\\n        // sell rewards\\r\\n        uint256 totalUsdc;\\r\\n\\r\\n        uint256 dystBalance = dystToken.balanceOf(address(this));\\r\\n         console.log(\\\"dystBalance: \\\", dystBalance);\\r\\n        if (dystBalance > 0) {\\r\\n            uint256 dystUsdc = _swapExactTokensForTokens(\\r\\n                address(dystToken),\\r\\n                address(middleToken),\\r\\n                address(token0),\\r\\n                false,\\r\\n                false,\\r\\n                dystBalance,\\r\\n                address(this)\\r\\n            );\\r\\n            totalUsdc += dystUsdc;\\r\\n        }\\r\\n         console.log(\\\"totalUsdc=\\\",totalUsdc);\\r\\n        uint256 penBalance = penToken.balanceOf(address(this));\\r\\n        console.log(\\\"penBalance: \\\", penBalance);\\r\\n        if (penBalance > 0) {\\r\\n            uint256 penUsdc = _swapExactTokensForTokens(\\r\\n                address(penToken),\\r\\n                address(middleToken),\\r\\n                address(primaryStable),\\r\\n                false,\\r\\n                false,\\r\\n                penBalance,\\r\\n                address(this)\\r\\n            );\\r\\n            console.log(\\\"penUsdc\\\",penUsdc);\\r\\n            totalUsdc += penUsdc;\\r\\n        }\\r\\n        uint256 balance = primaryStable.balanceOf(address(this));\\r\\n        console.log(\\\"balance: \\\", balance);\\r\\n        emit RewardTokenCollected(\\r\\n            harvesterAddress,\\r\\n            address(primaryStable),\\r\\n            balance\\r\\n        );\\r\\n        primaryStable.transfer(harvesterAddress, balance);\\r\\n    }\\r\\n    function _withdrawFromDystopiaAndStakeToPenrose() internal {\\r\\n        uint256 lpTokenBalance = gauge.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            // claim rewards\\r\\n            address[] memory token = new address[](1);\\r\\n            token[0] = address(dystToken);\\r\\n            gauge.getReward(address(this), token);\\r\\n\\r\\n            // withdraw LP tokens and stake\\r\\n            gauge.withdrawAll();\\r\\n            // Reusing lpTokenBalance for Balance of dystPair\\r\\n            lpTokenBalance = dystPair.balanceOf(address(this));\\r\\n            dystPair.approve(address(userProxy), lpTokenBalance);\\r\\n            userProxy.depositLpAndStake(address(dystPair), lpTokenBalance);\\r\\n        }\\r\\n    }\\r\\n    function _stakeToPenrose(uint256 _lpTokenAmount) internal {\\r\\n        dystPair.approve(address(userProxy), _lpTokenAmount);\\r\\n        userProxy.depositLpAndStake(address(dystPair), _lpTokenAmount);\\r\\n        // uint256 penBalance = penToken.balanceOf(address(this));\\r\\n        // console.log(\\\"penBalance: \\\", penBalance);\\r\\n    }\\r\\n\\r\\n    function _swapAssetsToPrimaryStable() internal {\\r\\n        if ( (address(token0) != address(primaryStable)) && (token0.balanceOf(address(this)) > 0) )  {\\r\\n             // console.log(\\\"Swapping token0\\\");\\r\\n            swap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(token0)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                token0.balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        if ( (address(token1) != address(primaryStable)) && (token1.balanceOf(address(this)) > 0) )  {\\r\\n             // console.log(\\\"Swapping token1\\\");\\r\\n            swap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(token1)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                token1.balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    function _swapPrimaryStableToToken0() internal {\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        if (address(primaryStable) != address(token0)) {\\r\\n            swap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(primaryStable)),\\r\\n                IAsset(address(token0)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                primaryStableBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\r\\n     * @param _asset Address of the asset\\r\\n     */\\r\\n    function supportsAsset(address _asset)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _asset == address(primaryStable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the spending of all assets by their corresponding cToken,\\r\\n     *      if for some reason is it necessary.\\r\\n     */\\r\\n    function safeApproveAllTokens() external override {\\r\\n        // NOT NEEDED\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal method to respond to the addition of new asset / cTokens\\r\\n     *      We need to approve the cToken and give it permission to spend the asset\\r\\n     * @param _asset Address of the asset to approve\\r\\n     * @param _cToken The cToken for the approval\\r\\n     */\\r\\n    function _abstractSetPToken(address _asset, address _cToken)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        // NOT NEEDED\\r\\n    }\\r\\n   \\r\\n}\\r\\n\",\"keccak256\":\"0xe954936d44655ba2252e4f6e32bf6807b518c7e71bba489e58dd5ee6df157e22\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IConvexDeposits.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IConvexDeposits {\\r\\n    function deposit(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        bool _stake\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        bool _lock,\\r\\n        address _stakeAddress\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x34650d846228dfb9953e9241f8cafde868f948ec2fb710daa78e75027ca3cf1e\",\"license\":\"agpl-3.0\"},\"contracts/strategies/IRewardStaking.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRewardStaking {\\r\\n    function stakeFor(address, uint256) external;\\r\\n\\r\\n    function stake(uint256) external;\\r\\n\\r\\n    function withdraw(uint256 amount, bool claim) external;\\r\\n\\r\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function getReward(address _account, bool _claimExtras) external;\\r\\n\\r\\n    function extraRewardsLength() external returns (uint256);\\r\\n\\r\\n    function extraRewards(uint256 _pid) external returns (address);\\r\\n\\r\\n    function rewardToken() external returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x2aaaef2f71f0c082c650351af926653f89d9167936999d9c76c07027a036b2f1\",\"license\":\"agpl-3.0\"},\"contracts/utils/AaveBorrowLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\r\\nimport \\\"../connectors/aave/interfaces/IPriceFeed.sol\\\";\\r\\nimport \\\"../connectors/aave/interfaces/IPool.sol\\\";\\r\\nimport '../connectors/uniswap/v3/libraries/FullMath.sol';\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\nlibrary AaveBorrowLibrary {\\r\\n\\r\\n    function getAavePool(\\r\\n        address aavePoolAddressesProvider,\\r\\n        uint8 eModeCategoryId\\r\\n    ) internal returns (address aavePool) {\\r\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\r\\n        IPool(aavePool).setUserEMode(eModeCategoryId);\\r\\n    }\\r\\n\\r\\n    function getAavePool(\\r\\n        address aavePoolAddressesProvider\\r\\n    ) internal view returns (address aavePool) {\\r\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\r\\n    }\\r\\n\\r\\n    function getCollateralAndBorrowForSupplyAndBorrow(\\r\\n        uint256 amount0,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 LT,\\r\\n        uint256 HF,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 collateral0, uint256 borrow1) {\\r\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\r\\n        collateral0 = amount0 * HF / (HF + LT * reserve0 / reserve1InToken0);\\r\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\r\\n        borrow1 = collateral1 * LT / HF;\\r\\n    }\\r\\n\\r\\n    function getBorrowForWithdraw(\\r\\n        uint256 collateral0,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 LT,\\r\\n        uint256 HF,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 borrow1) {\\r\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\r\\n        //usdc to usdt\\r\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\r\\n        //usdt to usdc\\r\\n        borrow1 = (collateral1 * LT * reserve1InToken0) / (HF * reserve1InToken0 + LT * reserve0);\\r\\n    }\\r\\n\\r\\n    // function getBorrowForWithdraw(\\r\\n    //     uint256 collateral0,\\r\\n    //     uint256 totalCollateralUsd,\\r\\n    //     uint256 totalBorrowUsd,\\r\\n    //     uint256 reserve0,\\r\\n    //     uint256 reserve1,\\r\\n    //     uint256 LT,\\r\\n    //     uint256 HF,\\r\\n    //     uint256 token0Denominator,\\r\\n    //     uint256 token1Denominator,\\r\\n    //     uint256 price0,\\r\\n    //     uint256 price1\\r\\n    // ) internal pure returns (uint256 borrow1) {\\r\\n    //     uint256 totalBorrowUsd1 = convertUsdToTokenAmount(totalBorrowUsd, token1Denominator, price1);   //usd to usdt\\r\\n    //     uint256 totalCollateralUsd1 = convertUsdToTokenAmount(totalCollateralUsd, token1Denominator, price1); //usd to usdt\\r\\n    //     uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1); //usdc to usdt\\r\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0); //usdt to usdc\\r\\n    //     borrow1 = (totalBorrowUsd1 * HF + collateral1 * LT - totalCollateralUsd1 * LT) / (HF + LT * reserve0 / reserve1InToken0);\\r\\n    // }\\r\\n\\r\\n    // function getLpTokensForWithdraw(\\r\\n    //     uint256 totalLpBalance,\\r\\n    //     uint256 borrow1,\\r\\n    //     uint256 reserve0,\\r\\n    //     uint256 reserve1,\\r\\n    //     uint256 token0Denominator,\\r\\n    //     uint256 token1Denominator,\\r\\n    //     uint256 price0,\\r\\n    //     uint256 price1\\r\\n    // ) internal pure returns (uint256 lpTokensToWithdraw) {\\r\\n    //     uint256 borrow0 = convertTokenAmountToTokenAmount(borrow1, token1Denominator, token0Denominator, price1, price0);\\r\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\r\\n    //     lpTokensToWithdraw = totalLpBalance * (borrow0 + borrow1 * reserve0 / reserve1) / (reserve0 + reserve1InToken0);\\r\\n    // }\\r\\n\\r\\n    struct GetWithdrawAmountForBalanceParams {\\r\\n        uint256 totalCollateralUsd;\\r\\n        uint256 totalBorrowUsd;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 LT;\\r\\n        uint256 HF;\\r\\n        uint256 token0Denominator;\\r\\n        uint256 token1Denominator;\\r\\n        uint256 price0;\\r\\n        uint256 price1;\\r\\n    }\\r\\n\\r\\n    function getWithdrawAmountForBalance(\\r\\n        GetWithdrawAmountForBalanceParams memory params\\r\\n    ) internal pure returns (uint256 withdrawAmount) {\\r\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\r\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\r\\n        withdrawAmount = FullMath.mulDivRoundingUp(\\r\\n            params.reserve0, \\r\\n            params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF, \\r\\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getBorrowIfZeroAmountForBalance(\\r\\n        GetWithdrawAmountForBalanceParams memory params\\r\\n    ) internal pure returns (uint256 withdrawAmount) {\\r\\n        withdrawAmount = (params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF) / (params.HF);\\r\\n        withdrawAmount = convertUsdToTokenAmount(withdrawAmount, params.token1Denominator, params.price1);\\r\\n    }\\r\\n\\r\\n    struct GetLpTokensForBalanceParams {\\r\\n        uint256 totalCollateralUsd;\\r\\n        uint256 totalBorrowUsd;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 LT;\\r\\n        uint256 HF;\\r\\n        uint256 token0Denominator;\\r\\n        uint256 token1Denominator;\\r\\n        uint256 price0;\\r\\n        uint256 price1;\\r\\n        uint256 totalSuply;\\r\\n    }\\r\\n\\r\\n    function getLpTokensForBalance(\\r\\n        GetLpTokensForBalanceParams memory params\\r\\n    ) internal pure returns (uint256 lpTokens) {\\r\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\r\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\r\\n        lpTokens = FullMath.mulDivRoundingUp(\\r\\n            params.totalSuply, \\r\\n            params.totalBorrowUsd * params.HF - params.totalCollateralUsd * params.LT, \\r\\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function convertTokenAmountToTokenAmount(\\r\\n        uint256 amount0,\\r\\n        uint256 token0Denominator,\\r\\n        uint256 token1Denominator,\\r\\n        uint256 price0,\\r\\n        uint256 price1\\r\\n    ) internal pure returns (uint256 amount1) {\\r\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\r\\n    }\\r\\n\\r\\n    function convertTokenAmountToUsd(\\r\\n        uint256 amount,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amountUsd) {\\r\\n        amountUsd = amount * price / tokenDenominator;\\r\\n    }\\r\\n\\r\\n    function convertUsdToTokenAmount(\\r\\n        uint256 amountUsd,\\r\\n        uint256 tokenDenominator,\\r\\n        uint256 price\\r\\n    ) internal pure returns (uint256 amount) {\\r\\n        amount = amountUsd * tokenDenominator / price;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5bd66e07bdeb42eedf44996d1fe4f96f5bc54f3c90cf090b6fc46f6f0e3a8a70\",\"license\":\"MIT\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\r\\n\\r\\nlibrary Helpers {\\r\\n    /**\\r\\n     * @notice Fetch the `symbol()` from an ERC20 token\\r\\n     * @dev Grabs the `symbol()` from a contract\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return string Symbol of the ERC20 token\\r\\n     */\\r\\n    function getSymbol(address _token) internal view returns (string memory) {\\r\\n        string memory symbol = IBasicToken(_token).symbol();\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetch the `decimals()` from an ERC20 token\\r\\n     * @dev Grabs the `decimals()` from a contract and fails if\\r\\n     *      the decimal value does not live within a certain range\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return uint256 Decimals of the ERC20 token\\r\\n     */\\r\\n    function getDecimals(address _token) internal view returns (uint256) {\\r\\n        uint256 decimals = IBasicToken(_token).decimals();\\r\\n        require(\\r\\n            decimals >= 4 && decimals <= 18,\\r\\n            \\\"Token must have sufficient decimal places\\\"\\r\\n        );\\r\\n\\r\\n        return decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd811b2c8f5435e41200458a3853f6bacc86efe20a0daa65d8497abbf821e44fa\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event PTokenAdded(address indexed _asset, address _pToken);\\r\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\r\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event RewardTokenCollected(\\r\\n        address recipient,\\r\\n        address rewardToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event RewardTokenAddressesUpdated(\\r\\n        address[] _oldAddresses,\\r\\n        address[] _newAddresses\\r\\n    );\\r\\n    event HarvesterAddressesUpdated(\\r\\n        address _oldHarvesterAddress,\\r\\n        address _newHarvesterAddress\\r\\n    );\\r\\n    event TransferLog (\\r\\n        string _message,\\r\\n        address _asset,\\r\\n        uint256 _number\\r\\n    );\\r\\n\\r\\n    // Core address for the given platform\\r\\n    address public platformAddress;\\r\\n\\r\\n    address public vaultAddress;\\r\\n\\r\\n    // asset => pToken (Platform Specific Token Address)\\r\\n    mapping(address => address) public assetToPToken;\\r\\n\\r\\n    // Full list of all assets supported here\\r\\n    address[] internal assetsMapped;\\r\\n\\r\\n    // Deprecated: Reward token address\\r\\n    // slither-disable-next-line constable-states\\r\\n    address public _deprecated_rewardTokenAddress;\\r\\n\\r\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\r\\n    // slither-disable-next-line constable-states\\r\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\r\\n\\r\\n    // Address of the one address allowed to collect reward tokens\\r\\n    address public harvesterAddress;\\r\\n\\r\\n    // Reward token addresses\\r\\n    address[] public rewardTokenAddresses;\\r\\n    // Reserved for future expansion\\r\\n    int256[98] private _reserved;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal initialize function, to set up initial internal state\\r\\n     * @param _platformAddress Generic platform address\\r\\n     * @param _vaultAddress Address of the Vault\\r\\n     * @param _rewardTokenAddresses Address of reward token for platform\\r\\n     * @param _assets Addresses of initial supported assets\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] calldata _assets,\\r\\n        address[] calldata _pTokens\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableAbstractStrategy._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] memory _assets,\\r\\n        address[] memory _pTokens\\r\\n    ) internal {\\r\\n        platformAddress = _platformAddress;\\r\\n        vaultAddress = _vaultAddress;\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Collect accumulated reward token and send to Vault.\\r\\n     */\\r\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\r\\n        _collectRewardTokens();\\r\\n    }\\r\\n\\r\\n    function _collectRewardTokens() internal {\\r\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\r\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\r\\n            uint256 balance = rewardToken.balanceOf(address(this));\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                rewardTokenAddresses[i],\\r\\n                balance\\r\\n            );\\r\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault.\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Harvester.\\r\\n     */\\r\\n    modifier onlyHarvester() {\\r\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault or Governor.\\r\\n     */\\r\\n    modifier onlyVaultOrGovernor() {\\r\\n        require(\\r\\n            msg.sender == vaultAddress || msg.sender == governor(),\\r\\n            \\\"Caller is not the Vault or Governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _rewardTokenAddresses Address array of the reward token\\r\\n     */\\r\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\r\\n            require(\\r\\n                _rewardTokenAddresses[i] != address(0),\\r\\n                \\\"Can not set an empty address as a reward token\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RewardTokenAddressesUpdated(\\r\\n            rewardTokenAddresses,\\r\\n            _rewardTokenAddresses\\r\\n        );\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the reward token addresses.\\r\\n     * @return address[] the reward token addresses.\\r\\n     */\\r\\n    function getRewardTokenAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function setPTokenAddress(address _asset, address _pToken)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setPTokenAddress(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a supported asset by passing its index.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _assetIndex Index of the asset to be removed\\r\\n     */\\r\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\r\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\r\\n        address asset = assetsMapped[_assetIndex];\\r\\n        address pToken = assetToPToken[asset];\\r\\n\\r\\n        if (_assetIndex < assetsMapped.length - 1) {\\r\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\r\\n        }\\r\\n        assetsMapped.pop();\\r\\n        assetToPToken[asset] = address(0);\\r\\n\\r\\n        emit PTokenRemoved(asset, pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      Add to internal mappings and execute the platform specific,\\r\\n     * abstract method `_abstractSetPToken`\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\r\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\r\\n        require(\\r\\n            _asset != address(0) && _pToken != address(0),\\r\\n            \\\"Invalid addresses\\\"\\r\\n        );\\r\\n\\r\\n        assetToPToken[_asset] = _pToken;\\r\\n        assetsMapped.push(_asset);\\r\\n\\r\\n        emit PTokenAdded(_asset, _pToken);\\r\\n\\r\\n        _abstractSetPToken(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      strategy contracts, i.e. mistaken sends.\\r\\n     * @param _asset Address for the asset\\r\\n     * @param _amount Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address _asset, uint256 _amount)\\r\\n        public\\r\\n        onlyGovernor\\r\\n    {\\r\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _harvesterAddress Address of the harvester\\r\\n     */\\r\\n    function setHarvesterAddress(address _harvesterAddress)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        harvesterAddress = _harvesterAddress;\\r\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                 Abstract\\r\\n    ****************************************/\\r\\n\\r\\n    function _abstractSetPToken(address _asset, address _pToken)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    function safeApproveAllTokens() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit an amount of asset into the platform\\r\\n     * @param _asset               Address for the asset\\r\\n     * @param _amount              Units of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit balance of all supported assets into the platform\\r\\n     */\\r\\n    function depositAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an amount of asset from the platform.\\r\\n     * @param _recipient         Address to which the asset should be sent\\r\\n     * @param _asset             Address of the asset\\r\\n     * @param _amount            Units of asset to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\r\\n     */\\r\\n    function withdrawAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total primary stable value held in the platform.\\r\\n     *      This includes any interest that was generated since depositing.\\r\\n     * @return balance    Total value of the asset in the platform\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an asset is supported.\\r\\n     * @param _asset    Address of the asset\\r\\n     * @return bool     Whether asset is supported\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x232664a78773fffce1d3f7cf05c43d7a08c81966ace4ce55fcfceaa2555589a5\",\"license\":\"agpl-3.0\"},\"contracts/utils/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x72976e446429837ea5cf2b52b6a9b8e0dbf2790e52b1c0d218103cb08daf2a2e\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200002a3360008051602062005ff783398151915255565b60008051602062005ff7833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a3615f7580620000826000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80638b2ddd141161015c578063c7af3352116100ce578063de5f626811610087578063de5f626814610587578063e54bef751461058f578063f664b3d9146105a3578063f6ca71b0146105ab578063f817bc63146105c0578063f9759518146105c957600080fd5b8063c7af33521461051e578063d21220a714610526578063d2f248931461053a578063d38bfff41461054e578063d9caed1214610561578063dbe55e561461057457600080fd5b8063aa388af611610120578063aa388af6146104a9578063ad1728cb14610312578063b0492aa5146104dc578063b3bba24d146104f0578063c2e1e3f414610503578063c71daccb1461051657600080fd5b80638b2ddd14146104485780639136616a1461045c5780639688d2fc1461046f57806396d538bb14610482578063a6f19c841461049557600080fd5b8063430bf08a116101f55780635d85786d116101b95780635d85786d146103df5780635f8cddfe146103f357806367c7066c146104075780637b2d9b2c1461041a5780637e2d3a151461042d578063853828b61461044057600080fd5b8063430bf08a1461039557806345fb5007146103a857806347e7ef24146103bc5780635a063f63146103cf5780635d36b190146103d757600080fd5b80630fc3b4c4116102475780630fc3b4c4146103145780631072cbea1461033d578063158274a5146103505780632e655201146103645780633e0dc34e146103775780633ec632161461038157600080fd5b8063063bde24146102845780630b7132cf146102aa5780630c340a24146102cb5780630dfe1681146102eb5780630ed57b3a146102ff575b600080fd5b6102976b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b6102976102b8366004615052565b6101006020526000908152604090205481565b6102d36105d7565b6040516001600160a01b0390911681526020016102a1565b610107546102d3906001600160a01b031681565b61031261030d36600461508c565b6105f4565b005b6102d3610322366004615052565b6035602052600090815260409020546001600160a01b031681565b61031261034b366004615378565b61062f565b61010d546102d3906001600160a01b031681565b6037546102d3906001600160a01b031681565b6102976101045481565b61010b546102d3906001600160a01b031681565b6034546102d3906001600160a01b031681565b610106546102d3906001600160a01b031681565b6103126103ca366004615378565b61066f565b610312610710565b6103126107af565b610103546102d3906001600160a01b031681565b610102546102d3906001600160a01b031681565b6039546102d3906001600160a01b031681565b6102d361042836600461556a565b610855565b61031261043b366004615224565b61087f565b610312610ba5565b61010c546102d3906001600160a01b031681565b61031261046a36600461556a565b6110b3565b61031261047d366004615165565b61127e565b6103126104903660046153a4565b611387565b610101546102d3906001600160a01b031681565b6104cc6104b7366004615052565b610105546001600160a01b0391821691161490565b60405190151581526020016102a1565b610109546102d3906001600160a01b031681565b6103126104fe3660046150c5565b6114ad565b610312610511366004615052565b61156b565b6102976115ea565b6104cc611b4c565b610108546102d3906001600160a01b031681565b610105546102d3906001600160a01b031681565b61031261055c366004615052565b611b7d565b61031261056f366004615304565b611c21565b6033546102d3906001600160a01b031681565b610312612156565b61010a546102d3906001600160a01b031681565b610297600481565b6105b361223b565b6040516102a191906157fb565b61029760385481565b610297662386f26fc1000081565b60006105ef600080516020615ef38339815191525490565b905090565b6105fc611b4c565b6106215760405162461bcd60e51b81526004016106189061599d565b60405180910390fd5b61062b828261229d565b5050565b610637611b4c565b6106535760405162461bcd60e51b81526004016106189061599d565b61062b61065e6105d7565b6001600160a01b03841690836123fc565b6034546001600160a01b031633146106995760405162461bcd60e51b815260040161061890615966565b600080516020615ed3833981519152805460028114156106cb5760405162461bcd60e51b815260040161061890615a50565b60028255610105546001600160a01b038581169116146106fd5760405162461bcd60e51b815260040161061890615a22565b6107078484612452565b50600190555050565b6039546001600160a01b0316331461076a5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610618565b600080516020615ed38339815191528054600281141561079c5760405162461bcd60e51b815260040161061890615a50565b600282556107a8612816565b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b03161461084a5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610618565b61085333612ceb565b565b603a818154811061086557600080fd5b6000918252602090912001546001600160a01b0316905081565b610887611b4c565b6108a35760405162461bcd60e51b81526004016106189061599d565b600054610100900460ff16806108bc575060005460ff16155b6108d85760405162461bcd60e51b8152600401610618906159d4565b600054610100900460ff161580156108fa576000805461ffff19166101011790555b8686600081811061090d5761090d615e91565b90506020020160208101906109229190615052565b61010780546001600160a01b0319166001600160a01b03929092169190911790558686600181811061095657610956615e91565b905060200201602081019061096b9190615052565b61010880546001600160a01b03199081166001600160a01b039384161790915561010580548216868416179055610106805482168584161790556101098054909116918d16919091179055858481146109fd5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610618565b60005b81811015610b0257888882818110610a1a57610a1a615e91565b9050602002016020810190610a2f9190615052565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906155ee565b610aaa90600a615ce0565b61010060008b8b85818110610ac157610ac1615e91565b9050602002016020810190610ad69190615052565b6001600160a01b0316815260208101919091526040016000205580610afa81615e14565b915050610a00565b50610b858c8c8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612daf92505050565b508015610b98576000805461ff00191690555b5050505050505050505050565b6034546001600160a01b0316331480610bd65750610bc16105d7565b6001600160a01b0316336001600160a01b0316145b610c2e5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610618565b600080516020615ed383398151915280546002811415610c605760405162461bcd60e51b815260040161061890615a50565b60028255600080610c6f612e98565b91509150610c7b6130c1565b61010c54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b158015610cc057600080fd5b505afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf8919061506f565b61010c546101025460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061506f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190615583565b905080610e0f5750505050506107a8565b61010b546101025460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992610e479291169085906004016157e2565b600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b5050610102546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190615583565b90508015610ff75761010254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190615583565b9050600081610f8d848a615d8b565b610f979190615c7b565b9050600082610fa6858a615d8b565b610fb09190615c7b565b610107546101085461010254929350610ff1926001600160a01b0392831692918216911687610fe08760046133db565b610feb8760046133db565b30613407565b50505050505b610fff613576565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190615583565b6034546101055491925061109d916001600160a01b039081169116836123fc565b6110a5612816565b505050505050505060019055565b6110bb611b4c565b6110d75760405162461bcd60e51b81526004016106189061599d565b60365481106111185760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610618565b60006036828154811061112d5761112d615e91565b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169061116a90600190615daa565b8310156111ec576036805461118190600190615daa565b8154811061119157611191615e91565b600091825260209091200154603680546001600160a01b0390921691859081106111bd576111bd615e91565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60368054806111fd576111fd615e7b565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b611286611b4c565b6112a25760405162461bcd60e51b81526004016106189061599d565b600054610100900460ff16806112bb575060005460ff16155b6112d75760405162461bcd60e51b8152600401610618906159d4565b600054610100900460ff161580156112f9576000805461ffff19166101011790555b61136a8989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612daf92505050565b801561137c576000805461ff00191690555b505050505050505050565b61138f611b4c565b6113ab5760405162461bcd60e51b81526004016106189061599d565b60005b8181101561145f5760008383838181106113ca576113ca615e91565b90506020020160208101906113df9190615052565b6001600160a01b0316141561144d5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610618565b8061145781615e14565b9150506113ae565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a83836040516114949392919061580e565b60405180910390a16114a8603a8383614ef5565b505050565b6114b5611b4c565b6114d15760405162461bcd60e51b81526004016106189061599d565b61010d80546001600160a01b03199081166001600160a01b0388811691909117909255610104869055610101805482168b8416179055610102805482168a8416179055609d805490911691881691909117905561010b80546001600160a01b039485166001600160a01b03199182161790915561010c80549385169382169390931790925561010a80549190931691161790555050505050565b611573611b4c565b61158f5760405162461bcd60e51b81526004016106189061599d565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b610105546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b9190615583565b610107546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156116b557600080fd5b505afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190615583565b610108546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561173757600080fd5b505afa15801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f9190615583565b61010c54604051636f4ba70b60e11b81523060048201529192506000916001600160a01b039091169063de974e169060240160206040518083038186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f1919061506f565b61010c546101025460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b15801561184057600080fd5b505afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611878919061506f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b1580156118bf57600080fd5b505afa1580156118d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f79190615583565b610101546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119749190615583565b61197e9082615c63565b90508015611a5c5761010254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156119cc57600080fd5b505afa1580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a049190615583565b9050600080611a11612e98565b909250905082611a218584615d8b565b611a2b9190615c7b565b611a359089615c63565b975082611a428583615d8b565b611a4c9190615c7b565b611a569088615c63565b96505050505b61010554610107546000916001600160a01b03918216911614611ab6578515611ab15761010d54610104546101075461010554611aae936001600160a01b03908116939260009290821691168b6137b5565b90505b611ac3565b611ac08682615c63565b90505b61010554610108546000916001600160a01b03918216911614611b1d578515611b185761010d54610104546101085461010554611b15936001600160a01b03908116939260009290821691168b6137b5565b90505b611b2a565b611b278682615c63565b90505b87611b358284615c63565b611b3f9190615c63565b9850505050505050505090565b6000611b64600080516020615ef38339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611b85611b4c565b611ba15760405162461bcd60e51b81526004016106189061599d565b611bc9817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b0316611be9600080516020615ef38339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b03163314611c4b5760405162461bcd60e51b815260040161061890615966565b600080516020615ed383398151915280546002811415611c7d5760405162461bcd60e51b815260040161061890615a50565b60028255610105546001600160a01b03858116911614611caf5760405162461bcd60e51b815260040161061890615a22565b600080611cba612e98565b61010c54604051636f4ba70b60e11b81523060048201529294509092506000916001600160a01b039091169063de974e169060240160206040518083038186803b158015611d0757600080fd5b505afa158015611d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f919061506f565b61010c546101025460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b158015611d8e57600080fd5b505afa158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc6919061506f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e459190615583565b905080156120a55761010254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611e9357600080fd5b505afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb9190615583565b61010d54909150600090611f2d906001600160a01b0316611eed8c6004613c96565b610107546001600160a01b03908116600081815261010060205260408082205461010854909416808352912054610104548e948e948b9491939291613ca5565b905082811115611f3a5750815b61010b546101025460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992611f729291169085906004016157e2565b600060405180830381600087803b158015611f8c57600080fd5b505af1158015611fa0573d6000803e3d6000fd5b5050610102546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015611feb57600080fd5b505afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120239190615583565b905061209f61010760009054906101000a90046001600160a01b031661010860009054906101000a90046001600160a01b031661010260009054906101000a90046001600160a01b03168461208f88878f61207e9190615d8b565b6120889190615c7b565b60046133db565b610feb89888f61207e9190615d8b565b50505050505b6120ad613576565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156120f257600080fd5b505afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a9190615583565b61010554909150612145906001600160a01b03168c836123fc565b505050505050600182555050505050565b6034546001600160a01b031633146121805760405162461bcd60e51b815260040161061890615966565b600080516020615ed3833981519152805460028114156121b25760405162461bcd60e51b815260040161061890615a50565b60028255610105546040516370a0823160e01b81523060048201526107a8916001600160a01b03169081906370a082319060240160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122369190615583565b612452565b6060603a80548060200260200160405190810160405280929190818152602001828054801561229357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612275575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156122fa5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610618565b6001600160a01b0382161580159061231a57506001600160a01b03811615155b61235a5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610618565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b6114a88363a9059cbb60e01b848460405160240161241b9291906157e2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d85565b610105546001600160a01b038381169116146124805760405162461bcd60e51b815260040161061890615a22565b60008061248b612e98565b91509150612497613e57565b610108546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156124dc57600080fd5b505afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125149190615583565b9050600081156125505761010d5461010454610108546101075461254d936001600160a01b0390811693926000929082169116876137b5565b90505b610107546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561259557600080fd5b505afa1580156125a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cd9190615583565b61010d54610107546001600160a01b0390811660008181526101006020526040808220546101085485168084529183205461010454979850929661262296959095169488948d948d9490926001929091613f23565b61010d54610104546101075461010854939450612655936001600160a01b03938416936000928116911630808885614032565b50610107546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d29190615583565b610108546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a082319060240160206040518083038186803b15801561271757600080fd5b505afa15801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f9190615583565b6101075461010854919550612789916001600160a01b03918216911684876127788260046133db565b6127838a60046133db565b306143b2565b5050610102546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b1580156127d357600080fd5b505afa1580156127e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280b9190615583565b905061137c816145b3565b6128546040518060400160405280601e81526020017f5374617274696e6720636f6c6c656374696f6e206f66207265776172647300008152506146a4565b61285c6130c1565b61287d6040518060600160405280602d8152602001615f13602d91396146a4565b61010b60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156128ce57600080fd5b505af11580156128e2573d6000803e3d6000fd5b505050506129246040518060400160405280601a81526020017f636c61696d5374616b696e67526577617264732063616c6c65640000000000008152506146a4565b610109546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561296d57600080fd5b505afa158015612981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a59190615583565b90506129d66040518060400160405280600d81526020016c0323cb9ba2130b630b731b29d1609d1b815250826146e7565b8015612a1957610109546101065461010754600092612a09926001600160a01b039182169290821691168480873061472c565b9050612a158184615c63565b9250505b612a456040518060400160405280600a815260200169746f74616c557364633d60b01b815250836146e7565b61010a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612a8a57600080fd5b505afa158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac29190615583565b9050612af26040518060400160405280600c81526020016b03832b72130b630b731b29d160a51b815250826146e7565b8015612b5e5761010a546101065461010554600092612b25926001600160a01b039182169290821691168480873061472c565b9050612b506040518060400160405280600781526020016670656e5573646360c81b815250826146e7565b612b5a8185615c63565b9350505b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612ba357600080fd5b505afa158015612bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdb9190615583565b9050612c086040518060400160405280600981526020016803130b630b731b29d160bd1b815250826146e7565b60395461010554604080516001600160a01b03938416815292909116602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a16101055460395460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612c929291169085906004016157e2565b602060405180830381600087803b158015612cac57600080fd5b505af1158015612cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce491906154f8565b5050505050565b6001600160a01b038116612d415760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610618565b806001600160a01b0316612d61600080516020615ef38339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612dac81600080516020615ef383398151915255565b50565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612deb603a8585614ef5565b50815181518114612e355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610618565b60005b81811015612e8e57612e7c848281518110612e5557612e55615e91565b6020026020010151848381518110612e6f57612e6f615e91565b602002602001015161229d565b80612e8681615e14565b915050612e38565b5050505050505050565b60008060008061010260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612eed57600080fd5b505afa158015612f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f25919061551a565b506001600160701b031691506001600160701b03169150600361010760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8d57600080fd5b505afa158015612fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc591906155ee565b612fcf9190615dc1565b612fda90600a615ce0565b821180156130795750610108546040805163313ce56760e01b815290516003926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561302957600080fd5b505afa15801561303d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306191906155ee565b61306b9190615dc1565b61307690600a615ce0565b81115b6130b85760405162461bcd60e51b815260206004820152601060248201526f526573657276657320746f6f206c6f7760801b6044820152606401610618565b90939092509050565b610101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561310657600080fd5b505afa15801561311a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313e9190615583565b90508015612dac576040805160018082528183019092526000916020808301908036833750506101095482519293506001600160a01b03169183915060009061318957613189615e91565b6001600160a01b039283166020918202929092010152610101546040516331279d3d60e01b81529116906331279d3d906131c990309085906004016157be565b600060405180830381600087803b1580156131e357600080fd5b505af11580156131f7573d6000803e3d6000fd5b5050505061010160009054906101000a90046001600160a01b03166001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b5050610102546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b1580156132a857600080fd5b505afa1580156132bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e09190615583565b6101025461010b5460405163095ea7b360e01b81529294506001600160a01b039182169263095ea7b39261331a92169086906004016157e2565b602060405180830381600087803b15801561333457600080fd5b505af1158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c91906154f8565b5061010b54610102546040516351b3839960e11b81526001600160a01b039283169263a3670732926133a59291169086906004016157e2565b600060405180830381600087803b1580156133bf57600080fd5b505af11580156133d3573d6000803e3d6000fd5b505050505050565b60006127106133ea8382615daa565b6133f49085615d8b565b6133fe9190615c7b565b90505b92915050565b609d5460405163095ea7b360e01b815260009182916001600160a01b038981169263095ea7b39261344092909116908a906004016157e2565b602060405180830381600087803b15801561345a57600080fd5b505af115801561346e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349291906154f8565b50609d546001600160a01b0316630dede6c48a8a60018a8a8a8a6134b842610258615c63565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613566919061559c565b9150915097509795505050505050565b61010554610107546001600160a01b039081169116148015906136135750610107546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156135d957600080fd5b505afa1580156135ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136119190615583565b115b156136c05761010d546101045461010754610105546040516370a0823160e01b815230600482018190526136be956001600160a01b0390811695946000949082169391169190819084906370a08231906024015b60206040518083038186803b15801561367f57600080fd5b505afa158015613693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b79190615583565b6000614032565b505b61010554610108546001600160a01b0390811691161480159061375d5750610108546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561372357600080fd5b505afa158015613737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375b9190615583565b115b156108535761010d546101045461010854610105546040516370a0823160e01b81523060048201819052612dac956001600160a01b0390811695946000949082169391169190819084906370a0823190602401613667565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082015287908087600181111561381157613811615e65565b9081600181111561382457613824615e65565b9052506001600160a01b0386811660208301528581166040808401919091526060830186905251631f29a8cd60e31b8152600481018a905260009182919085169063f94d46689060240160006040518083038186803b15801561388657600080fd5b505afa15801561389a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138c291908101906153e6565b5091509150600080856001600160a01b031663f6c009278d6040518263ffffffff1660e01b81526004016138f891815260200190565b604080518083038186803b15801561390f57600080fd5b505afa158015613923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139479190615345565b9092509050600081600281111561396057613960615e65565b1415613a995760008060005b86518160ff161015613a08578c6001600160a01b0316878260ff168151811061399757613997615e91565b60200260200101516001600160a01b031614156139b9578060ff1692506139f6565b8b6001600160a01b0316878260ff16815181106139d8576139d8615e91565b60200260200101516001600160a01b031614156139f6578060ff1691505b80613a0081615e2f565b91505061396c565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a90613a3a908a90899087908790600401615b33565b60206040518083038186803b158015613a5257600080fd5b505afa158015613a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8a9190615583565b98505050505050505050613c8c565b6001816002811115613aad57613aad615e65565b1415613bb85760008060005b86518160ff161015613b87578c6001600160a01b0316878260ff1681518110613ae457613ae4615e91565b60200260200101516001600160a01b03161415613b1f57858160ff1681518110613b1057613b10615e91565b60200260200101519250613b75565b8b6001600160a01b0316878260ff1681518110613b3e57613b3e615e91565b60200260200101516001600160a01b03161415613b7557858160ff1681518110613b6a57613b6a615e91565b602002602001015191505b80613b7f81615e2f565b915050613ab9565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c90613a3a908a9086908690600401615b94565b60008060005b86518160ff161015613b87578c6001600160a01b0316878260ff1681518110613be957613be9615e91565b60200260200101516001600160a01b03161415613c2457858160ff1681518110613c1557613c15615e91565b60200260200101519250613c7a565b8b6001600160a01b0316878260ff1681518110613c4357613c43615e91565b60200260200101516001600160a01b03161415613c7a57858160ff1681518110613c6f57613c6f615e91565b602002602001015191505b80613c8481615e2f565b915050613bbe565b9695505050505050565b60006127106133ea8382615c63565b600080613cb2878a615d8b565b613cbc878c615d8b565b613cc69190615c63565b86613cd18d8b615d8b565b613cdb9190615d8b565b613ce59190615c7b565b905060005b6001811015613d7557600089613d00848d615d8b565b613d0a9190615c7b565b90506000613d1d8f896000898b876137b5565b9050613d29818d615d8b565b613d33838f615d8b565b613d3d9190615c63565b828f8d613d4a9190615d8b565b613d549190615d8b565b613d5e9190615c7b565b935050508080613d6d90615e14565b915050613cea565b509b9a5050505050505050505050565b6000613dda826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a169092919063ffffffff16565b8051909150156114a85780806020019051810190613df891906154f8565b6114a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610618565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015613e9c57600080fd5b505afa158015613eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed49190615583565b61010754610105549192506001600160a01b03918216911614612dac5761010d5461010454610105546101075461062b936001600160a01b039081169392600092908216911630808885614032565b60008a818989613f338a8e615d8b565b613f3d9190615c7b565b613f479190615c63565b613f518b8e615d8b565b613f5b9190615c7b565b9050613f8c6040518060400160405280600d81526020016c0616d6f756e7430546f5377617609c1b815250826146e7565b60005b8781101561402157613fc06040518060400160405280600681526020016506f6e537761760d41b8152508787614a2f565b6000613fd18f8960008a8a886137b5565b90508b83828f613fe19190615d8b565b613feb9190615c7b565b613ff59190615c63565b8c8f6140019190615d8b565b61400b9190615c7b565b925050808061401990615e14565b915050613f8f565b509c9b505050505050505050505050565b6000808a90506140736040518060400160405280601981526020017842616c616e6365725661756c743a207377617070696e67203160381b81525082614a76565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b815230600482015261412491908a906001600160a01b038216906370a082319060240160206040518083038186803b1580156140e757600080fd5b505afa1580156140fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411f9190615583565b614abb565b6040516370a0823160e01b81523060048201526001600160a01b0389169063095ea7b390839083906370a082319060240160206040518083038186803b15801561416d57600080fd5b505afa158015614181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a59190615583565b6040518363ffffffff1660e01b81526004016141c29291906157e2565b602060405180830381600087803b1580156141dc57600080fd5b505af11580156141f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061421491906154f8565b5082614250576142288b8b8b8b8b896137b5565b925061424d614246662386f26fc10000670de0b6b3a7640000615daa565b8490614b02565b92505b61429c6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b8a8152602081018a60018111156142b5576142b5615e65565b908160018111156142c8576142c8615e65565b9052506001600160a01b03898116604083810191909152898216606080850191909152608080850189905282519081018352600060208201819052918101919091528983168152888316918101919091529083166352bbbe2983838861433042610258615c63565b6040518563ffffffff1660e01b815260040161434f9493929190615a78565b602060405180830381600087803b15801561436957600080fd5b505af115801561437d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a19190615583565b9d9c50505050505050505050505050565b609d5460405163095ea7b360e01b8152600091829182916001600160a01b03808d169263095ea7b3926143eb9216908c906004016157e2565b602060405180830381600087803b15801561440557600080fd5b505af1158015614419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443d91906154f8565b50609d5460405163095ea7b360e01b81526001600160a01b038b81169263095ea7b39261447292909116908b906004016157e2565b602060405180830381600087803b15801561448c57600080fd5b505af11580156144a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c491906154f8565b50609d546001600160a01b0316635a47ddc38b8b60018c8c8c8c8c6144eb42610258615c63565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b15801561456857600080fd5b505af115801561457c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a091906155c0565b9250925092509750975097945050505050565b6101025461010b5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926145eb9291169085906004016157e2565b602060405180830381600087803b15801561460557600080fd5b505af1158015614619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061463d91906154f8565b5061010b54610102546040516351b3839960e11b81526001600160a01b039283169263a3670732926146769291169085906004016157e2565b600060405180830381600087803b15801561469057600080fd5b505af1158015612ce4573d6000803e3d6000fd5b612dac816040516024016146b891906158a6565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614b17565b61062b82826040516024016146fd929190615944565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614b17565b609d5460405163095ea7b360e01b81526000916001600160a01b03808b169263095ea7b39261476192169087906004016157e2565b602060405180830381600087803b15801561477b57600080fd5b505af115801561478f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147b391906154f8565b5060006147c4898989898989614b38565b9050806147d5576000915050614a0b565b60408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816147ed579050509050898160008151811061483057614830615e91565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050888160008151811061486857614868615e91565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106148a0576148a0615e91565b6020026020010151604001901515908115158152505088816001815181106148ca576148ca615e91565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061490257614902615e91565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160018151811061493a5761493a615e91565b6020908102919091010151901515604090910152609d546000906001600160a01b031663f41766d88783858961497242610258615c63565b6040518663ffffffff1660e01b8152600401614992959493929190615bd2565b600060405180830381600087803b1580156149ac57600080fd5b505af11580156149c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526149e891908101906154bb565b9050806002815181106149fd576149fd615e91565b602002602001015193505050505b979650505050505050565b6060614a258484600085614d65565b90505b9392505050565b6114a8838383604051602401614a47939291906158e3565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052614b17565b61062b8282604051602401614a8c9291906158b9565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614b17565b6114a8838383604051602401614ad393929190615916565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052614b17565b60006133fe8383670de0b6b3a7640000614e82565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181614b535790505090508781600081518110614b9657614b96615e91565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110614bce57614bce615e91565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110614c0657614c06615e91565b602002602001015160400190151590811515815250508681600181518110614c3057614c30615e91565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508581600181518110614c6857614c68615e91565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600181518110614ca057614ca0615e91565b6020908102919091010151901515604091820152609d5490516326207f2d60e21b81526000916001600160a01b031690639881fcb490614ce69087908690600401615bb9565b60006040518083038186803b158015614cfe57600080fd5b505afa158015614d12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614d3a91908101906154bb565b905080600281518110614d4f57614d4f615e91565b6020026020010151925050509695505050505050565b606082471015614dc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610618565b843b614e145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610618565b600080866001600160a01b03168587604051614e3091906157a2565b60006040518083038185875af1925050503d8060008114614e6d576040519150601f19603f3d011682016040523d82523d6000602084013e614e72565b606091505b5091509150614a0b828286614ea4565b600080614e8f8585614edd565b9050614e9b8184614ee9565b95945050505050565b60608315614eb3575081614a28565b825115614ec35782518084602001fd5b8160405162461bcd60e51b815260040161061891906158a6565b60006133fe8284615d8b565b60006133fe8284615c7b565b828054828255906000526020600020908101928215614f48579160200282015b82811115614f485781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614f15565b50614f54929150614f58565b5090565b5b80821115614f545760008155600101614f59565b8035614f7881615ebd565b919050565b60008083601f840112614f8f57600080fd5b50813567ffffffffffffffff811115614fa757600080fd5b6020830191508360208260051b8501011115614fc257600080fd5b9250929050565b600082601f830112614fda57600080fd5b81516020614fef614fea83615c3f565b615c0e565b80838252828201915082860187848660051b890101111561500f57600080fd5b60005b8581101561502e57815184529284019290840190600101615012565b5090979650505050505050565b80516001600160701b0381168114614f7857600080fd5b60006020828403121561506457600080fd5b8135614a2881615ebd565b60006020828403121561508157600080fd5b8151614a2881615ebd565b6000806040838503121561509f57600080fd5b82356150aa81615ebd565b915060208301356150ba81615ebd565b809150509250929050565b600080600080600080600080610100898b0312156150e257600080fd5b88356150ed81615ebd565b975060208901356150fd81615ebd565b9650604089013561510d81615ebd565b9550606089013561511d81615ebd565b94506080890135935060a089013561513481615ebd565b925060c089013561514481615ebd565b915060e089013561515481615ebd565b809150509295985092959890939650565b60008060008060008060008060a0898b03121561518157600080fd5b883561518c81615ebd565b9750602089013561519c81615ebd565b9650604089013567ffffffffffffffff808211156151b957600080fd5b6151c58c838d01614f7d565b909850965060608b01359150808211156151de57600080fd5b6151ea8c838d01614f7d565b909650945060808b013591508082111561520357600080fd5b506152108b828c01614f7d565b999c989b5096995094979396929594505050565b60008060008060008060008060008060e08b8d03121561524357600080fd5b8a3561524e81615ebd565b995060208b013561525e81615ebd565b985060408b013567ffffffffffffffff8082111561527b57600080fd5b6152878e838f01614f7d565b909a50985060608d01359150808211156152a057600080fd5b6152ac8e838f01614f7d565b909850965060808d01359150808211156152c557600080fd5b506152d28d828e01614f7d565b90955093506152e5905060a08c01614f6d565b91506152f360c08c01614f6d565b90509295989b9194979a5092959850565b60008060006060848603121561531957600080fd5b833561532481615ebd565b9250602084013561533481615ebd565b929592945050506040919091013590565b6000806040838503121561535857600080fd5b825161536381615ebd565b6020840151909250600381106150ba57600080fd5b6000806040838503121561538b57600080fd5b823561539681615ebd565b946020939093013593505050565b600080602083850312156153b757600080fd5b823567ffffffffffffffff8111156153ce57600080fd5b6153da85828601614f7d565b90969095509350505050565b6000806000606084860312156153fb57600080fd5b835167ffffffffffffffff8082111561541357600080fd5b818601915086601f83011261542757600080fd5b81516020615437614fea83615c3f565b8083825282820191508286018b848660051b890101111561545757600080fd5b600096505b8487101561548357805161546f81615ebd565b83526001969096019591830191830161545c565b509189015191975090935050508082111561549d57600080fd5b506154aa86828701614fc9565b925050604084015190509250925092565b6000602082840312156154cd57600080fd5b815167ffffffffffffffff8111156154e457600080fd5b6154f084828501614fc9565b949350505050565b60006020828403121561550a57600080fd5b81518015158114614a2857600080fd5b60008060006060848603121561552f57600080fd5b6155388461503b565b92506155466020850161503b565b9150604084015163ffffffff8116811461555f57600080fd5b809150509250925092565b60006020828403121561557c57600080fd5b5035919050565b60006020828403121561559557600080fd5b5051919050565b600080604083850312156155af57600080fd5b505080516020909101519092909150565b6000806000606084860312156155d557600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561560057600080fd5b815160ff81168114614a2857600080fd5b600081518084526020808501945080840160005b8381101561564a5781516001600160a01b031687529582019590820190600101615625565b509495945050505050565b600081518084526020808501945080840160005b8381101561564a57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101615669565b600081518084526156c1816020860160208601615de4565b601f01601f19169290920160200192915050565b600281106156f357634e487b7160e01b600052602160045260246000fd5b9052565b60006101206157078484516156d5565b6020838101516001600160a01b03169085015260408084015190615735908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c083015161576e60c08601826001600160a01b03169052565b5060e083015161578960e08601826001600160a01b03169052565b50610100808401518282870152613c8c838701826156a9565b600082516157b4818460208701615de4565b9190910192915050565b6001600160a01b0383168152604060208201819052600090614a2590830184615611565b6001600160a01b03929092168252602082015260400190565b6020815260006133fe6020830184615611565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156158585781546001600160a01b031684529284019260019182019101615833565b505050838103828501528481528590820160005b8681101561589a57823561587f81615ebd565b6001600160a01b03168252918301919083019060010161586c565b50979650505050505050565b6020815260006133fe60208301846156a9565b6040815260006158cc60408301856156a9565b905060018060a01b03831660208301529392505050565b6060815260006158f660608301866156a9565b6001600160a01b0394851660208401529290931660409091015292915050565b60608152600061592960608301866156a9565b6001600160a01b039490941660208301525060400152919050565b60408152600061595760408301856156a9565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60e08152845160e082015260006020860151615a986101008401826156d5565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615ae16101a08401826156a9565b915050615b21602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000615b4660808301876156f7565b82810360208481019190915286518083528782019282019060005b81811015615b7d57845183529383019391830191600101615b61565b505060408501969096525050506060015292915050565b606081526000615ba760608301866156f7565b60208301949094525060400152919050565b828152604060208201526000614a256040830184615655565b85815284602082015260a060408201526000615bf160a0830186615655565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615c3757615c37615ea7565b604052919050565b600067ffffffffffffffff821115615c5957615c59615ea7565b5060051b60200190565b60008219821115615c7657615c76615e4f565b500190565b600082615c9857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115615cd8578160001904821115615cbe57615cbe615e4f565b80851615615ccb57918102915b93841c9390800290615ca2565b509250929050565b60006133fe60ff841683600082615cf957506001613401565b81615d0657506000613401565b8160018114615d1c5760028114615d2657615d42565b6001915050613401565b60ff841115615d3757615d37615e4f565b50506001821b613401565b5060208310610133831016604e8410600b8410161715615d65575081810a613401565b615d6f8383615c9d565b8060001904821115615d8357615d83615e4f565b029392505050565b6000816000190483118215151615615da557615da5615e4f565b500290565b600082821015615dbc57615dbc615e4f565b500390565b600060ff821660ff841680821015615ddb57615ddb615e4f565b90039392505050565b60005b83811015615dff578181015183820152602001615de7565b83811115615e0e576000848401525b50505050565b6000600019821415615e2857615e28615e4f565b5060010190565b600060ff821660ff811415615e4657615e46615e4f565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612dac57600080fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd735f776974686472617746726f6d447973746f706961416e645374616b65546f50656e726f73652063616c6c6564a26469706673582212200cf1f020c6034a963eb765e4383c9711e11c4c46992f7dcb0e7436d4c2e504c064736f6c6343000806003383f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80638b2ddd141161015c578063c7af3352116100ce578063de5f626811610087578063de5f626814610587578063e54bef751461058f578063f664b3d9146105a3578063f6ca71b0146105ab578063f817bc63146105c0578063f9759518146105c957600080fd5b8063c7af33521461051e578063d21220a714610526578063d2f248931461053a578063d38bfff41461054e578063d9caed1214610561578063dbe55e561461057457600080fd5b8063aa388af611610120578063aa388af6146104a9578063ad1728cb14610312578063b0492aa5146104dc578063b3bba24d146104f0578063c2e1e3f414610503578063c71daccb1461051657600080fd5b80638b2ddd14146104485780639136616a1461045c5780639688d2fc1461046f57806396d538bb14610482578063a6f19c841461049557600080fd5b8063430bf08a116101f55780635d85786d116101b95780635d85786d146103df5780635f8cddfe146103f357806367c7066c146104075780637b2d9b2c1461041a5780637e2d3a151461042d578063853828b61461044057600080fd5b8063430bf08a1461039557806345fb5007146103a857806347e7ef24146103bc5780635a063f63146103cf5780635d36b190146103d757600080fd5b80630fc3b4c4116102475780630fc3b4c4146103145780631072cbea1461033d578063158274a5146103505780632e655201146103645780633e0dc34e146103775780633ec632161461038157600080fd5b8063063bde24146102845780630b7132cf146102aa5780630c340a24146102cb5780630dfe1681146102eb5780630ed57b3a146102ff575b600080fd5b6102976b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b6102976102b8366004615052565b6101006020526000908152604090205481565b6102d36105d7565b6040516001600160a01b0390911681526020016102a1565b610107546102d3906001600160a01b031681565b61031261030d36600461508c565b6105f4565b005b6102d3610322366004615052565b6035602052600090815260409020546001600160a01b031681565b61031261034b366004615378565b61062f565b61010d546102d3906001600160a01b031681565b6037546102d3906001600160a01b031681565b6102976101045481565b61010b546102d3906001600160a01b031681565b6034546102d3906001600160a01b031681565b610106546102d3906001600160a01b031681565b6103126103ca366004615378565b61066f565b610312610710565b6103126107af565b610103546102d3906001600160a01b031681565b610102546102d3906001600160a01b031681565b6039546102d3906001600160a01b031681565b6102d361042836600461556a565b610855565b61031261043b366004615224565b61087f565b610312610ba5565b61010c546102d3906001600160a01b031681565b61031261046a36600461556a565b6110b3565b61031261047d366004615165565b61127e565b6103126104903660046153a4565b611387565b610101546102d3906001600160a01b031681565b6104cc6104b7366004615052565b610105546001600160a01b0391821691161490565b60405190151581526020016102a1565b610109546102d3906001600160a01b031681565b6103126104fe3660046150c5565b6114ad565b610312610511366004615052565b61156b565b6102976115ea565b6104cc611b4c565b610108546102d3906001600160a01b031681565b610105546102d3906001600160a01b031681565b61031261055c366004615052565b611b7d565b61031261056f366004615304565b611c21565b6033546102d3906001600160a01b031681565b610312612156565b61010a546102d3906001600160a01b031681565b610297600481565b6105b361223b565b6040516102a191906157fb565b61029760385481565b610297662386f26fc1000081565b60006105ef600080516020615ef38339815191525490565b905090565b6105fc611b4c565b6106215760405162461bcd60e51b81526004016106189061599d565b60405180910390fd5b61062b828261229d565b5050565b610637611b4c565b6106535760405162461bcd60e51b81526004016106189061599d565b61062b61065e6105d7565b6001600160a01b03841690836123fc565b6034546001600160a01b031633146106995760405162461bcd60e51b815260040161061890615966565b600080516020615ed3833981519152805460028114156106cb5760405162461bcd60e51b815260040161061890615a50565b60028255610105546001600160a01b038581169116146106fd5760405162461bcd60e51b815260040161061890615a22565b6107078484612452565b50600190555050565b6039546001600160a01b0316331461076a5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610618565b600080516020615ed38339815191528054600281141561079c5760405162461bcd60e51b815260040161061890615a50565b600282556107a8612816565b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b03161461084a5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610618565b61085333612ceb565b565b603a818154811061086557600080fd5b6000918252602090912001546001600160a01b0316905081565b610887611b4c565b6108a35760405162461bcd60e51b81526004016106189061599d565b600054610100900460ff16806108bc575060005460ff16155b6108d85760405162461bcd60e51b8152600401610618906159d4565b600054610100900460ff161580156108fa576000805461ffff19166101011790555b8686600081811061090d5761090d615e91565b90506020020160208101906109229190615052565b61010780546001600160a01b0319166001600160a01b03929092169190911790558686600181811061095657610956615e91565b905060200201602081019061096b9190615052565b61010880546001600160a01b03199081166001600160a01b039384161790915561010580548216868416179055610106805482168584161790556101098054909116918d16919091179055858481146109fd5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610618565b60005b81811015610b0257888882818110610a1a57610a1a615e91565b9050602002016020810190610a2f9190615052565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906155ee565b610aaa90600a615ce0565b61010060008b8b85818110610ac157610ac1615e91565b9050602002016020810190610ad69190615052565b6001600160a01b0316815260208101919091526040016000205580610afa81615e14565b915050610a00565b50610b858c8c8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612daf92505050565b508015610b98576000805461ff00191690555b5050505050505050505050565b6034546001600160a01b0316331480610bd65750610bc16105d7565b6001600160a01b0316336001600160a01b0316145b610c2e5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610618565b600080516020615ed383398151915280546002811415610c605760405162461bcd60e51b815260040161061890615a50565b60028255600080610c6f612e98565b91509150610c7b6130c1565b61010c54604051636f4ba70b60e11b81523060048201526000916001600160a01b03169063de974e169060240160206040518083038186803b158015610cc057600080fd5b505afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf8919061506f565b61010c546101025460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f919061506f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190615583565b905080610e0f5750505050506107a8565b61010b546101025460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992610e479291169085906004016157e2565b600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b5050610102546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190615583565b90508015610ff75761010254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190615583565b9050600081610f8d848a615d8b565b610f979190615c7b565b9050600082610fa6858a615d8b565b610fb09190615c7b565b610107546101085461010254929350610ff1926001600160a01b0392831692918216911687610fe08760046133db565b610feb8760046133db565b30613407565b50505050505b610fff613576565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190615583565b6034546101055491925061109d916001600160a01b039081169116836123fc565b6110a5612816565b505050505050505060019055565b6110bb611b4c565b6110d75760405162461bcd60e51b81526004016106189061599d565b60365481106111185760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610618565b60006036828154811061112d5761112d615e91565b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169061116a90600190615daa565b8310156111ec576036805461118190600190615daa565b8154811061119157611191615e91565b600091825260209091200154603680546001600160a01b0390921691859081106111bd576111bd615e91565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60368054806111fd576111fd615e7b565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b611286611b4c565b6112a25760405162461bcd60e51b81526004016106189061599d565b600054610100900460ff16806112bb575060005460ff16155b6112d75760405162461bcd60e51b8152600401610618906159d4565b600054610100900460ff161580156112f9576000805461ffff19166101011790555b61136a8989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612daf92505050565b801561137c576000805461ff00191690555b505050505050505050565b61138f611b4c565b6113ab5760405162461bcd60e51b81526004016106189061599d565b60005b8181101561145f5760008383838181106113ca576113ca615e91565b90506020020160208101906113df9190615052565b6001600160a01b0316141561144d5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610618565b8061145781615e14565b9150506113ae565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a83836040516114949392919061580e565b60405180910390a16114a8603a8383614ef5565b505050565b6114b5611b4c565b6114d15760405162461bcd60e51b81526004016106189061599d565b61010d80546001600160a01b03199081166001600160a01b0388811691909117909255610104869055610101805482168b8416179055610102805482168a8416179055609d805490911691881691909117905561010b80546001600160a01b039485166001600160a01b03199182161790915561010c80549385169382169390931790925561010a80549190931691161790555050505050565b611573611b4c565b61158f5760405162461bcd60e51b81526004016106189061599d565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b610105546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b9190615583565b610107546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156116b557600080fd5b505afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ed9190615583565b610108546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561173757600080fd5b505afa15801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f9190615583565b61010c54604051636f4ba70b60e11b81523060048201529192506000916001600160a01b039091169063de974e169060240160206040518083038186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f1919061506f565b61010c546101025460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b15801561184057600080fd5b505afa158015611854573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611878919061506f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b1580156118bf57600080fd5b505afa1580156118d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f79190615583565b610101546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119749190615583565b61197e9082615c63565b90508015611a5c5761010254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156119cc57600080fd5b505afa1580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a049190615583565b9050600080611a11612e98565b909250905082611a218584615d8b565b611a2b9190615c7b565b611a359089615c63565b975082611a428583615d8b565b611a4c9190615c7b565b611a569088615c63565b96505050505b61010554610107546000916001600160a01b03918216911614611ab6578515611ab15761010d54610104546101075461010554611aae936001600160a01b03908116939260009290821691168b6137b5565b90505b611ac3565b611ac08682615c63565b90505b61010554610108546000916001600160a01b03918216911614611b1d578515611b185761010d54610104546101085461010554611b15936001600160a01b03908116939260009290821691168b6137b5565b90505b611b2a565b611b278682615c63565b90505b87611b358284615c63565b611b3f9190615c63565b9850505050505050505090565b6000611b64600080516020615ef38339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611b85611b4c565b611ba15760405162461bcd60e51b81526004016106189061599d565b611bc9817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b0316611be9600080516020615ef38339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b03163314611c4b5760405162461bcd60e51b815260040161061890615966565b600080516020615ed383398151915280546002811415611c7d5760405162461bcd60e51b815260040161061890615a50565b60028255610105546001600160a01b03858116911614611caf5760405162461bcd60e51b815260040161061890615a22565b600080611cba612e98565b61010c54604051636f4ba70b60e11b81523060048201529294509092506000916001600160a01b039091169063de974e169060240160206040518083038186803b158015611d0757600080fd5b505afa158015611d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f919061506f565b61010c546101025460405163478a0c7960e11b81526001600160a01b039182166004820152929350600092911690638f1418f29060240160206040518083038186803b158015611d8e57600080fd5b505afa158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc6919061506f565b6040516370a0823160e01b81526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e459190615583565b905080156120a55761010254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611e9357600080fd5b505afa158015611ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecb9190615583565b61010d54909150600090611f2d906001600160a01b0316611eed8c6004613c96565b610107546001600160a01b03908116600081815261010060205260408082205461010854909416808352912054610104548e948e948b9491939291613ca5565b905082811115611f3a5750815b61010b546101025460405163fce07e8960e01b81526001600160a01b039283169263fce07e8992611f729291169085906004016157e2565b600060405180830381600087803b158015611f8c57600080fd5b505af1158015611fa0573d6000803e3d6000fd5b5050610102546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015611feb57600080fd5b505afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120239190615583565b905061209f61010760009054906101000a90046001600160a01b031661010860009054906101000a90046001600160a01b031661010260009054906101000a90046001600160a01b03168461208f88878f61207e9190615d8b565b6120889190615c7b565b60046133db565b610feb89888f61207e9190615d8b565b50505050505b6120ad613576565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156120f257600080fd5b505afa158015612106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212a9190615583565b61010554909150612145906001600160a01b03168c836123fc565b505050505050600182555050505050565b6034546001600160a01b031633146121805760405162461bcd60e51b815260040161061890615966565b600080516020615ed3833981519152805460028114156121b25760405162461bcd60e51b815260040161061890615a50565b60028255610105546040516370a0823160e01b81523060048201526107a8916001600160a01b03169081906370a082319060240160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122369190615583565b612452565b6060603a80548060200260200160405190810160405280929190818152602001828054801561229357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612275575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156122fa5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610618565b6001600160a01b0382161580159061231a57506001600160a01b03811615155b61235a5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610618565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b6114a88363a9059cbb60e01b848460405160240161241b9291906157e2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d85565b610105546001600160a01b038381169116146124805760405162461bcd60e51b815260040161061890615a22565b60008061248b612e98565b91509150612497613e57565b610108546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156124dc57600080fd5b505afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125149190615583565b9050600081156125505761010d5461010454610108546101075461254d936001600160a01b0390811693926000929082169116876137b5565b90505b610107546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561259557600080fd5b505afa1580156125a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cd9190615583565b61010d54610107546001600160a01b0390811660008181526101006020526040808220546101085485168084529183205461010454979850929661262296959095169488948d948d9490926001929091613f23565b61010d54610104546101075461010854939450612655936001600160a01b03938416936000928116911630808885614032565b50610107546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d29190615583565b610108546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a082319060240160206040518083038186803b15801561271757600080fd5b505afa15801561272b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274f9190615583565b6101075461010854919550612789916001600160a01b03918216911684876127788260046133db565b6127838a60046133db565b306143b2565b5050610102546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b1580156127d357600080fd5b505afa1580156127e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280b9190615583565b905061137c816145b3565b6128546040518060400160405280601e81526020017f5374617274696e6720636f6c6c656374696f6e206f66207265776172647300008152506146a4565b61285c6130c1565b61287d6040518060600160405280602d8152602001615f13602d91396146a4565b61010b60009054906101000a90046001600160a01b03166001600160a01b0316636b69e05b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156128ce57600080fd5b505af11580156128e2573d6000803e3d6000fd5b505050506129246040518060400160405280601a81526020017f636c61696d5374616b696e67526577617264732063616c6c65640000000000008152506146a4565b610109546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561296d57600080fd5b505afa158015612981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a59190615583565b90506129d66040518060400160405280600d81526020016c0323cb9ba2130b630b731b29d1609d1b815250826146e7565b8015612a1957610109546101065461010754600092612a09926001600160a01b039182169290821691168480873061472c565b9050612a158184615c63565b9250505b612a456040518060400160405280600a815260200169746f74616c557364633d60b01b815250836146e7565b61010a546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612a8a57600080fd5b505afa158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac29190615583565b9050612af26040518060400160405280600c81526020016b03832b72130b630b731b29d160a51b815250826146e7565b8015612b5e5761010a546101065461010554600092612b25926001600160a01b039182169290821691168480873061472c565b9050612b506040518060400160405280600781526020016670656e5573646360c81b815250826146e7565b612b5a8185615c63565b9350505b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612ba357600080fd5b505afa158015612bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdb9190615583565b9050612c086040518060400160405280600981526020016803130b630b731b29d160bd1b815250826146e7565b60395461010554604080516001600160a01b03938416815292909116602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a16101055460395460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612c929291169085906004016157e2565b602060405180830381600087803b158015612cac57600080fd5b505af1158015612cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce491906154f8565b5050505050565b6001600160a01b038116612d415760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610618565b806001600160a01b0316612d61600080516020615ef38339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612dac81600080516020615ef383398151915255565b50565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612deb603a8585614ef5565b50815181518114612e355760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610618565b60005b81811015612e8e57612e7c848281518110612e5557612e55615e91565b6020026020010151848381518110612e6f57612e6f615e91565b602002602001015161229d565b80612e8681615e14565b915050612e38565b5050505050505050565b60008060008061010260009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612eed57600080fd5b505afa158015612f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f25919061551a565b506001600160701b031691506001600160701b03169150600361010760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8d57600080fd5b505afa158015612fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc591906155ee565b612fcf9190615dc1565b612fda90600a615ce0565b821180156130795750610108546040805163313ce56760e01b815290516003926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561302957600080fd5b505afa15801561303d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306191906155ee565b61306b9190615dc1565b61307690600a615ce0565b81115b6130b85760405162461bcd60e51b815260206004820152601060248201526f526573657276657320746f6f206c6f7760801b6044820152606401610618565b90939092509050565b610101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561310657600080fd5b505afa15801561311a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313e9190615583565b90508015612dac576040805160018082528183019092526000916020808301908036833750506101095482519293506001600160a01b03169183915060009061318957613189615e91565b6001600160a01b039283166020918202929092010152610101546040516331279d3d60e01b81529116906331279d3d906131c990309085906004016157be565b600060405180830381600087803b1580156131e357600080fd5b505af11580156131f7573d6000803e3d6000fd5b5050505061010160009054906101000a90046001600160a01b03166001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561324c57600080fd5b505af1158015613260573d6000803e3d6000fd5b5050610102546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b1580156132a857600080fd5b505afa1580156132bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e09190615583565b6101025461010b5460405163095ea7b360e01b81529294506001600160a01b039182169263095ea7b39261331a92169086906004016157e2565b602060405180830381600087803b15801561333457600080fd5b505af1158015613348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336c91906154f8565b5061010b54610102546040516351b3839960e11b81526001600160a01b039283169263a3670732926133a59291169086906004016157e2565b600060405180830381600087803b1580156133bf57600080fd5b505af11580156133d3573d6000803e3d6000fd5b505050505050565b60006127106133ea8382615daa565b6133f49085615d8b565b6133fe9190615c7b565b90505b92915050565b609d5460405163095ea7b360e01b815260009182916001600160a01b038981169263095ea7b39261344092909116908a906004016157e2565b602060405180830381600087803b15801561345a57600080fd5b505af115801561346e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349291906154f8565b50609d546001600160a01b0316630dede6c48a8a60018a8a8a8a6134b842610258615c63565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015294151560448701526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016040805180830381600087803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613566919061559c565b9150915097509795505050505050565b61010554610107546001600160a01b039081169116148015906136135750610107546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156135d957600080fd5b505afa1580156135ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136119190615583565b115b156136c05761010d546101045461010754610105546040516370a0823160e01b815230600482018190526136be956001600160a01b0390811695946000949082169391169190819084906370a08231906024015b60206040518083038186803b15801561367f57600080fd5b505afa158015613693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b79190615583565b6000614032565b505b61010554610108546001600160a01b0390811691161480159061375d5750610108546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561372357600080fd5b505afa158015613737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375b9190615583565b115b156108535761010d546101045461010854610105546040516370a0823160e01b81523060048201819052612dac956001600160a01b0390811695946000949082169391169190819084906370a0823190602401613667565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082015287908087600181111561381157613811615e65565b9081600181111561382457613824615e65565b9052506001600160a01b0386811660208301528581166040808401919091526060830186905251631f29a8cd60e31b8152600481018a905260009182919085169063f94d46689060240160006040518083038186803b15801561388657600080fd5b505afa15801561389a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138c291908101906153e6565b5091509150600080856001600160a01b031663f6c009278d6040518263ffffffff1660e01b81526004016138f891815260200190565b604080518083038186803b15801561390f57600080fd5b505afa158015613923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139479190615345565b9092509050600081600281111561396057613960615e65565b1415613a995760008060005b86518160ff161015613a08578c6001600160a01b0316878260ff168151811061399757613997615e91565b60200260200101516001600160a01b031614156139b9578060ff1692506139f6565b8b6001600160a01b0316878260ff16815181106139d8576139d8615e91565b60200260200101516001600160a01b031614156139f6578060ff1691505b80613a0081615e2f565b91505061396c565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a90613a3a908a90899087908790600401615b33565b60206040518083038186803b158015613a5257600080fd5b505afa158015613a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8a9190615583565b98505050505050505050613c8c565b6001816002811115613aad57613aad615e65565b1415613bb85760008060005b86518160ff161015613b87578c6001600160a01b0316878260ff1681518110613ae457613ae4615e91565b60200260200101516001600160a01b03161415613b1f57858160ff1681518110613b1057613b10615e91565b60200260200101519250613b75565b8b6001600160a01b0316878260ff1681518110613b3e57613b3e615e91565b60200260200101516001600160a01b03161415613b7557858160ff1681518110613b6a57613b6a615e91565b602002602001015191505b80613b7f81615e2f565b915050613ab9565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c90613a3a908a9086908690600401615b94565b60008060005b86518160ff161015613b87578c6001600160a01b0316878260ff1681518110613be957613be9615e91565b60200260200101516001600160a01b03161415613c2457858160ff1681518110613c1557613c15615e91565b60200260200101519250613c7a565b8b6001600160a01b0316878260ff1681518110613c4357613c43615e91565b60200260200101516001600160a01b03161415613c7a57858160ff1681518110613c6f57613c6f615e91565b602002602001015191505b80613c8481615e2f565b915050613bbe565b9695505050505050565b60006127106133ea8382615c63565b600080613cb2878a615d8b565b613cbc878c615d8b565b613cc69190615c63565b86613cd18d8b615d8b565b613cdb9190615d8b565b613ce59190615c7b565b905060005b6001811015613d7557600089613d00848d615d8b565b613d0a9190615c7b565b90506000613d1d8f896000898b876137b5565b9050613d29818d615d8b565b613d33838f615d8b565b613d3d9190615c63565b828f8d613d4a9190615d8b565b613d549190615d8b565b613d5e9190615c7b565b935050508080613d6d90615e14565b915050613cea565b509b9a5050505050505050505050565b6000613dda826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a169092919063ffffffff16565b8051909150156114a85780806020019051810190613df891906154f8565b6114a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610618565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015613e9c57600080fd5b505afa158015613eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed49190615583565b61010754610105549192506001600160a01b03918216911614612dac5761010d5461010454610105546101075461062b936001600160a01b039081169392600092908216911630808885614032565b60008a818989613f338a8e615d8b565b613f3d9190615c7b565b613f479190615c63565b613f518b8e615d8b565b613f5b9190615c7b565b9050613f8c6040518060400160405280600d81526020016c0616d6f756e7430546f5377617609c1b815250826146e7565b60005b8781101561402157613fc06040518060400160405280600681526020016506f6e537761760d41b8152508787614a2f565b6000613fd18f8960008a8a886137b5565b90508b83828f613fe19190615d8b565b613feb9190615c7b565b613ff59190615c63565b8c8f6140019190615d8b565b61400b9190615c7b565b925050808061401990615e14565b915050613f8f565b509c9b505050505050505050505050565b6000808a90506140736040518060400160405280601981526020017842616c616e6365725661756c743a207377617070696e67203160381b81525082614a76565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b815230600482015261412491908a906001600160a01b038216906370a082319060240160206040518083038186803b1580156140e757600080fd5b505afa1580156140fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411f9190615583565b614abb565b6040516370a0823160e01b81523060048201526001600160a01b0389169063095ea7b390839083906370a082319060240160206040518083038186803b15801561416d57600080fd5b505afa158015614181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a59190615583565b6040518363ffffffff1660e01b81526004016141c29291906157e2565b602060405180830381600087803b1580156141dc57600080fd5b505af11580156141f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061421491906154f8565b5082614250576142288b8b8b8b8b896137b5565b925061424d614246662386f26fc10000670de0b6b3a7640000615daa565b8490614b02565b92505b61429c6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b8a8152602081018a60018111156142b5576142b5615e65565b908160018111156142c8576142c8615e65565b9052506001600160a01b03898116604083810191909152898216606080850191909152608080850189905282519081018352600060208201819052918101919091528983168152888316918101919091529083166352bbbe2983838861433042610258615c63565b6040518563ffffffff1660e01b815260040161434f9493929190615a78565b602060405180830381600087803b15801561436957600080fd5b505af115801561437d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a19190615583565b9d9c50505050505050505050505050565b609d5460405163095ea7b360e01b8152600091829182916001600160a01b03808d169263095ea7b3926143eb9216908c906004016157e2565b602060405180830381600087803b15801561440557600080fd5b505af1158015614419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443d91906154f8565b50609d5460405163095ea7b360e01b81526001600160a01b038b81169263095ea7b39261447292909116908b906004016157e2565b602060405180830381600087803b15801561448c57600080fd5b505af11580156144a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c491906154f8565b50609d546001600160a01b0316635a47ddc38b8b60018c8c8c8c8c6144eb42610258615c63565b60405160e08b901b6001600160e01b03191681526001600160a01b03998a166004820152978916602489015295151560448801526064870194909452608486019290925260a485015260c484015290921660e482015261010481019190915261012401606060405180830381600087803b15801561456857600080fd5b505af115801561457c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145a091906155c0565b9250925092509750975097945050505050565b6101025461010b5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926145eb9291169085906004016157e2565b602060405180830381600087803b15801561460557600080fd5b505af1158015614619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061463d91906154f8565b5061010b54610102546040516351b3839960e11b81526001600160a01b039283169263a3670732926146769291169085906004016157e2565b600060405180830381600087803b15801561469057600080fd5b505af1158015612ce4573d6000803e3d6000fd5b612dac816040516024016146b891906158a6565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614b17565b61062b82826040516024016146fd929190615944565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614b17565b609d5460405163095ea7b360e01b81526000916001600160a01b03808b169263095ea7b39261476192169087906004016157e2565b602060405180830381600087803b15801561477b57600080fd5b505af115801561478f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147b391906154f8565b5060006147c4898989898989614b38565b9050806147d5576000915050614a0b565b60408051600280825260608201909252600091816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816147ed579050509050898160008151811061483057614830615e91565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050888160008151811061486857614868615e91565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106148a0576148a0615e91565b6020026020010151604001901515908115158152505088816001815181106148ca576148ca615e91565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061490257614902615e91565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050858160018151811061493a5761493a615e91565b6020908102919091010151901515604090910152609d546000906001600160a01b031663f41766d88783858961497242610258615c63565b6040518663ffffffff1660e01b8152600401614992959493929190615bd2565b600060405180830381600087803b1580156149ac57600080fd5b505af11580156149c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526149e891908101906154bb565b9050806002815181106149fd576149fd615e91565b602002602001015193505050505b979650505050505050565b6060614a258484600085614d65565b90505b9392505050565b6114a8838383604051602401614a47939291906158e3565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052614b17565b61062b8282604051602401614a8c9291906158b9565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614b17565b6114a8838383604051602401614ad393929190615916565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052614b17565b60006133fe8383670de0b6b3a7640000614e82565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181614b535790505090508781600081518110614b9657614b96615e91565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110614bce57614bce615e91565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110614c0657614c06615e91565b602002602001015160400190151590811515815250508681600181518110614c3057614c30615e91565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508581600181518110614c6857614c68615e91565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508381600181518110614ca057614ca0615e91565b6020908102919091010151901515604091820152609d5490516326207f2d60e21b81526000916001600160a01b031690639881fcb490614ce69087908690600401615bb9565b60006040518083038186803b158015614cfe57600080fd5b505afa158015614d12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614d3a91908101906154bb565b905080600281518110614d4f57614d4f615e91565b6020026020010151925050509695505050505050565b606082471015614dc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610618565b843b614e145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610618565b600080866001600160a01b03168587604051614e3091906157a2565b60006040518083038185875af1925050503d8060008114614e6d576040519150601f19603f3d011682016040523d82523d6000602084013e614e72565b606091505b5091509150614a0b828286614ea4565b600080614e8f8585614edd565b9050614e9b8184614ee9565b95945050505050565b60608315614eb3575081614a28565b825115614ec35782518084602001fd5b8160405162461bcd60e51b815260040161061891906158a6565b60006133fe8284615d8b565b60006133fe8284615c7b565b828054828255906000526020600020908101928215614f48579160200282015b82811115614f485781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614f15565b50614f54929150614f58565b5090565b5b80821115614f545760008155600101614f59565b8035614f7881615ebd565b919050565b60008083601f840112614f8f57600080fd5b50813567ffffffffffffffff811115614fa757600080fd5b6020830191508360208260051b8501011115614fc257600080fd5b9250929050565b600082601f830112614fda57600080fd5b81516020614fef614fea83615c3f565b615c0e565b80838252828201915082860187848660051b890101111561500f57600080fd5b60005b8581101561502e57815184529284019290840190600101615012565b5090979650505050505050565b80516001600160701b0381168114614f7857600080fd5b60006020828403121561506457600080fd5b8135614a2881615ebd565b60006020828403121561508157600080fd5b8151614a2881615ebd565b6000806040838503121561509f57600080fd5b82356150aa81615ebd565b915060208301356150ba81615ebd565b809150509250929050565b600080600080600080600080610100898b0312156150e257600080fd5b88356150ed81615ebd565b975060208901356150fd81615ebd565b9650604089013561510d81615ebd565b9550606089013561511d81615ebd565b94506080890135935060a089013561513481615ebd565b925060c089013561514481615ebd565b915060e089013561515481615ebd565b809150509295985092959890939650565b60008060008060008060008060a0898b03121561518157600080fd5b883561518c81615ebd565b9750602089013561519c81615ebd565b9650604089013567ffffffffffffffff808211156151b957600080fd5b6151c58c838d01614f7d565b909850965060608b01359150808211156151de57600080fd5b6151ea8c838d01614f7d565b909650945060808b013591508082111561520357600080fd5b506152108b828c01614f7d565b999c989b5096995094979396929594505050565b60008060008060008060008060008060e08b8d03121561524357600080fd5b8a3561524e81615ebd565b995060208b013561525e81615ebd565b985060408b013567ffffffffffffffff8082111561527b57600080fd5b6152878e838f01614f7d565b909a50985060608d01359150808211156152a057600080fd5b6152ac8e838f01614f7d565b909850965060808d01359150808211156152c557600080fd5b506152d28d828e01614f7d565b90955093506152e5905060a08c01614f6d565b91506152f360c08c01614f6d565b90509295989b9194979a5092959850565b60008060006060848603121561531957600080fd5b833561532481615ebd565b9250602084013561533481615ebd565b929592945050506040919091013590565b6000806040838503121561535857600080fd5b825161536381615ebd565b6020840151909250600381106150ba57600080fd5b6000806040838503121561538b57600080fd5b823561539681615ebd565b946020939093013593505050565b600080602083850312156153b757600080fd5b823567ffffffffffffffff8111156153ce57600080fd5b6153da85828601614f7d565b90969095509350505050565b6000806000606084860312156153fb57600080fd5b835167ffffffffffffffff8082111561541357600080fd5b818601915086601f83011261542757600080fd5b81516020615437614fea83615c3f565b8083825282820191508286018b848660051b890101111561545757600080fd5b600096505b8487101561548357805161546f81615ebd565b83526001969096019591830191830161545c565b509189015191975090935050508082111561549d57600080fd5b506154aa86828701614fc9565b925050604084015190509250925092565b6000602082840312156154cd57600080fd5b815167ffffffffffffffff8111156154e457600080fd5b6154f084828501614fc9565b949350505050565b60006020828403121561550a57600080fd5b81518015158114614a2857600080fd5b60008060006060848603121561552f57600080fd5b6155388461503b565b92506155466020850161503b565b9150604084015163ffffffff8116811461555f57600080fd5b809150509250925092565b60006020828403121561557c57600080fd5b5035919050565b60006020828403121561559557600080fd5b5051919050565b600080604083850312156155af57600080fd5b505080516020909101519092909150565b6000806000606084860312156155d557600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561560057600080fd5b815160ff81168114614a2857600080fd5b600081518084526020808501945080840160005b8381101561564a5781516001600160a01b031687529582019590820190600101615625565b509495945050505050565b600081518084526020808501945080840160005b8381101561564a57815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101615669565b600081518084526156c1816020860160208601615de4565b601f01601f19169290920160200192915050565b600281106156f357634e487b7160e01b600052602160045260246000fd5b9052565b60006101206157078484516156d5565b6020838101516001600160a01b03169085015260408084015190615735908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c083015161576e60c08601826001600160a01b03169052565b5060e083015161578960e08601826001600160a01b03169052565b50610100808401518282870152613c8c838701826156a9565b600082516157b4818460208701615de4565b9190910192915050565b6001600160a01b0383168152604060208201819052600090614a2590830184615611565b6001600160a01b03929092168252602082015260400190565b6020815260006133fe6020830184615611565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156158585781546001600160a01b031684529284019260019182019101615833565b505050838103828501528481528590820160005b8681101561589a57823561587f81615ebd565b6001600160a01b03168252918301919083019060010161586c565b50979650505050505050565b6020815260006133fe60208301846156a9565b6040815260006158cc60408301856156a9565b905060018060a01b03831660208301529392505050565b6060815260006158f660608301866156a9565b6001600160a01b0394851660208401529290931660409091015292915050565b60608152600061592960608301866156a9565b6001600160a01b039490941660208301525060400152919050565b60408152600061595760408301856156a9565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60e08152845160e082015260006020860151615a986101008401826156d5565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152615ae16101a08401826156a9565b915050615b21602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000615b4660808301876156f7565b82810360208481019190915286518083528782019282019060005b81811015615b7d57845183529383019391830191600101615b61565b505060408501969096525050506060015292915050565b606081526000615ba760608301866156f7565b60208301949094525060400152919050565b828152604060208201526000614a256040830184615655565b85815284602082015260a060408201526000615bf160a0830186615655565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615c3757615c37615ea7565b604052919050565b600067ffffffffffffffff821115615c5957615c59615ea7565b5060051b60200190565b60008219821115615c7657615c76615e4f565b500190565b600082615c9857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115615cd8578160001904821115615cbe57615cbe615e4f565b80851615615ccb57918102915b93841c9390800290615ca2565b509250929050565b60006133fe60ff841683600082615cf957506001613401565b81615d0657506000613401565b8160018114615d1c5760028114615d2657615d42565b6001915050613401565b60ff841115615d3757615d37615e4f565b50506001821b613401565b5060208310610133831016604e8410600b8410161715615d65575081810a613401565b615d6f8383615c9d565b8060001904821115615d8357615d83615e4f565b029392505050565b6000816000190483118215151615615da557615da5615e4f565b500290565b600082821015615dbc57615dbc615e4f565b500390565b600060ff821660ff841680821015615ddb57615ddb615e4f565b90039392505050565b60005b83811015615dff578181015183820152602001615de7565b83811115615e0e576000848401525b50505050565b6000600019821415615e2857615e28615e4f565b5060010190565b600060ff821660ff811415615e4657615e46615e4f565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612dac57600080fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd735f776974686472617746726f6d447973746f706961416e645374616b65546f50656e726f73652063616c6c6564a26469706673582212200cf1f020c6034a963eb765e4383c9711e11c4c46992f7dcb0e7436d4c2e504c064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance()": {
        "details": "Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.",
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit an amount of asset into the platform",
        "params": {
          "_amount": "Units of asset to deposit",
          "_asset": "Address for the asset"
        }
      },
      "depositAll()": {
        "details": "Deposit balance of all supported assets into the platform"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdrawAll()": {
        "details": "Withdraw all assets from strategy sending assets to Vault."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Dystopia strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30623,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30626,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30666,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30750,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 30752,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 30756,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30759,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30761,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 30763,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30765,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 30768,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30772,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 21293,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "dystRouter",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IDystopiaRouter)10053"
      },
      {
        "astId": 21641,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7210,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21689,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "assetToDenominator",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21692,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "gauge",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IDystopiaLP)9937"
      },
      {
        "astId": 21695,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "dystPair",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IDystopiaLP)9937"
      },
      {
        "astId": 21697,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "dystRouter",
        "offset": 0,
        "slot": "259",
        "type": "t_address"
      },
      {
        "astId": 21699,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "poolId",
        "offset": 0,
        "slot": "260",
        "type": "t_bytes32"
      },
      {
        "astId": 21702,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "primaryStable",
        "offset": 0,
        "slot": "261",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 21705,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "middleToken",
        "offset": 0,
        "slot": "262",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 21708,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "token0",
        "offset": 0,
        "slot": "263",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 21711,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "token1",
        "offset": 0,
        "slot": "264",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 21714,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "dystToken",
        "offset": 0,
        "slot": "265",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 21717,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "penToken",
        "offset": 0,
        "slot": "266",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 21720,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "userProxy",
        "offset": 0,
        "slot": "267",
        "type": "t_contract(IUserProxy)2106"
      },
      {
        "astId": 21723,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "penLens",
        "offset": 0,
        "slot": "268",
        "type": "t_contract(IPenLens)1805"
      },
      {
        "astId": 21725,
        "contract": "contracts/strategies/DystopiaStrategy.sol:DystopiaStrategy",
        "label": "balancerVault",
        "offset": 0,
        "slot": "269",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDystopiaLP)9937": {
        "encoding": "inplace",
        "label": "contract IDystopiaLP",
        "numberOfBytes": "20"
      },
      "t_contract(IDystopiaRouter)10053": {
        "encoding": "inplace",
        "label": "contract IDystopiaRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPenLens)1805": {
        "encoding": "inplace",
        "label": "contract IPenLens",
        "numberOfBytes": "20"
      },
      "t_contract(IUserProxy)2106": {
        "encoding": "inplace",
        "label": "contract IUserProxy",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}