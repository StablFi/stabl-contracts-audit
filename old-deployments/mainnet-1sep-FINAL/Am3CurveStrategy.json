{
  "address": "0xC8F5042f1D35fE09aF34624883B3dC967D440cF7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "TransferLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Superb",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_amAssets",
          "type": "address[]"
        }
      ],
      "name": "_setAmAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "_setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amStableToAmDebt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_primaryStable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvGauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvMinter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStable",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stableToAmStable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc239098cb6bcf6974c7c97395289939ab0cac36dfabc155f63d4bb621e236c3e",
  "receipt": {
    "to": null,
    "from": "0xA2a067351C977113B98096F75c9685a3d51614eC",
    "contractAddress": "0xC8F5042f1D35fE09aF34624883B3dC967D440cF7",
    "transactionIndex": 46,
    "gasUsed": "3447589",
    "logsBloom": "0x
    "blockHash": "0xa33c0649c844256f1a99165e984dd5113ec61c2a9e75a2572dcc7c504867874f",
    "transactionHash": "0xc239098cb6bcf6974c7c97395289939ab0cac36dfabc155f63d4bb621e236c3e",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 32560212,
        "transactionHash": "0xc239098cb6bcf6974c7c97395289939ab0cac36dfabc155f63d4bb621e236c3e",
        "address": "0xC8F5042f1D35fE09aF34624883B3dC967D440cF7",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec"
        ],
        "data": "0x",
        "logIndex": 224,
        "blockHash": "0xa33c0649c844256f1a99165e984dd5113ec61c2a9e75a2572dcc7c504867874f"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 32560212,
        "transactionHash": "0xc239098cb6bcf6974c7c97395289939ab0cac36dfabc155f63d4bb621e236c3e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000181f055bafa431b00000000000000000000000000000000000000000000000254b4ad13ebfcd73b0000000000000000000000000000000000000000000005ba7d8de67c131f3e110000000000000000000000000000000000000000000000025332bcbe310294200000000000000000000000000000000000000000000005ba7f0fd6d1ce19812c",
        "logIndex": 225,
        "blockHash": "0xa33c0649c844256f1a99165e984dd5113ec61c2a9e75a2572dcc7c504867874f"
      }
    ],
    "blockNumber": 32560212,
    "cumulativeGasUsed": "10772531",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "687ed9fa5cffd3a4c7a6373a1d9ad1d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"TransferLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Superb\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_amAssets\",\"type\":\"address[]\"}],\"name\":\"_setAmAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"_setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amStableToAmDebt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_primaryStable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvGauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvMinter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStable\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableToAmStable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance()\":{\"details\":\"Get the total asset value held in the platform\",\"returns\":{\"_0\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into the Curve 3Pool\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into the Curve 3pool\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address,address,address[],address[],address[],address,address,address,address)\":{\"params\":{\"_assets\":\"Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                USDC\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Address of the am3Crv\",\"_rewardTokenAddresses\":\"Address of CRV\",\"_vaultAddress\":\"Address of the vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Curve 3Pool\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address,address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/Am3CurveStrategy.sol\":\"Am3CurveStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\r\\nimport {DataTypes} from '../protocol/DataTypes.sol';\\r\\n\\r\\n/**\\r\\n * @title ILendingPool\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an Aave Pool.\\r\\n **/\\r\\ninterface ILendingPool {\\r\\n  /**\\r\\n   * @dev Emitted on mintUnbacked()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the supply\\r\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\r\\n   * @param amount The amount of supplied assets\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event MintUnbacked(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on backUnbacked()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param backer The address paying for the backing\\r\\n   * @param amount The amount added as backing\\r\\n   * @param fee The amount paid in fees\\r\\n   **/\\r\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on supply()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the supply\\r\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\r\\n   * @param amount The amount supplied\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event Supply(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on withdraw()\\r\\n   * @param reserve The address of the underlying asset being withdrawn\\r\\n   * @param user The address initiating the withdrawal, owner of aTokens\\r\\n   * @param to The address that will receive the underlying\\r\\n   * @param amount The amount to be withdrawn\\r\\n   **/\\r\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n   * @param reserve The address of the underlying asset being borrowed\\r\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n   * initiator of the transaction on flashLoan()\\r\\n   * @param onBehalfOf The address that will be getting the debt\\r\\n   * @param amount The amount borrowed out\\r\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event Borrow(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    DataTypes.InterestRateMode interestRateMode,\\r\\n    uint256 borrowRate,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on repay()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n   * @param amount The amount repaid\\r\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\r\\n   **/\\r\\n  event Repay(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    address indexed repayer,\\r\\n    uint256 amount,\\r\\n    bool useATokens\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on swapBorrowRateMode()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user swapping his rate mode\\r\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n   **/\\r\\n  event SwapBorrowRateMode(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    DataTypes.InterestRateMode interestRateMode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param totalDebt The total isolation mode debt for the reserve\\r\\n   */\\r\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the user selects a certain asset category for eMode\\r\\n   * @param user The address of the user\\r\\n   * @param categoryId The category id\\r\\n   **/\\r\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   **/\\r\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   **/\\r\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on rebalanceStableBorrowRate()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user for which the rebalance has been executed\\r\\n   **/\\r\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on flashLoan()\\r\\n   * @param target The address of the flash loan receiver contract\\r\\n   * @param initiator The address initiating the flash loan\\r\\n   * @param asset The address of the asset being flash borrowed\\r\\n   * @param amount The amount flash borrowed\\r\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n   * @param premium The fee flash borrowed\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event FlashLoan(\\r\\n    address indexed target,\\r\\n    address initiator,\\r\\n    address indexed asset,\\r\\n    uint256 amount,\\r\\n    DataTypes.InterestRateMode interestRateMode,\\r\\n    uint256 premium,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a borrower is liquidated.\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n   * @param liquidator The address of the liquidator\\r\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  event LiquidationCall(\\r\\n    address indexed collateralAsset,\\r\\n    address indexed debtAsset,\\r\\n    address indexed user,\\r\\n    uint256 debtToCover,\\r\\n    uint256 liquidatedCollateralAmount,\\r\\n    address liquidator,\\r\\n    bool receiveAToken\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the state of a reserve is updated.\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The next liquidity rate\\r\\n   * @param stableBorrowRate The next stable borrow rate\\r\\n   * @param variableBorrowRate The next variable borrow rate\\r\\n   * @param liquidityIndex The next liquidity index\\r\\n   * @param variableBorrowIndex The next variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed reserve,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 stableBorrowRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\r\\n   * @param reserve The address of the reserve\\r\\n   * @param amountMinted The amount minted to the treasury\\r\\n   **/\\r\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\r\\n   * @param asset The address of the underlying asset to mint\\r\\n   * @param amount The amount to mint\\r\\n   * @param onBehalfOf The address that will receive the aTokens\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function mintUnbacked(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n   * @param asset The address of the underlying asset to back\\r\\n   * @param amount The amount to back\\r\\n   * @param fee The amount paid in fees\\r\\n   **/\\r\\n  function backUnbacked(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 fee\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function supply(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param deadline The deadline timestamp that the permit is valid\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param permitV The V parameter of ERC712 permit sig\\r\\n   * @param permitR The R parameter of ERC712 permit sig\\r\\n   * @param permitS The S parameter of ERC712 permit sig\\r\\n   **/\\r\\n  function supplyWithPermit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode,\\r\\n    uint256 deadline,\\r\\n    uint8 permitV,\\r\\n    bytes32 permitR,\\r\\n    bytes32 permitS\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n   * @param asset The address of the underlying asset to borrow\\r\\n   * @param amount The amount to be borrowed\\r\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n   * if he has been given credit delegation allowance\\r\\n   **/\\r\\n  function borrow(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    uint16 referralCode,\\r\\n    address onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repay(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    address onBehalfOf\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @param deadline The deadline timestamp that the permit is valid\\r\\n   * @param permitV The V parameter of ERC712 permit sig\\r\\n   * @param permitR The R parameter of ERC712 permit sig\\r\\n   * @param permitS The S parameter of ERC712 permit sig\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repayWithPermit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    address onBehalfOf,\\r\\n    uint256 deadline,\\r\\n    uint8 permitV,\\r\\n    bytes32 permitR,\\r\\n    bytes32 permitS\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\r\\n   * equivalent debt tokens\\r\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\r\\n   * balance is not enough to cover the whole debt\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repayWithATokens(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n   **/\\r\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n   * - Users can be rebalanced if the following conditions are satisfied:\\r\\n   *     1. Usage ratio is above 95%\\r\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param user The address of the user to be rebalanced\\r\\n   **/\\r\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n   * @param asset The address of the underlying asset supplied\\r\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n   **/\\r\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  function liquidationCall(\\r\\n    address collateralAsset,\\r\\n    address debtAsset,\\r\\n    address user,\\r\\n    uint256 debtToCover,\\r\\n    bool receiveAToken\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n   * into consideration. For further details please visit https://developers.aave.com\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n   * @param assets The addresses of the assets being flash-borrowed\\r\\n   * @param amounts The amounts of the assets being flash-borrowed\\r\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata interestRateModes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n   * into consideration. For further details please visit https://developers.aave.com\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n   * @param asset The address of the asset being flash-borrowed\\r\\n   * @param amount The amount of the asset being flash-borrowed\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function flashLoanSimple(\\r\\n    address receiverAddress,\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the user account data across all the reserves\\r\\n   * @param user The address of the user\\r\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n   * @return ltv The loan to value of The user\\r\\n   * @return healthFactor The current health factor of the user\\r\\n   **/\\r\\n  function getUserAccountData(address user)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint256 totalCollateralBase,\\r\\n    uint256 totalDebtBase,\\r\\n    uint256 availableBorrowsBase,\\r\\n    uint256 currentLiquidationThreshold,\\r\\n    uint256 ltv,\\r\\n    uint256 healthFactor\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\r\\n   * interest rate strategy\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\r\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function initReserve(\\r\\n    address asset,\\r\\n    address aTokenAddress,\\r\\n    address stableDebtAddress,\\r\\n    address variableDebtAddress,\\r\\n    address interestRateStrategyAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Drop a reserve\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   **/\\r\\n  function dropReserve(address asset) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the address of the interest rate strategy contract\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\r\\n  external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param configuration The new configuration bitmap\\r\\n   **/\\r\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\r\\n  external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The configuration of the reserve\\r\\n   **/\\r\\n  function getConfiguration(address asset)\\r\\n  external\\r\\n  view\\r\\n  returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the configuration of the user across all the reserves\\r\\n   * @param user The user address\\r\\n   * @return The configuration of the user\\r\\n   **/\\r\\n  function getUserConfiguration(address user)\\r\\n  external\\r\\n  view\\r\\n  returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the normalized income normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the normalized variable debt per unit of asset\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state and configuration data of the reserve\\r\\n   **/\\r\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Validates and finalizes an aToken transfer\\r\\n   * @dev Only callable by the overlying aToken of the `asset`\\r\\n   * @param asset The address of the underlying asset of the aToken\\r\\n   * @param from The user from which the aTokens are transferred\\r\\n   * @param to The user receiving the aTokens\\r\\n   * @param amount The amount being transferred/withdrawn\\r\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\r\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\r\\n   */\\r\\n  function finalizeTransfer(\\r\\n    address asset,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 balanceFromBefore,\\r\\n    uint256 balanceToBefore\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n   * @dev It does not include dropped reserves\\r\\n   * @return The addresses of the underlying assets of the initialized reserves\\r\\n   **/\\r\\n  function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n   * @return The address of the reserve associated with id\\r\\n   **/\\r\\n  function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n   * @return The address of the PoolAddressesProvider\\r\\n   **/\\r\\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the protocol fee on the bridging\\r\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n   */\\r\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\r\\n   * - A part is collected by the protocol treasury\\r\\n   * @dev The total premium is calculated on the total borrowed amount\\r\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n   * @dev Only callable by the PoolConfigurator contract\\r\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n   */\\r\\n  function updateFlashloanPremiums(\\r\\n    uint128 flashLoanPremiumTotal,\\r\\n    uint128 flashLoanPremiumToProtocol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Configures a new category for the eMode.\\r\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n   * The category 0 is reserved as it's the default for volatile assets\\r\\n   * @param id The id of the category\\r\\n   * @param config The configuration of the category\\r\\n   */\\r\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the data of an eMode category\\r\\n   * @param id The id of the category\\r\\n   * @return The configuration data of the category\\r\\n   */\\r\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Allows a user to use the protocol in eMode\\r\\n   * @param categoryId The id of the category\\r\\n   */\\r\\n  function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the eMode the user is using\\r\\n   * @param user The address of the user\\r\\n   * @return The eMode id\\r\\n   */\\r\\n  function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n   * @dev It requires the given asset has zero debt ceiling\\r\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n   */\\r\\n  function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n   */\\r\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total fee on flash loans\\r\\n   * @return The total fee on flashloans\\r\\n   */\\r\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the part of the bridge fees sent to protocol\\r\\n   * @return The bridge fee sent to the protocol treasury\\r\\n   */\\r\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the part of the flashloan fees sent to protocol\\r\\n   * @return The flashloan fee sent to the protocol treasury\\r\\n   */\\r\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n   * @return The maximum number of reserves supported\\r\\n   */\\r\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n  /**\\r\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\r\\n   * @param assets The list of reserves for which the minting needs to be executed\\r\\n   **/\\r\\n  function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Rescue and transfer tokens locked in this contract\\r\\n   * @param token The address of the token\\r\\n   * @param to The address of the recipient\\r\\n   * @param amount The amount of token to transfer\\r\\n   */\\r\\n  function rescueTokens(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n   * @dev Deprecated: Use the `supply` function instead\\r\\n   * @param asset The address of the underlying asset to supply\\r\\n   * @param amount The amount to be supplied\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function deposit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n}\",\"keccak256\":\"0x55e69236277c091a7e0bc700ae8d034949dbcc7f183d7b2d573cbd936334b784\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @title LendingPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n * - Owned by the Aave Governance\\r\\n * @author Aave\\r\\n **/\\r\\ninterface ILendingPoolAddressesProvider  {\\r\\n  event MarketIdSet(string newMarketId);\\r\\n  event LendingPoolUpdated(address indexed newAddress);\\r\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n  event EmergencyAdminUpdated(address indexed newAddress);\\r\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\r\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\r\\n  event PriceOracleUpdated(address indexed newAddress);\\r\\n  event LendingRateOracleUpdated(address indexed newAddress);\\r\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\r\\n\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  function setMarketId(string calldata marketId) external;\\r\\n\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\r\\n\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  function getLendingPool() external view returns (address);\\r\\n\\r\\n  function setLendingPoolImpl(address pool) external;\\r\\n\\r\\n  function getLendingPoolConfigurator() external view returns (address);\\r\\n\\r\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\r\\n\\r\\n  function getLendingPoolCollateralManager() external view returns (address);\\r\\n\\r\\n  function setLendingPoolCollateralManager(address manager) external;\\r\\n\\r\\n  function getPoolAdmin() external view returns (address);\\r\\n\\r\\n  function setPoolAdmin(address admin) external;\\r\\n\\r\\n  function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n  function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  function setPriceOracle(address priceOracle) external;\\r\\n\\r\\n  function getLendingRateOracle() external view returns (address);\\r\\n\\r\\n  function setLendingRateOracle(address lendingRateOracle) external;\\r\\n}\",\"keccak256\":\"0x8e884c2cac546dc7fa3f7acd41d942460d8eacc6a646e499c378eebe23133eef\",\"license\":\"agpl-3.0\"},\"contracts/connectors/aave/interfaces/IProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IProtocolDataProvider {\\r\\n  struct TokenData {\\r\\n    string symbol;\\r\\n    address tokenAddress;\\r\\n  }\\r\\n\\r\\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\\r\\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\\r\\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\\r\\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\r\\n}\",\"keccak256\":\"0x4fcac122638052f471b7e925152ee59c71a077debdf0529cace4c3dd9d40e61b\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/protocol/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    //timestamp of last update\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint16 id;\\r\\n    //aToken address\\r\\n    address aTokenAddress;\\r\\n    //stableDebtToken address\\r\\n    address stableDebtTokenAddress;\\r\\n    //variableDebtToken address\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the current treasury balance, scaled\\r\\n    uint128 accruedToTreasury;\\r\\n    //the outstanding unbacked aTokens minted through the bridging feature\\r\\n    uint128 unbacked;\\r\\n    //the outstanding debt borrowed against this asset in isolation mode\\r\\n    uint128 isolationModeTotalDebt;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60: asset is paused\\r\\n    //bit 61: borrowing in isolation mode is enabled\\r\\n    //bit 62-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n    //bit 152-167 liquidation protocol fee\\r\\n    //bit 168-175 eMode category\\r\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n    //bit 252-255 unused\\r\\n\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    /**\\r\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n     * asset is borrowed by the user.\\r\\n     */\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct EModeCategory {\\r\\n    // each eMode category has a custom ltv and liquidation threshold\\r\\n    uint16 ltv;\\r\\n    uint16 liquidationThreshold;\\r\\n    uint16 liquidationBonus;\\r\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n    address priceSource;\\r\\n    string label;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {\\r\\n    NONE,\\r\\n    STABLE,\\r\\n    VARIABLE\\r\\n  }\\r\\n\\r\\n  struct ReserveCache {\\r\\n    uint256 currScaledVariableDebt;\\r\\n    uint256 nextScaledVariableDebt;\\r\\n    uint256 currPrincipalStableDebt;\\r\\n    uint256 currAvgStableBorrowRate;\\r\\n    uint256 currTotalStableDebt;\\r\\n    uint256 nextAvgStableBorrowRate;\\r\\n    uint256 nextTotalStableDebt;\\r\\n    uint256 currLiquidityIndex;\\r\\n    uint256 nextLiquidityIndex;\\r\\n    uint256 currVariableBorrowIndex;\\r\\n    uint256 nextVariableBorrowIndex;\\r\\n    uint256 currLiquidityRate;\\r\\n    uint256 currVariableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    ReserveConfigurationMap reserveConfiguration;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    uint40 reserveLastUpdateTimestamp;\\r\\n    uint40 stableDebtLastUpdateTimestamp;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidationCallParams {\\r\\n    uint256 reservesCount;\\r\\n    uint256 debtToCover;\\r\\n    address collateralAsset;\\r\\n    address debtAsset;\\r\\n    address user;\\r\\n    bool receiveAToken;\\r\\n    address priceOracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSupplyParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address asset;\\r\\n    address user;\\r\\n    address onBehalfOf;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint16 referralCode;\\r\\n    bool releaseUnderlying;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    address onBehalfOf;\\r\\n    bool useATokens;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSetUserEModeParams {\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 categoryId;\\r\\n  }\\r\\n\\r\\n  struct FinalizeTransferParams {\\r\\n    address asset;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFromBefore;\\r\\n    uint256 balanceToBefore;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 fromEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct FlashloanParams {\\r\\n    address receiverAddress;\\r\\n    address[] assets;\\r\\n    uint256[] amounts;\\r\\n    uint256[] interestRateModes;\\r\\n    address onBehalfOf;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address addressesProvider;\\r\\n    uint8 userEModeCategory;\\r\\n    bool isAuthorizedFlashBorrower;\\r\\n  }\\r\\n\\r\\n  struct FlashloanSimpleParams {\\r\\n    address receiverAddress;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n  }\\r\\n\\r\\n  struct FlashLoanRepaymentParams {\\r\\n    uint256 amount;\\r\\n    uint256 totalPremium;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    address asset;\\r\\n    address receiverAddress;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct CalculateUserAccountDataParams {\\r\\n    UserConfigurationMap userConfig;\\r\\n    uint256 reservesCount;\\r\\n    address user;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ValidateBorrowParams {\\r\\n    ReserveCache reserveCache;\\r\\n    UserConfigurationMap userConfig;\\r\\n    address asset;\\r\\n    address userAddress;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint256 maxStableLoanPercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n    bool isolationModeActive;\\r\\n    address isolationModeCollateralAddress;\\r\\n    uint256 isolationModeDebtCeiling;\\r\\n  }\\r\\n\\r\\n  struct ValidateLiquidationCallParams {\\r\\n    ReserveCache debtReserveCache;\\r\\n    uint256 totalDebt;\\r\\n    uint256 healthFactor;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct CalculateInterestRatesParams {\\r\\n    uint256 unbacked;\\r\\n    uint256 liquidityAdded;\\r\\n    uint256 liquidityTaken;\\r\\n    uint256 totalStableDebt;\\r\\n    uint256 totalVariableDebt;\\r\\n    uint256 averageStableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    address reserve;\\r\\n    address aToken;\\r\\n  }\\r\\n\\r\\n  struct InitReserveParams {\\r\\n    address asset;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtAddress;\\r\\n    address variableDebtAddress;\\r\\n    address interestRateStrategyAddress;\\r\\n    uint16 reservesCount;\\r\\n    uint16 maxNumberReserves;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x36eb55078351c37daaf5d674808d9cd60250cd6081057d3fe396e68a561f3328\",\"license\":\"BUSL-1.1\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router01.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\r\\n */\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xff1fd307f500470d219a24fa7e9833c8f77d74cff78792c1ddd218d00b6b58ab\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\r\\n */\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x4b7caa5095de7b7f9bd80794e4df994af7f6b6de4c5801228ab08955b1d451c0\",\"license\":\"GNU-3\"},\"contracts/exchanges/UniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../utils/OvnMath.sol\\\";\\r\\nabstract contract UniswapV2Exchange {\\r\\n\\r\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 4;\\r\\n\\r\\n    IUniswapV2Router02 private uniswapRouter;\\r\\n\\r\\n    function _setUniswapRouter(address _uniswapRouter) internal {\\r\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\r\\n    }\\r\\n\\r\\n    function _swapExactTokensForTokens(\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(uniswapRouter), amountInput);\\r\\n\\r\\n        uint256 amountOutMin = _getAmountsOut(inputToken, outputToken, amountInput);\\r\\n        if (amountOutMin == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = uniswapRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            OvnMath.subBasisPoints(amountOutMin, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function _getAmountsOut(\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n        uint[] memory amounts = uniswapRouter.getAmountsOut(amountInput, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\r\\n\\r\\n        IERC20(tokenA).approve(address(uniswapRouter), amountADesired);\\r\\n        IERC20(tokenB).approve(address(uniswapRouter), amountBDesired);\\r\\n\\r\\n        return uniswapRouter.addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            amountADesired,\\r\\n            amountBDesired,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address lpToken,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB) {\\r\\n\\r\\n        IERC20(lpToken).approve(address(uniswapRouter), liquidity);\\r\\n\\r\\n        return uniswapRouter.removeLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xad74a575d6dc1ed72d4b4d7449628e08228f1fb2aedb06f80a2d25c96cbd5e25\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBasicToken {\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c53c94ab507ab0f44e541d130910e822d39d724bd88bf7c66de5a411334cfb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\r\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\r\\n * types.\\r\\n *\\r\\n * This concept is unrelated to a Pool's Asset Managers.\\r\\n */\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\",\"keccak256\":\"0x3509f39516a60dda160e4b06c6767332b7575e481780b267bdc1af3b93493317\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IAsset.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user's Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 cash,\\r\\n        uint256 managed,\\r\\n        uint256 lastChangeBlock,\\r\\n        address assetManager\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool's internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xae7589cc88d2a39410d54f6b12a9fe06a2b8fcb118837499fc2cff60ad132487\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/Am3CurveStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Am3Curve Strategy\\r\\n * @notice Investment strategy for investing stablecoins via Am3Curve\\r\\n */\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport { IAsset } from \\\"../interfaces/balancer/interfaces/IAsset.sol\\\";\\r\\nimport { IVault } from \\\"../interfaces/balancer/interfaces/IVault.sol\\\";\\r\\nimport { ICurvePool } from \\\"./ICurvePool.sol\\\";\\r\\nimport { ICRVMinter } from \\\"./ICRVMinter.sol\\\";\\r\\nimport { ICurveGauge } from \\\"./ICurveGauge.sol\\\";\\r\\nimport { IERC20, BaseCurveStrategy } from \\\"./BaseCurveStrategy.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { UniswapV2Exchange } from \\\"../exchanges/UniswapV2Exchange.sol\\\";\\r\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\r\\nimport { ILendingPoolAddressesProvider } from \\\"../connectors/aave/interfaces/ILendingPoolAddressesProvider.sol\\\";\\r\\nimport { ILendingPool } from \\\"../connectors/aave/interfaces/ILendingPool.sol\\\";\\r\\nimport { IProtocolDataProvider } from \\\"../connectors/aave/interfaces/IProtocolDataProvider.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Am3CurveStrategy is BaseCurveStrategy, UniswapV2Exchange {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    IERC20 public primaryStable;\\r\\n    IERC20 public crvToken;\\r\\n\\r\\n\\r\\n    mapping(address => address) public stableToAmStable;\\r\\n    mapping(address => address) public amStableToAmDebt;\\r\\n\\r\\n    ICurveGauge crvGauge;\\r\\n    ICRVMinter crvMinter;\\r\\n\\r\\n    IERC20 public Superb;\\r\\n    \\r\\n\\r\\n\\r\\n    /**\\r\\n     * Initializer for setting up strategy internal state. This overrides the\\r\\n     * InitializableAbstractStrategy initializer as Curve strategies don't fit\\r\\n     * well within that abstraction.\\r\\n     * @param _platformAddress Address of the am3Crv\\r\\n     * @param _vaultAddress Address of the vault\\r\\n     * @param _rewardTokenAddresses Address of CRV\\r\\n     * @param _assets Addresses of supported assets. MUST be passed in the same\\r\\n     *                order as returned by coins on the pool contract, i.e.\\r\\n     *                USDC\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress, // a3crv Token address\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses, // USDC\\r\\n        address[] calldata _assets, // USDC\\r\\n        address[] calldata _pTokens, // am3CRV Token address\\r\\n        address _primaryStable,\\r\\n        address _crvToken,\\r\\n        address _crvGauge,\\r\\n        address _crvMinter\\r\\n    ) external onlyGovernor initializer {\\r\\n        // Should be set prior to abstract initialize call otherwise\\r\\n        // abstractSetPToken calls will fail\\r\\n        pTokenAddress = _pTokens[0];\\r\\n        primaryStable = IERC20(_primaryStable);\\r\\n        crvToken = IERC20(_crvToken);\\r\\n        crvGauge = ICurveGauge(_crvGauge);\\r\\n        crvMinter = ICRVMinter(_crvMinter);\\r\\n        super._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n    function _setAmAssets(address[] calldata _amAssets) external onlyGovernor {\\r\\n        uint256 assetCount = assetsMapped.length;\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            stableToAmStable[assetsMapped[i]] = _amAssets[i];\\r\\n        }\\r\\n    }\\r\\n    function _setRouter(address _router) external onlyGovernor {\\r\\n        require(_router != address(0), \\\"Zero address not allowed\\\");\\r\\n        _setUniswapRouter(_router);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function deposit(address _asset, uint256 _amount)\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n        nonReentrant\\r\\n    {\\r\\n        // console.log(\\\"Depositing to Am3Curve\\\");\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        require(_amount >= primaryStable.balanceOf(address(this)), \\\"Not enough assets\\\");\\r\\n        require(_amount > 0, \\\"Must deposit something\\\");\\r\\n        emit Deposit(_asset, address(platformAddress), _amount);\\r\\n\\r\\n        // 3Pool requires passing deposit amounts for all 3 assets, set to 0 for        // all\\r\\n        uint256[3] memory _amounts;\\r\\n        uint256 poolCoinIndex = _getCoinIndex(_asset); // DAI:0, USDC:1, USDT:2\\r\\n        // Set the amount on the asset we want to deposit\\r\\n        _amounts[poolCoinIndex] = _amount;\\r\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\r\\n        uint256 assetDecimals = Helpers.getDecimals(stableToAmStable[_asset]);\\r\\n        uint256 depositValue = _amount.scaleBy(18, assetDecimals).divPrecisely(\\r\\n            curvePool.get_virtual_price()\\r\\n        );\\r\\n        uint256 minMintAmount = depositValue.mulTruncate(\\r\\n            uint256(1e18) - maxSlippage\\r\\n        );\\r\\n        // Do the deposit to 3pool\\r\\n        curvePool.add_liquidity(_amounts, minMintAmount, true);\\r\\n        // console.log(\\\"Am3Curve: \\\", IERC20(pTokenAddress).balanceOf(address(this)));\\r\\n        _lpDepositAll();\\r\\n        emit TransferLog(\\\"Depositing to Am3Curve: \\\",_asset , _amount);\\r\\n    }\\r\\n    function depositAll() external override onlyVault nonReentrant {\\r\\n        uint256[3] memory _amounts = [uint256(0), uint256(0), uint256(0)];\\r\\n        uint256 depositValue = 0;\\r\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\r\\n        uint256 curveVirtualPrice = curvePool.get_virtual_price();\\r\\n\\r\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\r\\n            address assetAddress = assetsMapped[i];\\r\\n            uint256 balance = IERC20(assetAddress).balanceOf(address(this));\\r\\n            emit TransferLog(\\\"Depositing All to Am3Curve: \\\",assetAddress , balance);\\r\\n            if (balance > 0) {\\r\\n                uint256 poolCoinIndex = _getCoinIndex(assetAddress);\\r\\n                // Set the amount on the asset we want to deposit\\r\\n                _amounts[poolCoinIndex] = balance;\\r\\n                uint256 assetDecimals = Helpers.getDecimals(assetAddress);\\r\\n                // Get value of deposit in Curve LP token to later determine\\r\\n                // the minMintAmount argument for add_liquidity\\r\\n                depositValue =\\r\\n                    depositValue +\\r\\n                    balance.scaleBy(18, assetDecimals).divPrecisely(\\r\\n                        curveVirtualPrice\\r\\n                    );\\r\\n                emit Deposit(assetAddress, address(platformAddress), balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 minMintAmount = depositValue.mulTruncate(\\r\\n            uint256(1e18) - maxSlippage\\r\\n        );\\r\\n        // Do the deposit to 3pool\\r\\n        curvePool.add_liquidity(_amounts, minMintAmount, true);\\r\\n        // console.log(\\\"Am3Curve: \\\", IERC20(pTokenAddress).balanceOf(address(this)));\\r\\n        // Deposit into Gauge, the PToken is the same (3Crv) for all mapped\\r\\n        // assets, so just get the address from the first one\\r\\n        _lpDepositAll();\\r\\n    }\\r\\n    function withdraw(address _recipient, address _asset, uint256 _amount) external override onlyVault nonReentrant  {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        // Withdraw all from Gauge\\r\\n        (, uint256 gaugePTokens, ) = _getTotalPTokens();\\r\\n        // Withdraw all from Gauge\\r\\n        _lpWithdraw(gaugePTokens);\\r\\n        // Remove liquidity\\r\\n        ICurvePool aaveCurvePool = ICurvePool(platformAddress);\\r\\n        // uint256 totalAm3Crv = IERC20(pTokenAddress).balanceOf(address(this));\\r\\n        // console.log(\\\"am3CRV: \\\", totalAm3Crv);\\r\\n\\r\\n        uint256[3] memory _amounts;\\r\\n        uint256 poolCoinIndex = _getCoinIndex(_asset); // DAI:0, USDC:1, USDT:2\\r\\n        _amounts[poolCoinIndex] = _amount;\\r\\n\\r\\n        uint256 am3CrvTokenToWithdrawFrom = aaveCurvePool.calc_token_amount(_amounts, false);\\r\\n        console.log(\\\"am3CrvTokenToWithdrawFrom\\\", am3CrvTokenToWithdrawFrom);\\r\\n        uint256 recievableOnWithdrawl = aaveCurvePool.calc_withdraw_one_coin(am3CrvTokenToWithdrawFrom,int128(uint128(_getCoinIndex(address(primaryStable)))));\\r\\n        uint256 minAmount = recievableOnWithdrawl.mulTruncate(\\r\\n            uint256(1e18) - maxSlippage\\r\\n        );\\r\\n        aaveCurvePool.remove_liquidity_one_coin(am3CrvTokenToWithdrawFrom, int128(uint128(_getCoinIndex(_asset))), minAmount, true);\\r\\n\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Withdrawing from the Synapse: \\\", primaryStableBalance);\\r\\n        if (primaryStableBalance > 0) {\\r\\n            primaryStable.safeTransfer(_recipient, primaryStableBalance);\\r\\n        }\\r\\n        _lpDepositAll();\\r\\n    }\\r\\n    /**\\r\\n     * @dev Remove all assets from platform and send them to Vault contract.\\r\\n     */\\r\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\r\\n        // Withdraw all from Gauge\\r\\n        (, uint256 gaugePTokens, uint256 totalPTokens) = _getTotalPTokens();\\r\\n        // Withdraw all from Gauge\\r\\n        _lpWithdraw(gaugePTokens);\\r\\n        // Remove liquidity\\r\\n        ICurvePool aaveCurvePool = ICurvePool(platformAddress);\\r\\n\\r\\n        uint256 allAm3CrvTokens = IERC20(pTokenAddress).balanceOf(address(this));\\r\\n        uint256 recievableOnWithdrawl = aaveCurvePool.calc_withdraw_one_coin(allAm3CrvTokens,int128(uint128(_getCoinIndex(address(primaryStable)))));\\r\\n        uint256 minAmount = recievableOnWithdrawl.mulTruncate(\\r\\n            uint256(1e18) - maxSlippage\\r\\n        );\\r\\n        aaveCurvePool.remove_liquidity_one_coin(totalPTokens, int128(uint128(_getCoinIndex(address(primaryStable)))), minAmount, true);\\r\\n        // Transfer assets out of Vault\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Withdrawing from the Synapse: \\\", primaryStableBalance);\\r\\n        if (primaryStableBalance > 0) {\\r\\n            primaryStable.safeTransfer(vaultAddress, primaryStableBalance);\\r\\n        }\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function checkBalance()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // LP tokens in this contract. This should generally be nothing as we\\r\\n        // should always stake the full balance in the Gauge, but include for\\r\\n        // safety\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        uint256 balance;\\r\\n        (, , uint256 totalPTokens) = _getTotalPTokens();\\r\\n        // console.log(\\\"Am3Curve - checkBalance - totalPTokens: \\\", totalPTokens);\\r\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\r\\n        if (totalPTokens > 0) {\\r\\n            balance = curvePool.calc_withdraw_one_coin(totalPTokens,int128(uint128(_getCoinIndex(address(primaryStable)))));\\r\\n            // console.log(\\\"Am3Curve - checkBalance - primaryToken: \\\", balance);\\r\\n        }\\r\\n        return primaryStableBalance + balance;\\r\\n    }\\r\\n\\r\\n    function collectRewardTokens()\\r\\n        external\\r\\n        override\\r\\n        onlyHarvester\\r\\n        nonReentrant\\r\\n    {\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function _collectRewards() internal {\\r\\n        crvMinter.mint(address(crvGauge));\\r\\n        uint256 crvBalance = crvToken.balanceOf(address(this));\\r\\n        if (crvBalance != 0) {\\r\\n            _swapExactTokensForTokens(\\r\\n                address(crvToken),\\r\\n                address(primaryStable),\\r\\n                crvBalance,\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n        uint256 balance = primaryStable.balanceOf(address(this));\\r\\n        emit RewardTokenCollected(\\r\\n            harvesterAddress,\\r\\n            address(primaryStable),\\r\\n            balance\\r\\n        );\\r\\n        primaryStable.transfer(harvesterAddress, balance);\\r\\n    }\\r\\n    function _lpDepositAll() internal override {\\r\\n        uint256 am3crvBalance = IERC20(pTokenAddress).balanceOf(address(this));\\r\\n        if (am3crvBalance > 0) {\\r\\n            IERC20(pTokenAddress).safeApprove(address(crvGauge),am3crvBalance);\\r\\n            crvGauge.deposit(am3crvBalance, address(this), false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _lpWithdraw(uint256 numPTokens) internal override {\\r\\n        crvGauge.withdraw(numPTokens,address(this),true);\\r\\n    }\\r\\n    function _getTotalPTokens()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 contractPTokens,\\r\\n            uint256 gaugePTokens, // gauge is a misnomer here, need a better name\\r\\n            uint256 totalPTokens\\r\\n        )\\r\\n    {\\r\\n        contractPTokens = IERC20(pTokenAddress).balanceOf(address(this));\\r\\n        gaugePTokens = crvGauge.balanceOf(address(this));\\r\\n        totalPTokens = contractPTokens + gaugePTokens;\\r\\n    }\\r\\n    /* NOT NEEDED */\\r\\n    function _approveBase() internal override {\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a025ddf1e691b96743d9dcc19419d6f8716fabb6460882d4736594fd806687a\",\"license\":\"agpl-3.0\"},\"contracts/strategies/BaseCurveStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Curve 3Pool Strategy\\r\\n * @notice Investment strategy for investing stablecoins via Curve 3Pool\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport { ICurvePool } from \\\"./ICurvePool.sol\\\";\\r\\nimport { ICRVMinter } from \\\"./ICRVMinter.sol\\\";\\r\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\r\\n\\r\\nabstract contract BaseCurveStrategy is InitializableAbstractStrategy {\\r\\n    using StableMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 internal constant maxSlippage = 1e16; // 1%, same as the Curve UI\\r\\n    address internal pTokenAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit asset into the Curve 3Pool\\r\\n     * @param _asset Address of asset to deposit\\r\\n     * @param _amount Amount of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount)\\r\\n        external\\r\\n        override\\r\\n        virtual\\r\\n        onlyVault\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_amount > 0, \\\"Must deposit something\\\");\\r\\n        emit Deposit(_asset, address(platformAddress), _amount);\\r\\n        // 3Pool requires passing deposit amounts for all 3 assets, set to 0 for\\r\\n        // all\\r\\n        uint256[3] memory _amounts;\\r\\n        uint256 poolCoinIndex = _getCoinIndex(_asset);\\r\\n        // Set the amount on the asset we want to deposit\\r\\n        _amounts[poolCoinIndex] = _amount;\\r\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\r\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\r\\n        uint256 depositValue = _amount.scaleBy(18, assetDecimals).divPrecisely(\\r\\n            curvePool.get_virtual_price()\\r\\n        );\\r\\n        uint256 minMintAmount = depositValue.mulTruncate(\\r\\n            uint256(1e18) - maxSlippage\\r\\n        );\\r\\n        // Do the deposit to 3pool\\r\\n        curvePool.add_liquidity(_amounts, minMintAmount);\\r\\n        _lpDepositAll();\\r\\n    }\\r\\n\\r\\n    function _lpDepositAll() internal virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit the entire balance of any supported asset into the Curve 3pool\\r\\n     */\\r\\n    function depositAll() external override virtual onlyVault nonReentrant {\\r\\n        uint256[3] memory _amounts = [uint256(0), uint256(0), uint256(0)];\\r\\n        uint256 depositValue = 0;\\r\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\r\\n        uint256 curveVirtualPrice = curvePool.get_virtual_price();\\r\\n\\r\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\r\\n            address assetAddress = assetsMapped[i];\\r\\n            uint256 balance = IERC20(assetAddress).balanceOf(address(this));\\r\\n            if (balance > 0) {\\r\\n                uint256 poolCoinIndex = _getCoinIndex(assetAddress);\\r\\n                // Set the amount on the asset we want to deposit\\r\\n                _amounts[poolCoinIndex] = balance;\\r\\n                uint256 assetDecimals = Helpers.getDecimals(assetAddress);\\r\\n                // Get value of deposit in Curve LP token to later determine\\r\\n                // the minMintAmount argument for add_liquidity\\r\\n                depositValue =\\r\\n                    depositValue +\\r\\n                    balance.scaleBy(18, assetDecimals).divPrecisely(\\r\\n                        curveVirtualPrice\\r\\n                    );\\r\\n                emit Deposit(assetAddress, address(platformAddress), balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 minMintAmount = depositValue.mulTruncate(\\r\\n            uint256(1e18) - maxSlippage\\r\\n        );\\r\\n        // Do the deposit to 3pool\\r\\n        curvePool.add_liquidity(_amounts, minMintAmount);\\r\\n        // Deposit into Gauge, the PToken is the same (3Crv) for all mapped\\r\\n        // assets, so just get the address from the first one\\r\\n        _lpDepositAll();\\r\\n    }\\r\\n\\r\\n    function _lpWithdraw(uint256 numPTokens) internal virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw asset from Curve 3Pool\\r\\n     * @param _recipient Address to receive withdrawn asset\\r\\n     * @param _asset Address of asset to withdraw\\r\\n     * @param _amount Amount of asset to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override virtual onlyVault nonReentrant {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        emit Withdrawal(_asset, address(assetToPToken[_asset]), _amount);\\r\\n\\r\\n        (uint256 contractPTokens, , uint256 totalPTokens) = _getTotalPTokens();\\r\\n\\r\\n        uint256 coinIndex = _getCoinIndex(_asset);\\r\\n        int128 curveCoinIndex = int128(uint128(coinIndex));\\r\\n        // Calculate the max amount of the asset we'd get if we withdrew all the\\r\\n        // platform tokens\\r\\n        ICurvePool curvePool = ICurvePool(platformAddress);\\r\\n        // Calculate how many platform tokens we need to withdraw the asset\\r\\n        // amount in the worst case (i.e withdrawing all LP tokens)\\r\\n        uint256 maxAmount = curvePool.calc_withdraw_one_coin(\\r\\n            totalPTokens,\\r\\n            curveCoinIndex\\r\\n        );\\r\\n        uint256 maxBurnedPTokens = (totalPTokens * _amount) / maxAmount;\\r\\n\\r\\n        // Not enough in this contract or in the Gauge, can't proceed\\r\\n        require(totalPTokens > maxBurnedPTokens, \\\"Insufficient 3CRV balance\\\");\\r\\n        // We have enough LP tokens, make sure they are all on this contract\\r\\n        if (contractPTokens < maxBurnedPTokens) {\\r\\n            _lpWithdraw(maxBurnedPTokens - contractPTokens);\\r\\n        }\\r\\n\\r\\n        uint256[3] memory _amounts = [uint256(0), uint256(0), uint256(0)];\\r\\n        _amounts[coinIndex] = _amount;\\r\\n        curvePool.remove_liquidity_imbalance(_amounts, maxBurnedPTokens);\\r\\n\\r\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove all assets from platform and send them to Vault contract.\\r\\n     */\\r\\n    function withdrawAll() external override virtual onlyVaultOrGovernor nonReentrant {\\r\\n        // Withdraw all from Gauge\\r\\n        (, uint256 gaugePTokens, uint256 totalPTokens) = _getTotalPTokens();\\r\\n        _lpWithdraw(gaugePTokens);\\r\\n        // Withdraws are proportional to assets held by 3Pool\\r\\n        uint256[3] memory minWithdrawAmounts = [\\r\\n            uint256(0),\\r\\n            uint256(0),\\r\\n            uint256(0)\\r\\n        ];\\r\\n        // Remove liquidity\\r\\n        ICurvePool threePool = ICurvePool(platformAddress);\\r\\n        threePool.remove_liquidity(totalPTokens, minWithdrawAmounts);\\r\\n        // Transfer assets out of Vault\\r\\n        // Note that Curve will provide all 3 of the assets in 3pool even if\\r\\n        // we have not set PToken addresses for all of them in this strategy\\r\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\r\\n            IERC20 asset = IERC20(threePool.coins(i));\\r\\n            asset.safeTransfer(vaultAddress, asset.balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total asset value held in the platform\\r\\n     * @return balance    Total value of the asset in the platform\\r\\n     */\\r\\n    function checkBalance()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\r\\n     * @param _asset Address of the asset\\r\\n     */\\r\\n    function supportsAsset(address _asset)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return assetToPToken[_asset] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the spending of all assets by their corresponding pool tokens,\\r\\n     *      if for some reason is it necessary.\\r\\n     */\\r\\n    function safeApproveAllTokens()\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n        nonReentrant\\r\\n    {\\r\\n        _approveBase();\\r\\n        // This strategy is a special case since it only supports one asset\\r\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\r\\n            _approveAsset(assetsMapped[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the total platform token balance (i.e. 3CRV) that exist in\\r\\n     * this contract or is staked in the Gauge (or in other words, the total\\r\\n     * amount platform tokens we own).\\r\\n     * @return contractPTokens Amount of platform tokens in this contract\\r\\n     * @return gaugePTokens Amount of platform tokens staked in gauge\\r\\n     * @return totalPTokens Total amount of platform tokens in native decimals\\r\\n     */\\r\\n    function _getTotalPTokens()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            uint256 contractPTokens,\\r\\n            uint256 gaugePTokens,\\r\\n            uint256 totalPTokens\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Call the necessary approvals for the Curve pool and gauge\\r\\n     * @param _asset Address of the asset\\r\\n     */\\r\\n    function _abstractSetPToken(address _asset, address _pToken)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        _approveAsset(_asset);\\r\\n    }\\r\\n\\r\\n    function _approveAsset(address _asset) internal {\\r\\n        IERC20 asset = IERC20(_asset);\\r\\n        // 3Pool for asset (required for adding liquidity)\\r\\n        asset.safeApprove(platformAddress, 0);\\r\\n        asset.safeApprove(platformAddress, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function _approveBase() internal virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the index of the coin\\r\\n     */\\r\\n    function _getCoinIndex(address _asset) internal view returns (uint256) {\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            if (assetsMapped[i] == _asset) return i;\\r\\n        }\\r\\n        revert(\\\"Invalid 3pool asset\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c0154d005431683277bae15e9ae7d88a211ad1a802c4fe5aa3d9276c15e8cf4\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ICRVMinter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICRVMinter {\\r\\n    function mint(address gaugeAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x086269368a7e46e2917d45bbb422eb6ec4f27a7a3d8b4396c9cc5ceb4a5dd70b\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ICurveGauge.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICurveGauge {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 value, address account) external;\\r\\n    function deposit(uint256 value, address account, bool claimRewards) external;\\r\\n    function deposit(uint256 value) external;\\r\\n    \\r\\n    function withdraw(uint256 value) external;\\r\\n    function withdraw(uint256 value, bool claimRewards) external;\\r\\n    function withdraw(uint256 value, address _user, bool claimRewards) external;\\r\\n\\r\\n    function claim_rewards() external;\\r\\n    function claim_rewards(address account) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xee5c681f93d81401420199fe0b4687c5d88e3c9abfde113a4e2636e319ceaa5f\",\"license\":\"agpl-3.0\"},\"contracts/strategies/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICurvePool {\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min) external;\\r\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min, bool _use_underlying) external;\\r\\n\\r\\n    function balances(uint256) external view returns (uint256);\\r\\n\\r\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _deposit)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _amount,\\r\\n        int128 _index,\\r\\n        uint256 _minAmount\\r\\n    ) external;\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 _amount,\\r\\n        int128 _index,\\r\\n        uint256 _minAmount,\\r\\n        bool _use_underlying\\r\\n\\r\\n    ) external;\\r\\n\\r\\n    function remove_liquidity(\\r\\n        uint256 _amount,\\r\\n        uint256[3] calldata _minWithdrawAmounts\\r\\n    ) external;\\r\\n\\r\\n    function remove_liquidity(\\r\\n        uint256 _amount,\\r\\n        uint256[3] calldata _minWithdrawAmounts,\\r\\n        bool _use_underlying\\r\\n    ) external;\\r\\n\\r\\n    function calc_withdraw_one_coin(uint256 _amount, int128 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function coins(uint256 _index) external view returns (address);\\r\\n\\r\\n    function remove_liquidity_imbalance(\\r\\n        uint256[3] calldata _amounts,\\r\\n        uint256 maxBurnAmount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x39d45fe3454821ff664f4fe29cc3f39b15e8751d013f8c76ad6a972d291e376e\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\r\\n\\r\\nlibrary Helpers {\\r\\n    /**\\r\\n     * @notice Fetch the `symbol()` from an ERC20 token\\r\\n     * @dev Grabs the `symbol()` from a contract\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return string Symbol of the ERC20 token\\r\\n     */\\r\\n    function getSymbol(address _token) internal view returns (string memory) {\\r\\n        string memory symbol = IBasicToken(_token).symbol();\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetch the `decimals()` from an ERC20 token\\r\\n     * @dev Grabs the `decimals()` from a contract and fails if\\r\\n     *      the decimal value does not live within a certain range\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return uint256 Decimals of the ERC20 token\\r\\n     */\\r\\n    function getDecimals(address _token) internal view returns (uint256) {\\r\\n        uint256 decimals = IBasicToken(_token).decimals();\\r\\n        require(\\r\\n            decimals >= 4 && decimals <= 18,\\r\\n            \\\"Token must have sufficient decimal places\\\"\\r\\n        );\\r\\n\\r\\n        return decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd811b2c8f5435e41200458a3853f6bacc86efe20a0daa65d8497abbf821e44fa\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event PTokenAdded(address indexed _asset, address _pToken);\\r\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\r\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event RewardTokenCollected(\\r\\n        address recipient,\\r\\n        address rewardToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event RewardTokenAddressesUpdated(\\r\\n        address[] _oldAddresses,\\r\\n        address[] _newAddresses\\r\\n    );\\r\\n    event HarvesterAddressesUpdated(\\r\\n        address _oldHarvesterAddress,\\r\\n        address _newHarvesterAddress\\r\\n    );\\r\\n    event TransferLog (\\r\\n        string _message,\\r\\n        address _asset,\\r\\n        uint256 _number\\r\\n    );\\r\\n\\r\\n    // Core address for the given platform\\r\\n    address public platformAddress;\\r\\n\\r\\n    address public vaultAddress;\\r\\n\\r\\n    // asset => pToken (Platform Specific Token Address)\\r\\n    mapping(address => address) public assetToPToken;\\r\\n\\r\\n    // Full list of all assets supported here\\r\\n    address[] internal assetsMapped;\\r\\n\\r\\n    // Deprecated: Reward token address\\r\\n    // slither-disable-next-line constable-states\\r\\n    address public _deprecated_rewardTokenAddress;\\r\\n\\r\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\r\\n    // slither-disable-next-line constable-states\\r\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\r\\n\\r\\n    // Address of the one address allowed to collect reward tokens\\r\\n    address public harvesterAddress;\\r\\n\\r\\n    // Reward token addresses\\r\\n    address[] public rewardTokenAddresses;\\r\\n    // Reserved for future expansion\\r\\n    int256[98] private _reserved;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal initialize function, to set up initial internal state\\r\\n     * @param _platformAddress Generic platform address\\r\\n     * @param _vaultAddress Address of the Vault\\r\\n     * @param _rewardTokenAddresses Address of reward token for platform\\r\\n     * @param _assets Addresses of initial supported assets\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] calldata _assets,\\r\\n        address[] calldata _pTokens\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableAbstractStrategy._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] memory _assets,\\r\\n        address[] memory _pTokens\\r\\n    ) internal {\\r\\n        platformAddress = _platformAddress;\\r\\n        vaultAddress = _vaultAddress;\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Collect accumulated reward token and send to Vault.\\r\\n     */\\r\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\r\\n        _collectRewardTokens();\\r\\n    }\\r\\n\\r\\n    function _collectRewardTokens() internal {\\r\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\r\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\r\\n            uint256 balance = rewardToken.balanceOf(address(this));\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                rewardTokenAddresses[i],\\r\\n                balance\\r\\n            );\\r\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault.\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Harvester.\\r\\n     */\\r\\n    modifier onlyHarvester() {\\r\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault or Governor.\\r\\n     */\\r\\n    modifier onlyVaultOrGovernor() {\\r\\n        require(\\r\\n            msg.sender == vaultAddress || msg.sender == governor(),\\r\\n            \\\"Caller is not the Vault or Governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _rewardTokenAddresses Address array of the reward token\\r\\n     */\\r\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\r\\n            require(\\r\\n                _rewardTokenAddresses[i] != address(0),\\r\\n                \\\"Can not set an empty address as a reward token\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RewardTokenAddressesUpdated(\\r\\n            rewardTokenAddresses,\\r\\n            _rewardTokenAddresses\\r\\n        );\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the reward token addresses.\\r\\n     * @return address[] the reward token addresses.\\r\\n     */\\r\\n    function getRewardTokenAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function setPTokenAddress(address _asset, address _pToken)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setPTokenAddress(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a supported asset by passing its index.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _assetIndex Index of the asset to be removed\\r\\n     */\\r\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\r\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\r\\n        address asset = assetsMapped[_assetIndex];\\r\\n        address pToken = assetToPToken[asset];\\r\\n\\r\\n        if (_assetIndex < assetsMapped.length - 1) {\\r\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\r\\n        }\\r\\n        assetsMapped.pop();\\r\\n        assetToPToken[asset] = address(0);\\r\\n\\r\\n        emit PTokenRemoved(asset, pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      Add to internal mappings and execute the platform specific,\\r\\n     * abstract method `_abstractSetPToken`\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\r\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\r\\n        require(\\r\\n            _asset != address(0) && _pToken != address(0),\\r\\n            \\\"Invalid addresses\\\"\\r\\n        );\\r\\n\\r\\n        assetToPToken[_asset] = _pToken;\\r\\n        assetsMapped.push(_asset);\\r\\n\\r\\n        emit PTokenAdded(_asset, _pToken);\\r\\n\\r\\n        _abstractSetPToken(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      strategy contracts, i.e. mistaken sends.\\r\\n     * @param _asset Address for the asset\\r\\n     * @param _amount Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address _asset, uint256 _amount)\\r\\n        public\\r\\n        onlyGovernor\\r\\n    {\\r\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _harvesterAddress Address of the harvester\\r\\n     */\\r\\n    function setHarvesterAddress(address _harvesterAddress)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        harvesterAddress = _harvesterAddress;\\r\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                 Abstract\\r\\n    ****************************************/\\r\\n\\r\\n    function _abstractSetPToken(address _asset, address _pToken)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    function safeApproveAllTokens() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit an amount of asset into the platform\\r\\n     * @param _asset               Address for the asset\\r\\n     * @param _amount              Units of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit balance of all supported assets into the platform\\r\\n     */\\r\\n    function depositAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an amount of asset from the platform.\\r\\n     * @param _recipient         Address to which the asset should be sent\\r\\n     * @param _asset             Address of the asset\\r\\n     * @param _amount            Units of asset to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\r\\n     */\\r\\n    function withdrawAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total primary stable value held in the platform.\\r\\n     *      This includes any interest that was generated since depositing.\\r\\n     * @return balance    Total value of the asset in the platform\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an asset is supported.\\r\\n     * @param _asset    Address of the asset\\r\\n     * @return bool     Whether asset is supported\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x232664a78773fffce1d3f7cf05c43d7a08c81966ace4ce55fcfceaa2555589a5\",\"license\":\"agpl-3.0\"},\"contracts/utils/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x72976e446429837ea5cf2b52b6a9b8e0dbf2790e52b1c0d218103cb08daf2a2e\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200002a3360008051602062003d7483398151915255565b60008051602062003d74833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a3613cf280620000826000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80639136616a11610125578063d1431ffd116100ad578063dbe55e561161007c578063dbe55e561461049d578063de5f6268146104b0578063f664b3d9146104b8578063f6ca71b0146104c0578063f817bc63146104d557600080fd5b8063d1431ffd14610451578063d2f2489314610464578063d38bfff414610477578063d9caed121461048a57600080fd5b8063ad1728cb116100f4578063ad1728cb146103ef578063b59c3e79146103f7578063c2e1e3f414610420578063c71daccb14610433578063c7af33521461044957600080fd5b80639136616a146103785780639688d2fc1461038b57806396d538bb1461039e578063aa388af6146103b157600080fd5b8063430bf08a116101a857806367c7066c1161017757806367c7066c1461032457806368727617146103375780637b2d9b2c1461034a578063853828b61461035d5780638eac22231461036557600080fd5b8063430bf08a146102ee57806347e7ef24146103015780635a063f63146103145780635d36b1901461031c57600080fd5b806315d4573a116101e457806315d4573a1461028c5780632e655201146102b55780632f0fbd59146102c857806332d7d66d146102db57600080fd5b80630c340a24146102165780630ed57b3a1461023b5780630fc3b4c4146102505780631072cbea14610279575b600080fd5b61021e6104de565b6040516001600160a01b0390911681526020015b60405180910390f35b61024e61024936600461339a565b6104fb565b005b61021e61025e36600461337f565b6035602052600090815260409020546001600160a01b031681565b61024e6102873660046135d3565b610536565b61021e61029a36600461337f565b60d3602052600090815260409020546001600160a01b031681565b60375461021e906001600160a01b031681565b61024e6102d63660046135fd565b610576565b60d15461021e906001600160a01b031681565b60345461021e906001600160a01b031681565b61024e61030f3660046135d3565b61063e565b61024e610a4a565b61024e610ae9565b60395461021e906001600160a01b031681565b60d65461021e906001600160a01b031681565b61021e610358366004613726565b610b8f565b61024e610bb9565b61024e610373366004613488565b610f17565b61024e610386366004613726565b61111f565b61024e6103993660046133cd565b6112ea565b61024e6103ac3660046135fd565b6113f3565b6103df6103bf36600461337f565b6001600160a01b0390811660009081526035602052604090205416151590565b6040519015158152602001610232565b61024e611519565b61021e61040536600461337f565b60d2602052600090815260409020546001600160a01b031681565b61024e61042e36600461337f565b6115ca565b61043b611649565b604051908152602001610232565b6103df61179c565b61024e61045f36600461337f565b6117cd565b60d05461021e906001600160a01b031681565b61024e61048536600461337f565b611868565b61024e610498366004613597565b61190c565b60335461021e906001600160a01b031681565b61024e611cc9565b61043b600481565b6104c8612041565b604051610232919061382a565b61043b60385481565b60006104f6600080516020613c9d8339815191525490565b905090565b61050361179c565b6105285760405162461bcd60e51b815260040161051f90613980565b60405180910390fd5b61053282826120a3565b5050565b61053e61179c565b61055a5760405162461bcd60e51b815260040161051f90613980565b6105326105656104de565b6001600160a01b0384169083612208565b61057e61179c565b61059a5760405162461bcd60e51b815260040161051f90613980565b60365460005b81811015610638578383828181106105ba576105ba613c50565b90506020020160208101906105cf919061337f565b60d26000603684815481106105e6576105e6613c50565b6000918252602080832091909101546001600160a01b039081168452908301939093526040909101902080546001600160a01b031916929091169190911790558061063081613c09565b9150506105a0565b50505050565b6034546001600160a01b031633146106685760405162461bcd60e51b815260040161051f90613949565b600080516020613c7d8339815191528054600281141561069a5760405162461bcd60e51b815260040161051f90613a05565b6002825560d0546001600160a01b038581169116146106f25760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604482015260640161051f565b60d0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061373f565b8310156107b05760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f7567682061737365747360781b604482015260640161051f565b600083116107f95760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015260640161051f565b603354604080516001600160a01b03928316815260208101869052918616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a261084b613281565b60006108568661226b565b90508482826003811061086b5761086b613c50565b602090810291909101919091526033546001600160a01b03888116600090815260d2909352604083205491811692916108a49116612307565b9050600061092e836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e457600080fd5b505afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061373f565b6109288a6012866123f6565b9061245a565b9050600061095561094e662386f26fc10000670de0b6b3a7640000613bc6565b8390612483565b6040516315b74c9d60e11b81529091506001600160a01b03851690632b6e993a9061098990899085906001906004016138f0565b600060405180830381600087803b1580156109a357600080fd5b505af11580156109b7573d6000803e3d6000fd5b505050506109c3612498565b6040805160608082526018908201527f4465706f736974696e6720746f20416d3343757276653a20000000000000000060808201526001600160a01b038c1660208201529081018a90527ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a9060a00160405180910390a15050505050506001825550505050565b6039546001600160a01b03163314610aa45760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f7420746865204861727665737465720000000000604482015260640161051f565b600080516020613c7d83398151915280546002811415610ad65760405162461bcd60e51b815260040161051f90613a05565b60028255610ae26125a8565b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b031614610b845760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161051f565b610b8d33612808565b565b603a8181548110610b9f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610bea5750610bd56104de565b6001600160a01b0316336001600160a01b0316145b610c425760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b606482015260840161051f565b600080516020613c7d83398151915280546002811415610c745760405162461bcd60e51b815260040161051f90613a05565b60028255600080610c836128c9565b9250925050610c91826129d8565b603354609d546040516370a0823160e01b81523060048201526001600160a01b039283169260009216906370a082319060240160206040518083038186803b158015610cdc57600080fd5b505afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d14919061373f565b60d0549091506000906001600160a01b038085169163cc2b27d7918591610d3b911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db2919061373f565b90506000610dd261094e662386f26fc10000670de0b6b3a7640000613bc6565b60d0549091506001600160a01b038086169163517a55a3918891610df6911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b60248201526044810184905260016064820152608401600060405180830381600087803b158015610e4557600080fd5b505af1158015610e59573d6000803e3d6000fd5b505060d0546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610ea357600080fd5b505afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061373f565b90508015610f005760345460d054610f00916001600160a01b03918216911683612208565b610f086125a8565b50505050505050600182555050565b610f1f61179c565b610f3b5760405162461bcd60e51b815260040161051f90613980565b600054610100900460ff1680610f54575060005460ff16155b610f705760405162461bcd60e51b815260040161051f906139b7565b600054610100900460ff16158015610f92576000805461ffff19166101011790555b86866000818110610fa557610fa5613c50565b9050602002016020810190610fba919061337f565b609d60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460d060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508360d160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508260d460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160d560006101000a8154816001600160a01b0302191690836001600160a01b031602179055506110fe8d8d8d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a1492505050565b8015611110576000805461ff00191690555b50505050505050505050505050565b61112761179c565b6111435760405162461bcd60e51b815260040161051f90613980565b60365481106111845760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161051f565b60006036828154811061119957611199613c50565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906111d690600190613bc6565b83101561125857603680546111ed90600190613bc6565b815481106111fd576111fd613c50565b600091825260209091200154603680546001600160a01b03909216918590811061122957611229613c50565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061126957611269613c3a565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6112f261179c565b61130e5760405162461bcd60e51b815260040161051f90613980565b600054610100900460ff1680611327575060005460ff16155b6113435760405162461bcd60e51b815260040161051f906139b7565b600054610100900460ff16158015611365576000805461ffff19166101011790555b6113d68989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612a1492505050565b80156113e8576000805461ff00191690555b505050505050505050565b6113fb61179c565b6114175760405162461bcd60e51b815260040161051f90613980565b60005b818110156114cb57600083838381811061143657611436613c50565b905060200201602081019061144b919061337f565b6001600160a01b031614156114b95760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b606482015260840161051f565b806114c381613c09565b91505061141a565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a83836040516115009392919061383d565b60405180910390a1611514603a838361329f565b505050565b61152161179c565b61153d5760405162461bcd60e51b815260040161051f90613980565b600080516020613c7d8339815191528054600281141561156f5760405162461bcd60e51b815260040161051f90613a05565b6002825560005b6036548110156115c2576115b06036828154811061159657611596613c50565b6000918252602090912001546001600160a01b0316612afd565b806115ba81613c09565b915050611576565b505060019055565b6115d261179c565b6115ee5760405162461bcd60e51b815260040161051f90613980565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60d0546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c9919061373f565b90506000806116d66128c9565b6033549093506001600160a01b031691505081156117895760d0546001600160a01b038083169163cc2b27d791859161170f911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611786919061373f565b92505b6117938385613a82565b94505050505090565b60006117b4600080516020613c9d8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117d561179c565b6117f15760405162461bcd60e51b815260040161051f90613980565b6001600160a01b0381166118475760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161051f565b609e80546001600160a01b0319166001600160a01b03831617905550565b50565b61187061179c565b61188c5760405162461bcd60e51b815260040161051f90613980565b6118b4817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b03166118d4600080516020613c9d8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146119365760405162461bcd60e51b815260040161051f90613949565b600080516020613c7d833981519152805460028114156119685760405162461bcd60e51b815260040161051f90613a05565b6002825560d0546001600160a01b038581169116146119c05760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604482015260640161051f565b60006119ca6128c9565b509150506119d7816129d8565b6033546001600160a01b03166119eb613281565b60006119f68861226b565b905086828260038110611a0b57611a0b613c50565b6020020152604051633883e11960e01b81526000906001600160a01b03851690633883e11990611a4190869085906004016138d3565b602060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a93919061373f565b9050611ad46040518060400160405280601981526020017f616d33437276546f6b656e546f576974686472617746726f6d0000000000000081525082612b36565b60d0546000906001600160a01b038087169163cc2b27d7918591611af8911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015611b3757600080fd5b505afa158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f919061373f565b90506000611b8f61094e662386f26fc10000670de0b6b3a7640000613bc6565b9050856001600160a01b031663517a55a384611baa8e61226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b60248201526044810184905260016064820152608401600060405180830381600087803b158015611bf957600080fd5b505af1158015611c0d573d6000803e3d6000fd5b505060d0546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015611c5757600080fd5b505afa158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f919061373f565b90508015611cae5760d054611cae906001600160a01b03168e83612208565b611cb6612498565b5050505050505050600182555050505050565b6034546001600160a01b03163314611cf35760405162461bcd60e51b815260040161051f90613949565b600080516020613c7d83398151915280546002811415611d255760405162461bcd60e51b815260040161051f90613a05565b6002825560408051606081018252600080825260208083018290528284018290526033548451630176f71760e71b81529451939492936001600160a01b03909116928492849263bb7b8b80926004808201939291829003018186803b158015611d8d57600080fd5b505afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc5919061373f565b905060005b603654811015611fa057600060368281548110611de957611de9613c50565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f919061373f565b604080516060808252601c908201527f4465706f736974696e6720416c6c20746f20416d3343757276653a200000000060808201526001600160a01b03851660208201529081018290529091507ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a9060a00160405180910390a18015611f8b576000611efa8361226b565b905081888260038110611f0f57611f0f613c50565b60200201526000611f1f84612307565b9050611f3186610928856012856123f6565b611f3b9089613a82565b603354604080516001600160a01b03928316815260208101879052929a50908616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a250505b50508080611f9890613c09565b915050611dca565b506000611fc6611fbf662386f26fc10000670de0b6b3a7640000613bc6565b8590612483565b6040516315b74c9d60e11b81529091506001600160a01b03841690632b6e993a90611ffa90889085906001906004016138f0565b600060405180830381600087803b15801561201457600080fd5b505af1158015612028573d6000803e3d6000fd5b50505050612034612498565b5050505050600182555050565b6060603a80548060200260200160405190810160405280929190818152602001828054801561209957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161207b575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156121005760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015260640161051f565b6001600160a01b0382161580159061212057506001600160a01b03811615155b6121605760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015260640161051f565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26105328282612b7b565b6040516001600160a01b03831660248201526044810182905261151490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b84565b6000805b60038110156122c857826001600160a01b03166036828154811061229557612295613c50565b6000918252602090912001546001600160a01b031614156122b65792915050565b806122c081613c09565b91505061226f565b5060405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59080cdc1bdbdb08185cdcd95d606a1b604482015260640161051f565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561234357600080fd5b505afa158015612357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237b9190613758565b60ff16905060048110158015612392575060128111155b6123f05760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b606482015260840161051f565b92915050565b6000818311156124265761241f61240d8385613bc6565b61241890600a613aff565b8590612c56565b9350612450565b818310156124505761244d61243b8484613bc6565b61244690600a613aff565b8590612c62565b93505b50825b9392505050565b60008061246f84670de0b6b3a7640000612c56565b905061247b8184612c62565b949350505050565b60006124538383670de0b6b3a7640000612c6e565b609d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156124dc57600080fd5b505afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612514919061373f565b905080156118655760d454609d54612539916001600160a01b03918216911683612c90565b60d4546040516383df674760e01b815260048101839052306024820152600060448201526001600160a01b03909116906383df6747906064015b600060405180830381600087803b15801561258d57600080fd5b505af11580156125a1573d6000803e3d6000fd5b5050505050565b60d55460d4546040516335313c2160e11b81526001600160a01b039182166004820152911690636a62784290602401600060405180830381600087803b1580156125f157600080fd5b505af1158015612605573d6000803e3d6000fd5b505060d1546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561264f57600080fd5b505afa158015612663573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612687919061373f565b905080156126af5760d15460d0546126ad916001600160a01b0390811691168330612db4565b505b60d0546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156126f357600080fd5b505afa158015612707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272b919061373f565b60395460d054604080516001600160a01b03938416815292909116602083015281018290529091507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a160d05460395460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b1580156127d057600080fd5b505af11580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190613704565b6001600160a01b03811661285e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161051f565b806001600160a01b031661287e600080516020613c9d8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361186581600080516020613c9d83398151915255565b609d546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b15801561291157600080fd5b505afa158015612925573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612949919061373f565b60d4546040516370a0823160e01b81523060048201529194506001600160a01b0316906370a082319060240160206040518083038186803b15801561298d57600080fd5b505afa1580156129a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c5919061373f565b91506129d18284613a82565b9050909192565b60d45460405162ebf5dd60e01b815260048101839052306024820152600160448201526001600160a01b039091169062ebf5dd90606401612573565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612a50603a858561329f565b50815181518114612a9a5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015260640161051f565b60005b81811015612af357612ae1848281518110612aba57612aba613c50565b6020026020010151848381518110612ad457612ad4613c50565b60200260200101516120a3565b80612aeb81613c09565b915050612a9d565b5050505050505050565b6033548190612b1a906001600160a01b0380841691166000612c90565b603354610532906001600160a01b038381169116600019612c90565b6105328282604051602401612b4c929190613927565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052612fa0565b61053282612afd565b6000612bd9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612fc19092919063ffffffff16565b8051909150156115145780806020019051810190612bf79190613704565b6115145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051f565b60006124538284613ba7565b60006124538284613a9a565b600080612c7b8585612c56565b9050612c878184612c62565b95945050505050565b801580612d195750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612cdf57600080fd5b505afa158015612cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d17919061373f565b155b612d845760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161051f565b6040516001600160a01b03831660248201526044810182905261151490849063095ea7b360e01b90606401612234565b609e5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905260009186169063095ea7b390604401602060405180830381600087803b158015612e0457600080fd5b505af1158015612e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3c9190613704565b506000612e4a868686612fd0565b905080612e5b57600091505061247b565b6040805160028082526060820183526000926020830190803683370190505090508681600081518110612e9057612e90613c50565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612ec457612ec4613c50565b6001600160a01b039283166020918202929092010152609e54600091166338ed173987612ef28660046130fd565b8589612f0042610258613a82565b6040518663ffffffff1660e01b8152600401612f20959493929190613a46565b600060405180830381600087803b158015612f3a57600080fd5b505af1158015612f4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f76919081019061363f565b905080600181518110612f8b57612f8b613c50565b60200260200101519350505050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b606061247b8484600085613120565b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061300957613009613c50565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061303d5761303d613c50565b6001600160a01b039283166020918202929092010152609e5460405163d06ca61f60e01b8152600092919091169063d06ca61f906130819087908690600401613a2d565b60006040518083038186803b15801561309957600080fd5b505afa1580156130ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130d5919081019061363f565b9050806001815181106130ea576130ea613c50565b6020026020010151925050509392505050565b600061271061310c8382613bc6565b6131169085613ba7565b6124539190613a9a565b6060824710156131815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051f565b843b6131cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051f565b600080866001600160a01b031685876040516131eb919061380e565b60006040518083038185875af1925050503d8060008114613228576040519150601f19603f3d011682016040523d82523d6000602084013e61322d565b606091505b509150915061323d828286613248565b979650505050505050565b60608315613257575081612453565b8251156132675782518084602001fd5b8160405162461bcd60e51b815260040161051f9190613914565b60405180606001604052806003906020820280368337509192915050565b8280548282559060005260206000209081019282156132f2579160200282015b828111156132f25781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906132bf565b506132fe929150613302565b5090565b5b808211156132fe5760008155600101613303565b80356001600160a01b038116811461332e57600080fd5b919050565b60008083601f84011261334557600080fd5b50813567ffffffffffffffff81111561335d57600080fd5b6020830191508360208260051b850101111561337857600080fd5b9250929050565b60006020828403121561339157600080fd5b61245382613317565b600080604083850312156133ad57600080fd5b6133b683613317565b91506133c460208401613317565b90509250929050565b60008060008060008060008060a0898b0312156133e957600080fd5b6133f289613317565b975061340060208a01613317565b9650604089013567ffffffffffffffff8082111561341d57600080fd5b6134298c838d01613333565b909850965060608b013591508082111561344257600080fd5b61344e8c838d01613333565b909650945060808b013591508082111561346757600080fd5b506134748b828c01613333565b999c989b5096995094979396929594505050565b6000806000806000806000806000806000806101208d8f0312156134ab57600080fd5b6134b48d613317565b9b506134c260208e01613317565b9a5067ffffffffffffffff60408e013511156134dd57600080fd5b6134ed8e60408f01358f01613333565b909a50985067ffffffffffffffff60608e0135111561350b57600080fd5b61351b8e60608f01358f01613333565b909850965067ffffffffffffffff60808e0135111561353957600080fd5b6135498e60808f01358f01613333565b909650945061355a60a08e01613317565b935061356860c08e01613317565b925061357660e08e01613317565b91506135856101008e01613317565b90509295989b509295989b509295989b565b6000806000606084860312156135ac57600080fd5b6135b584613317565b92506135c360208501613317565b9150604084013590509250925092565b600080604083850312156135e657600080fd5b6135ef83613317565b946020939093013593505050565b6000806020838503121561361057600080fd5b823567ffffffffffffffff81111561362757600080fd5b61363385828601613333565b90969095509350505050565b6000602080838503121561365257600080fd5b825167ffffffffffffffff8082111561366a57600080fd5b818501915085601f83011261367e57600080fd5b81518181111561369057613690613c66565b8060051b604051601f19603f830116810181811085821117156136b5576136b5613c66565b604052828152858101935084860182860187018a10156136d457600080fd5b600095505b838610156136f75780518552600195909501949386019386016136d9565b5098975050505050505050565b60006020828403121561371657600080fd5b8151801515811461245357600080fd5b60006020828403121561373857600080fd5b5035919050565b60006020828403121561375157600080fd5b5051919050565b60006020828403121561376a57600080fd5b815160ff8116811461245357600080fd5b600081518084526020808501945080840160005b838110156137b45781516001600160a01b03168752958201959082019060010161378f565b509495945050505050565b8060005b60038110156106385781518452602093840193909101906001016137c3565b600081518084526137fa816020860160208601613bdd565b601f01601f19169290920160200192915050565b60008251613820818460208701613bdd565b9190910192915050565b602081526000612453602083018461377b565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156138875781546001600160a01b031684529284019260019182019101613862565b505050838103828501528481528590820160005b868110156138c7576001600160a01b036138b484613317565b168252918301919083019060010161389b565b50979650505050505050565b608081016138e182856137bf565b82151560608301529392505050565b60a081016138fe82866137bf565b8360608301528215156080830152949350505050565b60208152600061245360208301846137e2565b60408152600061393a60408301856137e2565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b82815260406020820152600061247b604083018461377b565b85815284602082015260a060408201526000613a6560a083018661377b565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613a9557613a95613c24565b500190565b600082613ab757634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613af7578160001904821115613add57613add613c24565b80851615613aea57918102915b93841c9390800290613ac1565b509250929050565b60006124538383600082613b15575060016123f0565b81613b22575060006123f0565b8160018114613b385760028114613b4257613b5e565b60019150506123f0565b60ff841115613b5357613b53613c24565b50506001821b6123f0565b5060208310610133831016604e8410600b8410161715613b81575081810a6123f0565b613b8b8383613abc565b8060001904821115613b9f57613b9f613c24565b029392505050565b6000816000190483118215151615613bc157613bc1613c24565b500290565b600082821015613bd857613bd8613c24565b500390565b60005b83811015613bf8578181015183820152602001613be0565b838111156106385750506000910152565b6000600019821415613c1d57613c1d613c24565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220b464850c0492479bf63b6f3fdb559301590eca7a95e707232e66d0e50a3dd3f664736f6c6343000806003383f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80639136616a11610125578063d1431ffd116100ad578063dbe55e561161007c578063dbe55e561461049d578063de5f6268146104b0578063f664b3d9146104b8578063f6ca71b0146104c0578063f817bc63146104d557600080fd5b8063d1431ffd14610451578063d2f2489314610464578063d38bfff414610477578063d9caed121461048a57600080fd5b8063ad1728cb116100f4578063ad1728cb146103ef578063b59c3e79146103f7578063c2e1e3f414610420578063c71daccb14610433578063c7af33521461044957600080fd5b80639136616a146103785780639688d2fc1461038b57806396d538bb1461039e578063aa388af6146103b157600080fd5b8063430bf08a116101a857806367c7066c1161017757806367c7066c1461032457806368727617146103375780637b2d9b2c1461034a578063853828b61461035d5780638eac22231461036557600080fd5b8063430bf08a146102ee57806347e7ef24146103015780635a063f63146103145780635d36b1901461031c57600080fd5b806315d4573a116101e457806315d4573a1461028c5780632e655201146102b55780632f0fbd59146102c857806332d7d66d146102db57600080fd5b80630c340a24146102165780630ed57b3a1461023b5780630fc3b4c4146102505780631072cbea14610279575b600080fd5b61021e6104de565b6040516001600160a01b0390911681526020015b60405180910390f35b61024e61024936600461339a565b6104fb565b005b61021e61025e36600461337f565b6035602052600090815260409020546001600160a01b031681565b61024e6102873660046135d3565b610536565b61021e61029a36600461337f565b60d3602052600090815260409020546001600160a01b031681565b60375461021e906001600160a01b031681565b61024e6102d63660046135fd565b610576565b60d15461021e906001600160a01b031681565b60345461021e906001600160a01b031681565b61024e61030f3660046135d3565b61063e565b61024e610a4a565b61024e610ae9565b60395461021e906001600160a01b031681565b60d65461021e906001600160a01b031681565b61021e610358366004613726565b610b8f565b61024e610bb9565b61024e610373366004613488565b610f17565b61024e610386366004613726565b61111f565b61024e6103993660046133cd565b6112ea565b61024e6103ac3660046135fd565b6113f3565b6103df6103bf36600461337f565b6001600160a01b0390811660009081526035602052604090205416151590565b6040519015158152602001610232565b61024e611519565b61021e61040536600461337f565b60d2602052600090815260409020546001600160a01b031681565b61024e61042e36600461337f565b6115ca565b61043b611649565b604051908152602001610232565b6103df61179c565b61024e61045f36600461337f565b6117cd565b60d05461021e906001600160a01b031681565b61024e61048536600461337f565b611868565b61024e610498366004613597565b61190c565b60335461021e906001600160a01b031681565b61024e611cc9565b61043b600481565b6104c8612041565b604051610232919061382a565b61043b60385481565b60006104f6600080516020613c9d8339815191525490565b905090565b61050361179c565b6105285760405162461bcd60e51b815260040161051f90613980565b60405180910390fd5b61053282826120a3565b5050565b61053e61179c565b61055a5760405162461bcd60e51b815260040161051f90613980565b6105326105656104de565b6001600160a01b0384169083612208565b61057e61179c565b61059a5760405162461bcd60e51b815260040161051f90613980565b60365460005b81811015610638578383828181106105ba576105ba613c50565b90506020020160208101906105cf919061337f565b60d26000603684815481106105e6576105e6613c50565b6000918252602080832091909101546001600160a01b039081168452908301939093526040909101902080546001600160a01b031916929091169190911790558061063081613c09565b9150506105a0565b50505050565b6034546001600160a01b031633146106685760405162461bcd60e51b815260040161051f90613949565b600080516020613c7d8339815191528054600281141561069a5760405162461bcd60e51b815260040161051f90613a05565b6002825560d0546001600160a01b038581169116146106f25760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604482015260640161051f565b60d0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061373f565b8310156107b05760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f7567682061737365747360781b604482015260640161051f565b600083116107f95760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015260640161051f565b603354604080516001600160a01b03928316815260208101869052918616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a261084b613281565b60006108568661226b565b90508482826003811061086b5761086b613c50565b602090810291909101919091526033546001600160a01b03888116600090815260d2909352604083205491811692916108a49116612307565b9050600061092e836001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e457600080fd5b505afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061373f565b6109288a6012866123f6565b9061245a565b9050600061095561094e662386f26fc10000670de0b6b3a7640000613bc6565b8390612483565b6040516315b74c9d60e11b81529091506001600160a01b03851690632b6e993a9061098990899085906001906004016138f0565b600060405180830381600087803b1580156109a357600080fd5b505af11580156109b7573d6000803e3d6000fd5b505050506109c3612498565b6040805160608082526018908201527f4465706f736974696e6720746f20416d3343757276653a20000000000000000060808201526001600160a01b038c1660208201529081018a90527ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a9060a00160405180910390a15050505050506001825550505050565b6039546001600160a01b03163314610aa45760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f7420746865204861727665737465720000000000604482015260640161051f565b600080516020613c7d83398151915280546002811415610ad65760405162461bcd60e51b815260040161051f90613a05565b60028255610ae26125a8565b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b031614610b845760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161051f565b610b8d33612808565b565b603a8181548110610b9f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610bea5750610bd56104de565b6001600160a01b0316336001600160a01b0316145b610c425760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b606482015260840161051f565b600080516020613c7d83398151915280546002811415610c745760405162461bcd60e51b815260040161051f90613a05565b60028255600080610c836128c9565b9250925050610c91826129d8565b603354609d546040516370a0823160e01b81523060048201526001600160a01b039283169260009216906370a082319060240160206040518083038186803b158015610cdc57600080fd5b505afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d14919061373f565b60d0549091506000906001600160a01b038085169163cc2b27d7918591610d3b911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db2919061373f565b90506000610dd261094e662386f26fc10000670de0b6b3a7640000613bc6565b60d0549091506001600160a01b038086169163517a55a3918891610df6911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b60248201526044810184905260016064820152608401600060405180830381600087803b158015610e4557600080fd5b505af1158015610e59573d6000803e3d6000fd5b505060d0546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610ea357600080fd5b505afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061373f565b90508015610f005760345460d054610f00916001600160a01b03918216911683612208565b610f086125a8565b50505050505050600182555050565b610f1f61179c565b610f3b5760405162461bcd60e51b815260040161051f90613980565b600054610100900460ff1680610f54575060005460ff16155b610f705760405162461bcd60e51b815260040161051f906139b7565b600054610100900460ff16158015610f92576000805461ffff19166101011790555b86866000818110610fa557610fa5613c50565b9050602002016020810190610fba919061337f565b609d60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460d060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508360d160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508260d460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160d560006101000a8154816001600160a01b0302191690836001600160a01b031602179055506110fe8d8d8d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612a1492505050565b8015611110576000805461ff00191690555b50505050505050505050505050565b61112761179c565b6111435760405162461bcd60e51b815260040161051f90613980565b60365481106111845760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161051f565b60006036828154811061119957611199613c50565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906111d690600190613bc6565b83101561125857603680546111ed90600190613bc6565b815481106111fd576111fd613c50565b600091825260209091200154603680546001600160a01b03909216918590811061122957611229613c50565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061126957611269613c3a565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6112f261179c565b61130e5760405162461bcd60e51b815260040161051f90613980565b600054610100900460ff1680611327575060005460ff16155b6113435760405162461bcd60e51b815260040161051f906139b7565b600054610100900460ff16158015611365576000805461ffff19166101011790555b6113d68989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612a1492505050565b80156113e8576000805461ff00191690555b505050505050505050565b6113fb61179c565b6114175760405162461bcd60e51b815260040161051f90613980565b60005b818110156114cb57600083838381811061143657611436613c50565b905060200201602081019061144b919061337f565b6001600160a01b031614156114b95760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b606482015260840161051f565b806114c381613c09565b91505061141a565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a83836040516115009392919061383d565b60405180910390a1611514603a838361329f565b505050565b61152161179c565b61153d5760405162461bcd60e51b815260040161051f90613980565b600080516020613c7d8339815191528054600281141561156f5760405162461bcd60e51b815260040161051f90613a05565b6002825560005b6036548110156115c2576115b06036828154811061159657611596613c50565b6000918252602090912001546001600160a01b0316612afd565b806115ba81613c09565b915050611576565b505060019055565b6115d261179c565b6115ee5760405162461bcd60e51b815260040161051f90613980565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60d0546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c9919061373f565b90506000806116d66128c9565b6033549093506001600160a01b031691505081156117895760d0546001600160a01b038083169163cc2b27d791859161170f911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611786919061373f565b92505b6117938385613a82565b94505050505090565b60006117b4600080516020613c9d8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117d561179c565b6117f15760405162461bcd60e51b815260040161051f90613980565b6001600160a01b0381166118475760405162461bcd60e51b815260206004820152601860248201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604482015260640161051f565b609e80546001600160a01b0319166001600160a01b03831617905550565b50565b61187061179c565b61188c5760405162461bcd60e51b815260040161051f90613980565b6118b4817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b03166118d4600080516020613c9d8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146119365760405162461bcd60e51b815260040161051f90613949565b600080516020613c7d833981519152805460028114156119685760405162461bcd60e51b815260040161051f90613a05565b6002825560d0546001600160a01b038581169116146119c05760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604482015260640161051f565b60006119ca6128c9565b509150506119d7816129d8565b6033546001600160a01b03166119eb613281565b60006119f68861226b565b905086828260038110611a0b57611a0b613c50565b6020020152604051633883e11960e01b81526000906001600160a01b03851690633883e11990611a4190869085906004016138d3565b602060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a93919061373f565b9050611ad46040518060400160405280601981526020017f616d33437276546f6b656e546f576974686472617746726f6d0000000000000081525082612b36565b60d0546000906001600160a01b038087169163cc2b27d7918591611af8911661226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015611b3757600080fd5b505afa158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f919061373f565b90506000611b8f61094e662386f26fc10000670de0b6b3a7640000613bc6565b9050856001600160a01b031663517a55a384611baa8e61226b565b6040516001600160e01b031960e085901b1681526004810192909252600f0b60248201526044810184905260016064820152608401600060405180830381600087803b158015611bf957600080fd5b505af1158015611c0d573d6000803e3d6000fd5b505060d0546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015611c5757600080fd5b505afa158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f919061373f565b90508015611cae5760d054611cae906001600160a01b03168e83612208565b611cb6612498565b5050505050505050600182555050505050565b6034546001600160a01b03163314611cf35760405162461bcd60e51b815260040161051f90613949565b600080516020613c7d83398151915280546002811415611d255760405162461bcd60e51b815260040161051f90613a05565b6002825560408051606081018252600080825260208083018290528284018290526033548451630176f71760e71b81529451939492936001600160a01b03909116928492849263bb7b8b80926004808201939291829003018186803b158015611d8d57600080fd5b505afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc5919061373f565b905060005b603654811015611fa057600060368281548110611de957611de9613c50565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015611e3757600080fd5b505afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f919061373f565b604080516060808252601c908201527f4465706f736974696e6720416c6c20746f20416d3343757276653a200000000060808201526001600160a01b03851660208201529081018290529091507ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a9060a00160405180910390a18015611f8b576000611efa8361226b565b905081888260038110611f0f57611f0f613c50565b60200201526000611f1f84612307565b9050611f3186610928856012856123f6565b611f3b9089613a82565b603354604080516001600160a01b03928316815260208101879052929a50908616917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a250505b50508080611f9890613c09565b915050611dca565b506000611fc6611fbf662386f26fc10000670de0b6b3a7640000613bc6565b8590612483565b6040516315b74c9d60e11b81529091506001600160a01b03841690632b6e993a90611ffa90889085906001906004016138f0565b600060405180830381600087803b15801561201457600080fd5b505af1158015612028573d6000803e3d6000fd5b50505050612034612498565b5050505050600182555050565b6060603a80548060200260200160405190810160405280929190818152602001828054801561209957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161207b575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156121005760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015260640161051f565b6001600160a01b0382161580159061212057506001600160a01b03811615155b6121605760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015260640161051f565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a26105328282612b7b565b6040516001600160a01b03831660248201526044810182905261151490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b84565b6000805b60038110156122c857826001600160a01b03166036828154811061229557612295613c50565b6000918252602090912001546001600160a01b031614156122b65792915050565b806122c081613c09565b91505061226f565b5060405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59080cdc1bdbdb08185cdcd95d606a1b604482015260640161051f565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561234357600080fd5b505afa158015612357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237b9190613758565b60ff16905060048110158015612392575060128111155b6123f05760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b606482015260840161051f565b92915050565b6000818311156124265761241f61240d8385613bc6565b61241890600a613aff565b8590612c56565b9350612450565b818310156124505761244d61243b8484613bc6565b61244690600a613aff565b8590612c62565b93505b50825b9392505050565b60008061246f84670de0b6b3a7640000612c56565b905061247b8184612c62565b949350505050565b60006124538383670de0b6b3a7640000612c6e565b609d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156124dc57600080fd5b505afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612514919061373f565b905080156118655760d454609d54612539916001600160a01b03918216911683612c90565b60d4546040516383df674760e01b815260048101839052306024820152600060448201526001600160a01b03909116906383df6747906064015b600060405180830381600087803b15801561258d57600080fd5b505af11580156125a1573d6000803e3d6000fd5b5050505050565b60d55460d4546040516335313c2160e11b81526001600160a01b039182166004820152911690636a62784290602401600060405180830381600087803b1580156125f157600080fd5b505af1158015612605573d6000803e3d6000fd5b505060d1546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561264f57600080fd5b505afa158015612663573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612687919061373f565b905080156126af5760d15460d0546126ad916001600160a01b0390811691168330612db4565b505b60d0546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156126f357600080fd5b505afa158015612707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272b919061373f565b60395460d054604080516001600160a01b03938416815292909116602083015281018290529091507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a160d05460395460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b1580156127d057600080fd5b505af11580156127e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190613704565b6001600160a01b03811661285e5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161051f565b806001600160a01b031661287e600080516020613c9d8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361186581600080516020613c9d83398151915255565b609d546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a082319060240160206040518083038186803b15801561291157600080fd5b505afa158015612925573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612949919061373f565b60d4546040516370a0823160e01b81523060048201529194506001600160a01b0316906370a082319060240160206040518083038186803b15801561298d57600080fd5b505afa1580156129a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c5919061373f565b91506129d18284613a82565b9050909192565b60d45460405162ebf5dd60e01b815260048101839052306024820152600160448201526001600160a01b039091169062ebf5dd90606401612573565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612a50603a858561329f565b50815181518114612a9a5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015260640161051f565b60005b81811015612af357612ae1848281518110612aba57612aba613c50565b6020026020010151848381518110612ad457612ad4613c50565b60200260200101516120a3565b80612aeb81613c09565b915050612a9d565b5050505050505050565b6033548190612b1a906001600160a01b0380841691166000612c90565b603354610532906001600160a01b038381169116600019612c90565b6105328282604051602401612b4c929190613927565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052612fa0565b61053282612afd565b6000612bd9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612fc19092919063ffffffff16565b8051909150156115145780806020019051810190612bf79190613704565b6115145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161051f565b60006124538284613ba7565b60006124538284613a9a565b600080612c7b8585612c56565b9050612c878184612c62565b95945050505050565b801580612d195750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612cdf57600080fd5b505afa158015612cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d17919061373f565b155b612d845760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161051f565b6040516001600160a01b03831660248201526044810182905261151490849063095ea7b360e01b90606401612234565b609e5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905260009186169063095ea7b390604401602060405180830381600087803b158015612e0457600080fd5b505af1158015612e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3c9190613704565b506000612e4a868686612fd0565b905080612e5b57600091505061247b565b6040805160028082526060820183526000926020830190803683370190505090508681600081518110612e9057612e90613c50565b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110612ec457612ec4613c50565b6001600160a01b039283166020918202929092010152609e54600091166338ed173987612ef28660046130fd565b8589612f0042610258613a82565b6040518663ffffffff1660e01b8152600401612f20959493929190613a46565b600060405180830381600087803b158015612f3a57600080fd5b505af1158015612f4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f76919081019061363f565b905080600181518110612f8b57612f8b613c50565b60200260200101519350505050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b606061247b8484600085613120565b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061300957613009613c50565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061303d5761303d613c50565b6001600160a01b039283166020918202929092010152609e5460405163d06ca61f60e01b8152600092919091169063d06ca61f906130819087908690600401613a2d565b60006040518083038186803b15801561309957600080fd5b505afa1580156130ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130d5919081019061363f565b9050806001815181106130ea576130ea613c50565b6020026020010151925050509392505050565b600061271061310c8382613bc6565b6131169085613ba7565b6124539190613a9a565b6060824710156131815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161051f565b843b6131cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051f565b600080866001600160a01b031685876040516131eb919061380e565b60006040518083038185875af1925050503d8060008114613228576040519150601f19603f3d011682016040523d82523d6000602084013e61322d565b606091505b509150915061323d828286613248565b979650505050505050565b60608315613257575081612453565b8251156132675782518084602001fd5b8160405162461bcd60e51b815260040161051f9190613914565b60405180606001604052806003906020820280368337509192915050565b8280548282559060005260206000209081019282156132f2579160200282015b828111156132f25781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906132bf565b506132fe929150613302565b5090565b5b808211156132fe5760008155600101613303565b80356001600160a01b038116811461332e57600080fd5b919050565b60008083601f84011261334557600080fd5b50813567ffffffffffffffff81111561335d57600080fd5b6020830191508360208260051b850101111561337857600080fd5b9250929050565b60006020828403121561339157600080fd5b61245382613317565b600080604083850312156133ad57600080fd5b6133b683613317565b91506133c460208401613317565b90509250929050565b60008060008060008060008060a0898b0312156133e957600080fd5b6133f289613317565b975061340060208a01613317565b9650604089013567ffffffffffffffff8082111561341d57600080fd5b6134298c838d01613333565b909850965060608b013591508082111561344257600080fd5b61344e8c838d01613333565b909650945060808b013591508082111561346757600080fd5b506134748b828c01613333565b999c989b5096995094979396929594505050565b6000806000806000806000806000806000806101208d8f0312156134ab57600080fd5b6134b48d613317565b9b506134c260208e01613317565b9a5067ffffffffffffffff60408e013511156134dd57600080fd5b6134ed8e60408f01358f01613333565b909a50985067ffffffffffffffff60608e0135111561350b57600080fd5b61351b8e60608f01358f01613333565b909850965067ffffffffffffffff60808e0135111561353957600080fd5b6135498e60808f01358f01613333565b909650945061355a60a08e01613317565b935061356860c08e01613317565b925061357660e08e01613317565b91506135856101008e01613317565b90509295989b509295989b509295989b565b6000806000606084860312156135ac57600080fd5b6135b584613317565b92506135c360208501613317565b9150604084013590509250925092565b600080604083850312156135e657600080fd5b6135ef83613317565b946020939093013593505050565b6000806020838503121561361057600080fd5b823567ffffffffffffffff81111561362757600080fd5b61363385828601613333565b90969095509350505050565b6000602080838503121561365257600080fd5b825167ffffffffffffffff8082111561366a57600080fd5b818501915085601f83011261367e57600080fd5b81518181111561369057613690613c66565b8060051b604051601f19603f830116810181811085821117156136b5576136b5613c66565b604052828152858101935084860182860187018a10156136d457600080fd5b600095505b838610156136f75780518552600195909501949386019386016136d9565b5098975050505050505050565b60006020828403121561371657600080fd5b8151801515811461245357600080fd5b60006020828403121561373857600080fd5b5035919050565b60006020828403121561375157600080fd5b5051919050565b60006020828403121561376a57600080fd5b815160ff8116811461245357600080fd5b600081518084526020808501945080840160005b838110156137b45781516001600160a01b03168752958201959082019060010161378f565b509495945050505050565b8060005b60038110156106385781518452602093840193909101906001016137c3565b600081518084526137fa816020860160208601613bdd565b601f01601f19169290920160200192915050565b60008251613820818460208701613bdd565b9190910192915050565b602081526000612453602083018461377b565b6000604082016040835280865480835260608501915087600052602092508260002060005b828110156138875781546001600160a01b031684529284019260019182019101613862565b505050838103828501528481528590820160005b868110156138c7576001600160a01b036138b484613317565b168252918301919083019060010161389b565b50979650505050505050565b608081016138e182856137bf565b82151560608301529392505050565b60a081016138fe82866137bf565b8360608301528215156080830152949350505050565b60208152600061245360208301846137e2565b60408152600061393a60408301856137e2565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b82815260406020820152600061247b604083018461377b565b85815284602082015260a060408201526000613a6560a083018661377b565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613a9557613a95613c24565b500190565b600082613ab757634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613af7578160001904821115613add57613add613c24565b80851615613aea57918102915b93841c9390800290613ac1565b509250929050565b60006124538383600082613b15575060016123f0565b81613b22575060006123f0565b8160018114613b385760028114613b4257613b5e565b60019150506123f0565b60ff841115613b5357613b53613c24565b50506001821b6123f0565b5060208310610133831016604e8410600b8410161715613b81575081810a6123f0565b613b8b8383613abc565b8060001904821115613b9f57613b9f613c24565b029392505050565b6000816000190483118215151615613bc157613bc1613c24565b500290565b600082821015613bd857613bd8613c24565b500390565b60005b83811015613bf8578181015183820152602001613be0565b838111156106385750506000910152565b6000600019821415613c1d57613c1d613c24565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220b464850c0492479bf63b6f3fdb559301590eca7a95e707232e66d0e50a3dd3f664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance()": {
        "details": "Get the total asset value held in the platform",
        "returns": {
          "_0": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into the Curve 3Pool",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into the Curve 3pool"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address,address,address[],address[],address[],address,address,address,address)": {
        "params": {
          "_assets": "Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                USDC",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Address of the am3Crv",
          "_rewardTokenAddresses": "Address of CRV",
          "_vaultAddress": "Address of the vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding pool tokens,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Curve 3Pool",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address,address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30623,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30626,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30666,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30750,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 30752,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 30756,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30759,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30761,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 30763,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30765,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 30768,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30772,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 19788,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "pTokenAddress",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 7950,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IUniswapV2Router02)5552"
      },
      {
        "astId": 8212,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18817,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "primaryStable",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 18820,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "crvToken",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 18824,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "stableToAmStable",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 18828,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "amStableToAmDebt",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 18831,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "crvGauge",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(ICurveGauge)23367"
      },
      {
        "astId": 18834,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "crvMinter",
        "offset": 0,
        "slot": "213",
        "type": "t_contract(ICRVMinter)23284"
      },
      {
        "astId": 18837,
        "contract": "contracts/strategies/Am3CurveStrategy.sol:Am3CurveStrategy",
        "label": "Superb",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IERC20)623"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICRVMinter)23284": {
        "encoding": "inplace",
        "label": "contract ICRVMinter",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveGauge)23367": {
        "encoding": "inplace",
        "label": "contract ICurveGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)5552": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}