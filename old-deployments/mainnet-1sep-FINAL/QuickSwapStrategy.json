{
  "address": "0xBB9db7A6e1018c76b3118d2dfE6f8F5c9eb21542",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "TransferLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_primaryStable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStable",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickDragon",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickSwapPair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickSwapPairStaker",
      "outputs": [
        {
          "internalType": "contract IStakingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickTokenNew",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolId",
          "type": "bytes32"
        }
      ],
      "name": "setBalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbae2d8546d46d6be20befdd15cbade6174d759aa0111c0e762634a91df26f46",
  "receipt": {
    "to": null,
    "from": "0xA2a067351C977113B98096F75c9685a3d51614eC",
    "contractAddress": "0xBB9db7A6e1018c76b3118d2dfE6f8F5c9eb21542",
    "transactionIndex": 48,
    "gasUsed": "4788744",
    "logsBloom": "0x
    "blockHash": "0x65b17c02733e49c0f91ba277c50725aa82e3900b1a12800674c824f8be44919f",
    "transactionHash": "0xfbae2d8546d46d6be20befdd15cbade6174d759aa0111c0e762634a91df26f46",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 32559622,
        "transactionHash": "0xfbae2d8546d46d6be20befdd15cbade6174d759aa0111c0e762634a91df26f46",
        "address": "0xBB9db7A6e1018c76b3118d2dfE6f8F5c9eb21542",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0x65b17c02733e49c0f91ba277c50725aa82e3900b1a12800674c824f8be44919f"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 32559622,
        "transactionHash": "0xfbae2d8546d46d6be20befdd15cbade6174d759aa0111c0e762634a91df26f46",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec",
          "0x00000000000000000000000000856730088a5c3191bd26eb482e45229555ce57"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001fe67588751559000000000000000000000000000000000000000000000000259168522ce4863710000000000000000000000000000000000000000000000ccd6211c13133ba79500000000000000000000000000000000000000000000000257181dca46f70de10000000000000000000000000000000000000000000000ccd81f836b9a8cfd25",
        "logIndex": 153,
        "blockHash": "0x65b17c02733e49c0f91ba277c50725aa82e3900b1a12800674c824f8be44919f"
      }
    ],
    "blockNumber": 32559622,
    "cumulativeGasUsed": "11914555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "687ed9fa5cffd3a4c7a6373a1d9ad1d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"TransferLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_primaryStable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStable\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickDragon\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickSwapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickSwapPairStaker\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickTokenNew\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"}],\"name\":\"setBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance()\":{\"details\":\"Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.\",\"returns\":{\"_0\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit an amount of asset into the platform\",\"params\":{\"_amount\":\"Units of asset to deposit\",\"_asset\":\"Address for the asset\"}},\"depositAll()\":{\"details\":\"Deposit balance of all supported assets into the platform\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary.\"},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdrawAll()\":{\"details\":\"Withdraw all assets from strategy sending assets to Vault.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address,address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as QuickSwap strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/QuickSwapStrategy.sol\":\"QuickSwapStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/connectors/quickswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    // Views\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    // Mutative\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function exit() external;\\r\\n}\",\"keccak256\":\"0xe6a430237e7773acf25672c205df1a1b0a3dc750f67bfc1b06dd5092134d5dfd\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x90ba11b89647984f9d15d45cae3662563ce714d1fdef6dbbb9e8eea5d89e3340\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router01.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\r\\n */\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xff1fd307f500470d219a24fa7e9833c8f77d74cff78792c1ddd218d00b6b58ab\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\n/**\\r\\n * IUniswapV2Router02.sol is copy of https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\r\\n */\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function pairFor(address factoryC, address tokenA, address tokenB) external view returns (address pair) ;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x4b7caa5095de7b7f9bd80794e4df994af7f6b6de4c5801228ab08955b1d451c0\",\"license\":\"GNU-3\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IGeneralPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IPoolSwapStructs.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract BalancerExchange {\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    int256 public constant MAX_VALUE = 10 ** 27;\\r\\n    uint256 public constant MAX_SLIPPAGE = 1e16; // = 1%\\r\\n    function swap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 limit\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(balancerVault));\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        if (limit == 0) {\\r\\n            limit =  onSwap(_balancerVault, poolId, kind,  IERC20(address(tokenIn)),  IERC20(address(tokenOut)), amount);\\r\\n            limit = limit.mulTruncate(\\r\\n                uint256(1e18) - MAX_SLIPPAGE\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        console.log(\\\"BalancerVault: swapping 2\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId1,\\r\\n        bytes32 poolId2,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenMid,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap1;\\r\\n        batchSwap1.poolId = poolId1;\\r\\n        batchSwap1.assetInIndex = 0;\\r\\n        batchSwap1.assetOutIndex = 1;\\r\\n        batchSwap1.amount = amount;\\r\\n        swaps[0] = batchSwap1;\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap2;\\r\\n        batchSwap2.poolId = poolId2;\\r\\n        batchSwap2.assetInIndex = 1;\\r\\n        batchSwap2.assetOutIndex = 2;\\r\\n        batchSwap2.amount = 0;\\r\\n        swaps[1] = batchSwap2;\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = tokenIn;\\r\\n        assets[1] = tokenMid;\\r\\n        assets[2] = tokenOut;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = recipient;\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\r\\n            limits[0] = MAX_VALUE;\\r\\n            limits[1] = MAX_VALUE;\\r\\n            limits[2] = MAX_VALUE;\\r\\n        } else {\\r\\n            limits[0] = 0;\\r\\n            limits[1] = 0;\\r\\n            limits[2] = 0;\\r\\n        }\\r\\n\\r\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\r\\n    }\\r\\n\\r\\n    function onSwap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 balance\\r\\n    ) internal view returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = balance;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances,) = balancerVault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountToSwap(\\r\\n        address _balancerVault,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        console.log(\\\"amount0ToSwap\\\", amount0ToSwap);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            console.log(\\\"onSwap\\\", address(token0), address(token1));\\r\\n            uint256 amount1 = onSwap(_balancerVault, poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\r\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\r\\n        }\\r\\n\\r\\n        return amount0ToSwap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountLpTokensToWithdraw(\\r\\n        address _balancerVault,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < 1; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = onSwap(_balancerVault, poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\r\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n        return lpBalance;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0xbe570d3bea74a4a0a9ec5c7919748d6f817d2c45902d498740d7dcb2e3172aa3\",\"license\":\"MIT\"},\"contracts/exchanges/UniswapV2Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../utils/OvnMath.sol\\\";\\r\\nabstract contract UniswapV2Exchange {\\r\\n\\r\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 4;\\r\\n\\r\\n    IUniswapV2Router02 private uniswapRouter;\\r\\n\\r\\n    function _setUniswapRouter(address _uniswapRouter) internal {\\r\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\r\\n    }\\r\\n\\r\\n    function _swapExactTokensForTokens(\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(uniswapRouter), amountInput);\\r\\n\\r\\n        uint256 amountOutMin = _getAmountsOut(inputToken, outputToken, amountInput);\\r\\n        if (amountOutMin == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        uint[] memory amounts = uniswapRouter.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            OvnMath.subBasisPoints(amountOutMin, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function _getAmountsOut(\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = inputToken;\\r\\n        path[1] = outputToken;\\r\\n        uint[] memory amounts = uniswapRouter.getAmountsOut(amountInput, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\r\\n\\r\\n        IERC20(tokenA).approve(address(uniswapRouter), amountADesired);\\r\\n        IERC20(tokenB).approve(address(uniswapRouter), amountBDesired);\\r\\n\\r\\n        return uniswapRouter.addLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            amountADesired,\\r\\n            amountBDesired,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address lpToken,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) internal returns (uint amountA, uint amountB) {\\r\\n\\r\\n        IERC20(lpToken).approve(address(uniswapRouter), liquidity);\\r\\n\\r\\n        return uniswapRouter.removeLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            to,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xad74a575d6dc1ed72d4b4d7449628e08228f1fb2aedb06f80a2d25c96cbd5e25\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\r\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\r\\n * types.\\r\\n *\\r\\n * This concept is unrelated to a Pool's Asset Managers.\\r\\n */\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\",\"keccak256\":\"0x3509f39516a60dda160e4b06c6767332b7575e481780b267bdc1af3b93493317\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\nimport \\\"./IPoolSwapStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\r\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\r\\n * either IGeneralPool or IMinimalSwapInfoPool\\r\\n */\\r\\ninterface IBasePool is IPoolSwapStructs {\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\r\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\r\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\r\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\r\\n     *\\r\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\r\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\r\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as minting pool shares.\\r\\n     */\\r\\n    function onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\r\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\r\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\r\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\r\\n     * `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\r\\n     *\\r\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\r\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\r\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as burning pool shares.\\r\\n     */\\r\\n    function onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    function getPoolId() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x346508790e1b3f82b399b1313ed16a1e1fe3d3e86b19c67cb82084fe57475777\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev IPools with the General specialization setting should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\r\\n * grant to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IGeneralPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x89cc84a63e52afa04dabfdeda368399994b7cf8f0bf7a0605b3f3473cab46b76\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\r\\n * to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IMinimalSwapInfoPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256 currentBalanceTokenIn,\\r\\n        uint256 currentBalanceTokenOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xe1439eeab21fc38a546a22e3463dd08a7f50ba4d97cb90daeafb215891925a5a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IPoolSwapStructs {\\r\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\r\\n    // IMinimalSwapInfoPool.\\r\\n    //\\r\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\r\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\r\\n    //\\r\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\r\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\r\\n    //\\r\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\r\\n    // some Pools.\\r\\n    //\\r\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\r\\n    // one Pool.\\r\\n    //\\r\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\r\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\r\\n    //    balance.\\r\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\r\\n    //\\r\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\r\\n    // where the Pool sends the outgoing tokens.\\r\\n    //\\r\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe058df50060904ef53e0fe5c80a2475bc27423c608befab165f42cc1ff458f97\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IAsset.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user's Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 cash,\\r\\n        uint256 managed,\\r\\n        uint256 lastChangeBlock,\\r\\n        address assetManager\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool's internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xae7589cc88d2a39410d54f6b12a9fe06a2b8fcb118837499fc2cff60ad132487\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/QuickSwapStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title QuickSwap Strategy\\r\\n * @notice Investment strategy for investing stablecoins via QuickSwap Strategy\\r\\n */\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\"  ;\\r\\n\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport \\\"../exchanges/UniswapV2Exchange.sol\\\";\\r\\nimport \\\"../exchanges/BalancerExchange.sol\\\";\\r\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../connectors/quickswap/IStakingRewards.sol\\\";\\r\\nimport \\\"../connectors/uniswap/v2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\ncontract QuickSwapStrategy is InitializableAbstractStrategy, UniswapV2Exchange, BalancerExchange   {\\r\\n    using StableMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    IERC20 public token0;\\r\\n    IERC20 public token1;\\r\\n    IERC20 public primaryStable;\\r\\n    IERC20 public quickTokenNew;\\r\\n    IERC20 public quickDragon;\\r\\n\\r\\n    IUniswapV2Pair public quickSwapPair;\\r\\n    bytes32 public poolId;\\r\\n\\r\\n    mapping(address => uint256 ) public assetToDenominator;\\r\\n    IStakingRewards public quickSwapPairStaker;\\r\\n\\r\\n    address public balancerVault;\\r\\n\\r\\n    /**\\r\\n     * Initializer for setting up strategy internal state. This overrides the\\r\\n     * InitializableAbstractStrategy initializer as QuickSwap strategies don't fit\\r\\n     * well within that abstraction.\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress, // QuickToken address\\r\\n        address _vaultAddress,    // VaultProxy address\\r\\n        address[] calldata _rewardTokenAddresses, // USDC - as in end USDC will be sent to Harvester\\r\\n        address[] calldata _assets, // USDC + DAI\\r\\n        address[] calldata _pTokens, //  quickSwapUSDCDAIPair\\r\\n        address _primaryStable, // USDC address\\r\\n        address _router, // quickSwapRouter02\\r\\n        address _staker, // quickSwapStakingReward\\r\\n        address _rewardToken // quickSwapDragonQuick\\r\\n    ) external onlyGovernor initializer {\\r\\n        require(_rewardTokenAddresses[0] != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_pTokens[0] != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_platformAddress != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_router != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_staker != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_rewardToken != address(0), \\\"Zero address not allowed\\\");\\r\\n       \\r\\n\\r\\n        token0 = IERC20(_assets[0]);\\r\\n        token1 = IERC20(_assets[1]);\\r\\n        primaryStable = IERC20(_primaryStable);\\r\\n        quickTokenNew = IERC20(_platformAddress);\\r\\n        quickDragon = IERC20(_rewardToken);\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assetToDenominator[_assets[i]] = 10 ** IERC20Metadata(_assets[i]).decimals();\\r\\n        }\\r\\n        quickSwapPair = IUniswapV2Pair(_pTokens[0]);\\r\\n        quickSwapPairStaker = IStakingRewards(_staker);\\r\\n        _setUniswapRouter(_router);\\r\\n\\r\\n        super._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n        _abstractSetPToken(_assets[0],_pTokens[0]);\\r\\n        _abstractSetPToken(_assets[1],_pTokens[1]);\\r\\n    }\\r\\n    function setBalancer(address _balancerVault, bytes32 _balancerPoolId) external onlyGovernor {\\r\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_balancerPoolId != \\\"\\\", \\\"Empty pool id not allowed\\\");\\r\\n        balancerVault = _balancerVault;\\r\\n        poolId = _balancerPoolId;\\r\\n    }\\r\\n    function getReserves() internal view returns (uint256,uint256) {\\r\\n        ( uint256 reserve0, uint256  reserve1,) = quickSwapPair.getReserves();\\r\\n        require(reserve0 > (10 ** (IERC20Metadata(address(token0) ).decimals() - 3))  && reserve1 > (10 ** (IERC20Metadata(address(token1) ).decimals() - 3)), \\\"Reserves too low\\\");\\r\\n        return (reserve0, reserve1) ;\\r\\n\\r\\n    }\\r\\n    // TODO: _amount is not being used.\\r\\n    function _deposit(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    )  internal {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        (uint256 reserve0, uint256 reserve1) = getReserves();\\r\\n\\r\\n        _swapPrimaryStableToToken0();\\r\\n\\r\\n        // count amount token1 to swap\\r\\n        uint256 token1Balance = token1.balanceOf(address(this));\\r\\n        uint256 amount0From1;\\r\\n        if (token1Balance > 0) {\\r\\n            amount0From1 = onSwap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                token1,\\r\\n                token0,\\r\\n                token1Balance\\r\\n            );\\r\\n        }\\r\\n        uint256 token0Balance = token0.balanceOf(address(this));\\r\\n        //TODO add parameter to _getAmountToSwap() second token amount\\r\\n        uint256 amount0ToSwap = _getAmountToSwap(\\r\\n            balancerVault,\\r\\n            token0Balance - (amount0From1 / 2),\\r\\n            reserve0,\\r\\n            reserve1,\\r\\n            assetToDenominator[address(token0)],\\r\\n            assetToDenominator[address(token1)],\\r\\n            1,\\r\\n            poolId,\\r\\n            token0,\\r\\n            token1\\r\\n        );\\r\\n\\r\\n        // swap token0 to other token\\r\\n        swap(\\r\\n            balancerVault,\\r\\n            poolId,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            IAsset(address(token0)),\\r\\n            IAsset(address(token1)),\\r\\n            address(this),\\r\\n            address(this),\\r\\n            amount0ToSwap,\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // add liquidity\\r\\n        token0Balance = token0.balanceOf(address(this));\\r\\n        token1Balance = token1.balanceOf(address(this));\\r\\n        _addLiquidity(\\r\\n            address(token0),\\r\\n            address(token1),\\r\\n            token0Balance,\\r\\n            token1Balance,\\r\\n            OvnMath.subBasisPoints(token0Balance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            OvnMath.subBasisPoints(token1Balance, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n            address(this)\\r\\n        );\\r\\n        // console.log(\\\"LP: \\\", quickSwapPair.balanceOf(address(this)) );\\r\\n        stakeLPForDragon();\\r\\n    }\\r\\n    function deposit(\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    )   external\\r\\n        override\\r\\n        onlyVault\\r\\n        nonReentrant {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        _deposit(_asset, _amount);\\r\\n    }\\r\\n    function depositAll() external override onlyVault nonReentrant {\\r\\n        _deposit(address(primaryStable), primaryStable.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        address _beneficiary,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyVault nonReentrant  {\\r\\n        require(_asset == address(primaryStable), \\\"Token not supported.\\\");\\r\\n        (uint256 reserve0, uint256 reserve1,) = quickSwapPair.getReserves();\\r\\n        uint256 lpTokenBalance = quickSwapPairStaker.balanceOf(address(this)); //quickSwapPair.balanceOf(address(this));\\r\\n        // console.log(\\\"lpTokenBalance: \\\", lpTokenBalance);\\r\\n\\r\\n        if (lpTokenBalance > 0) {\\r\\n            // count amount to unstake\\r\\n            uint256 totalLpBalance = quickSwapPair.totalSupply();\\r\\n            uint256 lpTokensToWithdraw = _getAmountLpTokensToWithdraw(\\r\\n                balancerVault,\\r\\n                OvnMath.addBasisPoints(_amount, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                reserve0,\\r\\n                reserve1,\\r\\n                totalLpBalance,\\r\\n                assetToDenominator[address(token0)],\\r\\n                assetToDenominator[address(token1)],\\r\\n                poolId,\\r\\n                token0,\\r\\n                token1\\r\\n            );\\r\\n            if (lpTokensToWithdraw > lpTokenBalance) {\\r\\n                lpTokensToWithdraw = lpTokenBalance;\\r\\n            }\\r\\n            uint256 amountOut0Min = reserve0 * lpTokensToWithdraw / totalLpBalance;\\r\\n            uint256 amountOut1Min = reserve1 * lpTokensToWithdraw / totalLpBalance;\\r\\n            // console.log(\\\"lpTokensToWithdraw: \\\", lpTokensToWithdraw);\\r\\n            unstakeDragonForLP(lpTokensToWithdraw);\\r\\n            // remove liquidity\\r\\n            _removeLiquidity(\\r\\n                address(token0),\\r\\n                address(token1),\\r\\n                address(quickSwapPair),\\r\\n                lpTokensToWithdraw,\\r\\n                OvnMath.subBasisPoints(amountOut0Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                OvnMath.subBasisPoints(amountOut1Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n        _swapAssetsToPrimaryStable();\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Withdraw USDC: \\\", primaryStableBalance);\\r\\n        primaryStable.safeTransfer(_beneficiary, primaryStableBalance);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant  {\\r\\n        (uint256 reserve0, uint256 reserve1,) = quickSwapPair.getReserves();\\r\\n\\r\\n        unstakeDragonForLP();\\r\\n        uint256 lpTokenBalance = quickSwapPair.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = quickSwapPair.totalSupply();\\r\\n            uint256 amountOut0Min = reserve0 * lpTokenBalance / totalLpBalance;\\r\\n            uint256 amountOut1Min = reserve1 * lpTokenBalance / totalLpBalance;\\r\\n            // remove liquidity\\r\\n            _removeLiquidity(\\r\\n                address(token0),\\r\\n                address(token1),\\r\\n                address(quickSwapPair),\\r\\n                lpTokenBalance,\\r\\n                OvnMath.subBasisPoints(amountOut0Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                OvnMath.subBasisPoints(amountOut1Min, BASIS_POINTS_FOR_SLIPPAGE),\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n        _swapAssetsToPrimaryStable();\\r\\n\\r\\n        lpTokenBalance = quickSwapPair.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            stakeLPForDragon();\\r\\n        }\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Withdraw Primary Stable: \\\", primaryStableBalance);\\r\\n        primaryStable.safeTransfer(vaultAddress, primaryStableBalance);\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 token0Balance = token0.balanceOf(address(this));\\r\\n        uint256 token1Balance = token1.balanceOf(address(this));\\r\\n\\r\\n        uint256 lpTokenBalance = quickSwapPairStaker.balanceOf(address(this));\\r\\n        if (lpTokenBalance > 0) {\\r\\n            uint256 totalLpBalance = quickSwapPair.totalSupply();\\r\\n            (uint256 reserve0, uint256 reserve1,) = quickSwapPair.getReserves();\\r\\n            token0Balance += reserve0 * lpTokenBalance / totalLpBalance;\\r\\n            token1Balance += reserve1 * lpTokenBalance / totalLpBalance;\\r\\n        }\\r\\n\\r\\n        uint256 primaryStableBalanceFromToken0;\\r\\n        if ( (address(token0) != address(primaryStable))  ) {\\r\\n            if (token0Balance > 0) {\\r\\n                primaryStableBalanceFromToken0 = onSwap(\\r\\n                    balancerVault,\\r\\n                    poolId,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    token0,\\r\\n                    primaryStable,\\r\\n                    token0Balance\\r\\n                );\\r\\n                // console.log(\\\"Token0 swap -  primaryStableBalanceFromToken0 \\\", primaryStableBalanceFromToken0);\\r\\n            }\\r\\n        } else {\\r\\n            primaryStableBalanceFromToken0 += token0Balance;\\r\\n        }\\r\\n\\r\\n        uint256 primaryStableBalanceFromToken1;\\r\\n        if ( (address(token1) != address(primaryStable))  ) {\\r\\n            if (token1Balance > 0) {\\r\\n                primaryStableBalanceFromToken1 = onSwap(\\r\\n                    balancerVault,\\r\\n                    poolId,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    token1,\\r\\n                    primaryStable,\\r\\n                    token1Balance\\r\\n                );\\r\\n                // console.log(\\\"Token1 swap -  primaryStableBalanceFromToken1 \\\", primaryStableBalanceFromToken1);\\r\\n            }\\r\\n        } else {\\r\\n            primaryStableBalanceFromToken1 += token1Balance;\\r\\n        }\\r\\n        // console.log(\\\"primaryStableBalanceFromToken0: \\\", primaryStableBalanceFromToken0);\\r\\n        // console.log(\\\"primaryStableBalanceFromToken1: \\\", primaryStableBalanceFromToken1);\\r\\n        return primaryStableBalanceFromToken0 + primaryStableBalanceFromToken1;\\r\\n    }\\r\\n    function stakeLPForDragon() internal {\\r\\n        uint256 lpTokenBalance = quickSwapPair.balanceOf(address(this));\\r\\n        // console.log(\\\"Staking lpTokenBalance\\\", lpTokenBalance);\\r\\n        IUniswapV2Pair(quickSwapPair).approve(address(quickSwapPairStaker), lpTokenBalance);\\r\\n        quickSwapPairStaker.stake(lpTokenBalance);\\r\\n        // console.log(\\\"LP Balance staked: \\\", quickSwapPairStaker.balanceOf(address(this)));\\r\\n    }\\r\\n    function unstakeDragonForLP(uint256 _amount)  internal{\\r\\n        quickSwapPairStaker.withdraw(_amount);\\r\\n    }\\r\\n    function unstakeDragonForLP()  internal {\\r\\n        quickSwapPairStaker.exit();\\r\\n    }\\r\\n    function _collectRewards() internal {\\r\\n        // claim rewards\\r\\n        quickSwapPairStaker.getReward();\\r\\n        // sell rewards\\r\\n        uint256 totalRewards = 0;\\r\\n        uint256 quickDragonBalance = quickDragon.balanceOf(address(this));\\r\\n        if (quickDragonBalance > 0) {\\r\\n            uint256 quickReward = _swapExactTokensForTokens(\\r\\n                address(quickDragon),\\r\\n                address(primaryStable),\\r\\n                quickDragonBalance,\\r\\n                address(this)\\r\\n            );\\r\\n            totalRewards += quickReward;\\r\\n        }\\r\\n        uint256 balance = primaryStable.balanceOf(address(this));\\r\\n        if (balance > 0) {\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                address(primaryStable),\\r\\n                balance\\r\\n            );\\r\\n            primaryStable.transfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n    function collectRewardTokens()\\r\\n        external\\r\\n        override\\r\\n        onlyHarvester\\r\\n        nonReentrant\\r\\n    {\\r\\n        _collectRewards();\\r\\n    }\\r\\n    function _swapAssetsToPrimaryStable() internal {\\r\\n        if ( (address(token0) != address(primaryStable)) && (token0.balanceOf(address(this)) > 0) )  {\\r\\n            // console.log(\\\"Swapping token0\\\");\\r\\n            swap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(token0)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                token0.balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n        if ( (address(token1) != address(primaryStable)) && (token1.balanceOf(address(this)) > 0) )  {\\r\\n            // console.log(\\\"Swapping token1\\\");\\r\\n            swap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(token1)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                token1.balanceOf(address(this)),\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    function _swapPrimaryStableToToken0() internal {\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        if (address(primaryStable) != address(token0)) {\\r\\n            swap(\\r\\n                balancerVault,\\r\\n                poolId,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(primaryStable)),\\r\\n                IAsset(address(token0)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                primaryStableBalance,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n     /**\\r\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\r\\n     * @param _asset Address of the asset\\r\\n     */\\r\\n    function supportsAsset(address _asset)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _asset == address(primaryStable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the spending of all assets by their corresponding cToken,\\r\\n     *      if for some reason is it necessary.\\r\\n     */\\r\\n    function safeApproveAllTokens() external override {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal method to respond to the addition of new asset / cTokens\\r\\n     *      We need to approve the cToken and give it permission to spend the asset\\r\\n     * @param _asset Address of the asset to approve\\r\\n     * @param _cToken The cToken for the approval\\r\\n     */\\r\\n    function _abstractSetPToken(address _asset, address _cToken)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n    }\\r\\n   \\r\\n}\\r\\n\",\"keccak256\":\"0xfbb63c862cc5ddc63e3c2850d2f1e56469f28beb086ad30f3b08b8e1853186c4\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event PTokenAdded(address indexed _asset, address _pToken);\\r\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\r\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event RewardTokenCollected(\\r\\n        address recipient,\\r\\n        address rewardToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event RewardTokenAddressesUpdated(\\r\\n        address[] _oldAddresses,\\r\\n        address[] _newAddresses\\r\\n    );\\r\\n    event HarvesterAddressesUpdated(\\r\\n        address _oldHarvesterAddress,\\r\\n        address _newHarvesterAddress\\r\\n    );\\r\\n    event TransferLog (\\r\\n        string _message,\\r\\n        address _asset,\\r\\n        uint256 _number\\r\\n    );\\r\\n\\r\\n    // Core address for the given platform\\r\\n    address public platformAddress;\\r\\n\\r\\n    address public vaultAddress;\\r\\n\\r\\n    // asset => pToken (Platform Specific Token Address)\\r\\n    mapping(address => address) public assetToPToken;\\r\\n\\r\\n    // Full list of all assets supported here\\r\\n    address[] internal assetsMapped;\\r\\n\\r\\n    // Deprecated: Reward token address\\r\\n    // slither-disable-next-line constable-states\\r\\n    address public _deprecated_rewardTokenAddress;\\r\\n\\r\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\r\\n    // slither-disable-next-line constable-states\\r\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\r\\n\\r\\n    // Address of the one address allowed to collect reward tokens\\r\\n    address public harvesterAddress;\\r\\n\\r\\n    // Reward token addresses\\r\\n    address[] public rewardTokenAddresses;\\r\\n    // Reserved for future expansion\\r\\n    int256[98] private _reserved;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal initialize function, to set up initial internal state\\r\\n     * @param _platformAddress Generic platform address\\r\\n     * @param _vaultAddress Address of the Vault\\r\\n     * @param _rewardTokenAddresses Address of reward token for platform\\r\\n     * @param _assets Addresses of initial supported assets\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] calldata _assets,\\r\\n        address[] calldata _pTokens\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableAbstractStrategy._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] memory _assets,\\r\\n        address[] memory _pTokens\\r\\n    ) internal {\\r\\n        platformAddress = _platformAddress;\\r\\n        vaultAddress = _vaultAddress;\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Collect accumulated reward token and send to Vault.\\r\\n     */\\r\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\r\\n        _collectRewardTokens();\\r\\n    }\\r\\n\\r\\n    function _collectRewardTokens() internal {\\r\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\r\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\r\\n            uint256 balance = rewardToken.balanceOf(address(this));\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                rewardTokenAddresses[i],\\r\\n                balance\\r\\n            );\\r\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault.\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Harvester.\\r\\n     */\\r\\n    modifier onlyHarvester() {\\r\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault or Governor.\\r\\n     */\\r\\n    modifier onlyVaultOrGovernor() {\\r\\n        require(\\r\\n            msg.sender == vaultAddress || msg.sender == governor(),\\r\\n            \\\"Caller is not the Vault or Governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _rewardTokenAddresses Address array of the reward token\\r\\n     */\\r\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\r\\n            require(\\r\\n                _rewardTokenAddresses[i] != address(0),\\r\\n                \\\"Can not set an empty address as a reward token\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RewardTokenAddressesUpdated(\\r\\n            rewardTokenAddresses,\\r\\n            _rewardTokenAddresses\\r\\n        );\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the reward token addresses.\\r\\n     * @return address[] the reward token addresses.\\r\\n     */\\r\\n    function getRewardTokenAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function setPTokenAddress(address _asset, address _pToken)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setPTokenAddress(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a supported asset by passing its index.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _assetIndex Index of the asset to be removed\\r\\n     */\\r\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\r\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\r\\n        address asset = assetsMapped[_assetIndex];\\r\\n        address pToken = assetToPToken[asset];\\r\\n\\r\\n        if (_assetIndex < assetsMapped.length - 1) {\\r\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\r\\n        }\\r\\n        assetsMapped.pop();\\r\\n        assetToPToken[asset] = address(0);\\r\\n\\r\\n        emit PTokenRemoved(asset, pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      Add to internal mappings and execute the platform specific,\\r\\n     * abstract method `_abstractSetPToken`\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\r\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\r\\n        require(\\r\\n            _asset != address(0) && _pToken != address(0),\\r\\n            \\\"Invalid addresses\\\"\\r\\n        );\\r\\n\\r\\n        assetToPToken[_asset] = _pToken;\\r\\n        assetsMapped.push(_asset);\\r\\n\\r\\n        emit PTokenAdded(_asset, _pToken);\\r\\n\\r\\n        _abstractSetPToken(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      strategy contracts, i.e. mistaken sends.\\r\\n     * @param _asset Address for the asset\\r\\n     * @param _amount Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address _asset, uint256 _amount)\\r\\n        public\\r\\n        onlyGovernor\\r\\n    {\\r\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _harvesterAddress Address of the harvester\\r\\n     */\\r\\n    function setHarvesterAddress(address _harvesterAddress)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        harvesterAddress = _harvesterAddress;\\r\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                 Abstract\\r\\n    ****************************************/\\r\\n\\r\\n    function _abstractSetPToken(address _asset, address _pToken)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    function safeApproveAllTokens() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit an amount of asset into the platform\\r\\n     * @param _asset               Address for the asset\\r\\n     * @param _amount              Units of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit balance of all supported assets into the platform\\r\\n     */\\r\\n    function depositAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an amount of asset from the platform.\\r\\n     * @param _recipient         Address to which the asset should be sent\\r\\n     * @param _asset             Address of the asset\\r\\n     * @param _amount            Units of asset to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\r\\n     */\\r\\n    function withdrawAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total primary stable value held in the platform.\\r\\n     *      This includes any interest that was generated since depositing.\\r\\n     * @return balance    Total value of the asset in the platform\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an asset is supported.\\r\\n     * @param _asset    Address of the asset\\r\\n     * @return bool     Whether asset is supported\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x232664a78773fffce1d3f7cf05c43d7a08c81966ace4ce55fcfceaa2555589a5\",\"license\":\"agpl-3.0\"},\"contracts/utils/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x72976e446429837ea5cf2b52b6a9b8e0dbf2790e52b1c0d218103cb08daf2a2e\",\"license\":\"MIT\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80638eac222311610146578063c7af3352116100c3578063dbe55e5611610087578063dbe55e561461050c578063de5f62681461051f578063f664b3d914610527578063f6ca71b01461052f578063f817bc6314610544578063f97595181461054d57600080fd5b8063c7af3352146104b6578063d21220a7146104be578063d2f24893146104d2578063d38bfff4146104e6578063d9caed12146104f957600080fd5b8063a95329f41161010a578063a95329f414610454578063aa388af614610468578063ad1728cb146102e6578063c2e1e3f41461049b578063c71daccb146104ae57600080fd5b80638eac2223146103f55780639136616a146104085780639688d2fc1461041b57806396d538bb1461042e578063997781d61461044157600080fd5b80632e655201116101d45780635bdd18d6116101985780635bdd18d6146103ab5780635d36b190146103bf57806367c7066c146103c75780637b2d9b2c146103da578063853828b6146103ed57600080fd5b80632e655201146103605780633e0dc34e14610373578063430bf08a1461037d57806347e7ef24146103905780635a063f63146103a357600080fd5b80630fc3b4c41161021b5780630fc3b4c4146102e85780631072cbea146103115780631380e1d614610324578063158274a5146103385780632a4d90a41461034c57600080fd5b8063063bde24146102585780630b7132cf1461027e5780630c340a241461029f5780630dfe1681146102bf5780630ed57b3a146102d3575b600080fd5b61026b6b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b61026b61028c366004614732565b6101076020526000908152604090205481565b6102a761055b565b6040516001600160a01b039091168152602001610275565b610100546102a7906001600160a01b031681565b6102e66102e136600461474f565b610578565b005b6102a76102f6366004614732565b6035602052600090815260409020546001600160a01b031681565b6102e661031f366004614997565b6105b3565b610104546102a7906001600160a01b031681565b610109546102a7906001600160a01b031681565b610108546102a7906001600160a01b031681565b6037546102a7906001600160a01b031681565b61026b6101065481565b6034546102a7906001600160a01b031681565b6102e661039e366004614997565b6105f3565b6102e6610694565b610105546102a7906001600160a01b031681565b6102e6610733565b6039546102a7906001600160a01b031681565b6102a76103e8366004614bb4565b6107d9565b6102e6610803565b6102e6610403366004614847565b610c2d565b6102e6610416366004614bb4565b611194565b6102e6610429366004614788565b61135f565b6102e661043c3660046149f6565b611468565b6102e661044f366004614997565b61158e565b610103546102a7906001600160a01b031681565b61048b610476366004614732565b610102546001600160a01b0391821691161490565b6040519015158152602001610275565b6102e66104a9366004614732565b61164d565b61026b6116cc565b61048b611a9c565b610101546102a7906001600160a01b031681565b610102546102a7906001600160a01b031681565b6102e66104f4366004614732565b611acd565b6102e6610507366004614956565b611b71565b6033546102a7906001600160a01b031681565b6102e6611f2c565b61026b600481565b610537612011565b6040516102759190614db4565b61026b60385481565b61026b662386f26fc1000081565b60006105736000805160206154df8339815191525490565b905090565b610580611a9c565b6105a55760405162461bcd60e51b815260040161059c90614f56565b60405180910390fd5b6105af8282612073565b5050565b6105bb611a9c565b6105d75760405162461bcd60e51b815260040161059c90614f56565b6105af6105e261055b565b6001600160a01b03841690836121d2565b6034546001600160a01b0316331461061d5760405162461bcd60e51b815260040161059c90614f1f565b6000805160206154bf8339815191528054600281141561064f5760405162461bcd60e51b815260040161059c90615009565b60028255610102546001600160a01b038581169116146106815760405162461bcd60e51b815260040161059c90614fdb565b61068b8484612224565b50600190555050565b6039546001600160a01b031633146106ee5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f7420746865204861727665737465720000000000604482015260640161059c565b6000805160206154bf833981519152805460028114156107205760405162461bcd60e51b815260040161059c90615009565b6002825561072c612588565b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b0316146107ce5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161059c565b6107d733612814565b565b603a81815481106107e957600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610834575061081f61055b565b6001600160a01b0316336001600160a01b0316145b61088c5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b606482015260840161059c565b6000805160206154bf833981519152805460028114156108be5760405162461bcd60e51b815260040161059c90615009565b6002825560008061010560009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561091457600080fd5b505afa158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c9190614b64565b506001600160701b031691506001600160701b0316915061096b6128d8565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156109b057600080fd5b505afa1580156109c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e89190614bcd565b90508015610ae75761010554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610a3657600080fd5b505afa158015610a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6e9190614bcd565b9050600081610a7d848761537b565b610a87919061526b565b9050600082610a96858761537b565b610aa0919061526b565b610100546101015461010554929350610ae1926001600160a01b0392831692918216911687610ad087600461293d565b610adb87600461293d565b30612969565b50505050505b610aef612acd565b610105546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b9190614bcd565b90508015610b7b57610b7b612d0c565b610102546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610bc057600080fd5b505afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190614bcd565b60345461010254919250610c19916001600160a01b039081169116836121d2565b610c21612588565b50505050600182555050565b610c35611a9c565b610c515760405162461bcd60e51b815260040161059c90614f56565b600054610100900460ff1680610c6a575060005460ff16155b610c865760405162461bcd60e51b815260040161059c90614f8d565b600054610100900460ff16158015610ca8576000805461ffff19166101011790555b60008b8b8281610cba57610cba61547d565b9050602002016020810190610ccf9190614732565b6001600160a01b03161415610cf65760405162461bcd60e51b815260040161059c90615031565b600087878281610d0857610d0861547d565b9050602002016020810190610d1d9190614732565b6001600160a01b03161415610d445760405162461bcd60e51b815260040161059c90615031565b6001600160a01b038d16610d6a5760405162461bcd60e51b815260040161059c90615031565b6001600160a01b038416610d905760405162461bcd60e51b815260040161059c90615031565b6001600160a01b038316610db65760405162461bcd60e51b815260040161059c90615031565b6001600160a01b038216610ddc5760405162461bcd60e51b815260040161059c90615031565b88886000818110610def57610def61547d565b9050602002016020810190610e049190614732565b61010080546001600160a01b0319166001600160a01b039290921691909117905588886001818110610e3857610e3861547d565b9050602002016020810190610e4d9190614732565b61010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508461010260006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c61010360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508161010460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600089899050905060005b81811015610ff9578a8a82818110610f1157610f1161547d565b9050602002016020810190610f269190614732565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5e57600080fd5b505afa158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f969190614c38565b610fa190600a6152d0565b61010760008d8d85818110610fb857610fb861547d565b9050602002016020810190610fcd9190614732565b6001600160a01b0316815260208101919091526040016000205580610ff181615400565b915050610ef7565b508787600081811061100d5761100d61547d565b90506020020160208101906110229190614732565b61010580546001600160a01b03199081166001600160a01b039384161790915561010880548216878416179055609d80549091169187169190911790556110e18e8e8e8e8e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612e7992505050565b6111348a8a60008181106110f7576110f761547d565b905060200201602081019061110c9190614732565b8989600081811061111f5761111f61547d565b90506020020160208101906105af9190614732565b6111728a8a600181811061114a5761114a61547d565b905060200201602081019061115f9190614732565b8989600181811061111f5761111f61547d565b508015611185576000805461ff00191690555b50505050505050505050505050565b61119c611a9c565b6111b85760405162461bcd60e51b815260040161059c90614f56565b60365481106111f95760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161059c565b60006036828154811061120e5761120e61547d565b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169061124b9060019061539a565b8310156112cd57603680546112629060019061539a565b815481106112725761127261547d565b600091825260209091200154603680546001600160a01b03909216918590811061129e5761129e61547d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60368054806112de576112de615467565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b611367611a9c565b6113835760405162461bcd60e51b815260040161059c90614f56565b600054610100900460ff168061139c575060005460ff16155b6113b85760405162461bcd60e51b815260040161059c90614f8d565b600054610100900460ff161580156113da576000805461ffff19166101011790555b61144b8989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612e7992505050565b801561145d576000805461ff00191690555b505050505050505050565b611470611a9c565b61148c5760405162461bcd60e51b815260040161059c90614f56565b60005b818110156115405760008383838181106114ab576114ab61547d565b90506020020160208101906114c09190614732565b6001600160a01b0316141561152e5760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b606482015260840161059c565b8061153881615400565b91505061148f565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161157593929190614dc7565b60405180910390a1611589603a83836145d5565b505050565b611596611a9c565b6115b25760405162461bcd60e51b815260040161059c90614f56565b6001600160a01b0382166115d85760405162461bcd60e51b815260040161059c90615031565b806116255760405162461bcd60e51b815260206004820152601960248201527f456d70747920706f6f6c206964206e6f7420616c6c6f77656400000000000000604482015260640161059c565b61010980546001600160a01b0319166001600160a01b03939093169290921790915561010655565b611655611a9c565b6116715760405162461bcd60e51b815260040161059c90614f56565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b610100546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d9190614bcd565b610101546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190614bcd565b610108546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118519190614bcd565b905080156119ba5761010554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190614bcd565b905060008061010560009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119639190614b64565b506001600160701b0391821693501690508261197f858461537b565b611989919061526b565b6119939087615253565b9550826119a0858361537b565b6119aa919061526b565b6119b49086615253565b94505050505b61010254610100546000916001600160a01b03918216911614611a14578315611a0f5761010954610106546101005461010254611a0c936001600160a01b039081169392600092908216911689612f58565b90505b611a21565b611a1e8482615253565b90505b61010254610101546000916001600160a01b03918216911614611a7b578315611a765761010954610106546101015461010254611a73936001600160a01b039081169392600092908216911689612f58565b90505b611a88565b611a858482615253565b90505b611a928183615253565b9550505050505090565b6000611ab46000805160206154df8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b611ad5611a9c565b611af15760405162461bcd60e51b815260040161059c90614f56565b611b19817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b0316611b396000805160206154df8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b03163314611b9b5760405162461bcd60e51b815260040161059c90614f1f565b6000805160206154bf83398151915280546002811415611bcd5760405162461bcd60e51b815260040161059c90615009565b60028255610102546001600160a01b03858116911614611bff5760405162461bcd60e51b815260040161059c90614fdb565b60008061010560009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c5157600080fd5b505afa158015611c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c899190614b64565b50610108546040516370a0823160e01b81523060048201526001600160701b0393841695509190921692506000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1a9190614bcd565b90508015611e7d5761010554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015611d6857600080fd5b505afa158015611d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da09190614bcd565b61010954909150600090611e02906001600160a01b0316611dc28a6004613439565b610100546001600160a01b03908116600081815261010760205260408082205461010154909416808352912054610106548c948c948b9491939291613448565b905082811115611e0f5750815b600082611e1c838861537b565b611e26919061526b565b9050600083611e35848861537b565b611e3f919061526b565b9050611e4a83613528565b610100546101015461010554611e76926001600160a01b03908116928116911686610ad087600461293d565b5050505050505b611e85612acd565b610102546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611eca57600080fd5b505afa158015611ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f029190614bcd565b61010254909150611f1d906001600160a01b03168a836121d2565b50505050600182555050505050565b6034546001600160a01b03163314611f565760405162461bcd60e51b815260040161059c90614f1f565b6000805160206154bf83398151915280546002811415611f885760405162461bcd60e51b815260040161059c90615009565b60028255610102546040516370a0823160e01b815230600482015261072c916001600160a01b03169081906370a082319060240160206040518083038186803b158015611fd457600080fd5b505afa158015611fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200c9190614bcd565b612224565b6060603a80548060200260200160405190810160405280929190818152602001828054801561206957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161204b575b5050505050905090565b6001600160a01b0382811660009081526035602052604090205416156120d05760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015260640161059c565b6001600160a01b038216158015906120f057506001600160a01b03811615155b6121305760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015260640161059c565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261158990849061355a565b610102546001600160a01b038381169116146122525760405162461bcd60e51b815260040161059c90614fdb565b60008061225d61362c565b91509150612269613855565b610101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e69190614bcd565b905060008115612322576101095461010654610101546101005461231f936001600160a01b039081169392600092908216911687612f58565b90505b610100546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561236757600080fd5b505afa15801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190614bcd565b6101095490915060009061240c906001600160a01b03166123c160028661526b565b6123cb908561539a565b610100546001600160a01b03908116600081815261010760205260408082205461010154909416808352912054610106548d948d9490936001929190613921565b6101095461010654610100546101015493945061243f936001600160a01b03938416936000928116911630808885613a30565b50610100546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561248457600080fd5b505afa158015612498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bc9190614bcd565b610101546040516370a0823160e01b81523060048201529193506001600160a01b0316906370a082319060240160206040518083038186803b15801561250157600080fd5b505afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125399190614bcd565b6101005461010154919550612573916001600160a01b039182169116848761256282600461293d565b61256d8a600461293d565b30613dbf565b50505061257e612d0c565b5050505050505050565b61010860009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125d957600080fd5b505af11580156125ed573d6000803e3d6000fd5b5050610104546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b15801561263a57600080fd5b505afa15801561264e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126729190614bcd565b905080156126ad57610104546101025460009161269d916001600160a01b0391821691168430613fb9565b90506126a98184615253565b9250505b610102546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156126f257600080fd5b505afa158015612706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272a9190614bcd565b905080156115895760395461010254604080516001600160a01b03938416815292909116602083015281018290527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a16101025460395460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b1580156127d657600080fd5b505af11580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190614b42565b50505050565b6001600160a01b03811661286a5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161059c565b806001600160a01b031661288a6000805160206154df8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36128d5816000805160206154df83398151915255565b50565b61010860009054906101000a90046001600160a01b03166001600160a01b031663e9fad8ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561292957600080fd5b505af115801561280e573d6000803e3d6000fd5b600061271061294c838261539a565b612956908561537b565b612960919061526b565b90505b92915050565b609d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905260009182919088169063095ea7b390604401602060405180830381600087803b1580156129bc57600080fd5b505af11580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f49190614b42565b50609d546001600160a01b031663baa2abde8a8a89898989612a1842610258615253565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b158015612a8557600080fd5b505af1158015612a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abd9190614be6565b9150915097509795505050505050565b61010254610100546001600160a01b03908116911614801590612b6a5750610100546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612b3057600080fd5b505afa158015612b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b689190614bcd565b115b15612c1757610109546101065461010054610102546040516370a0823160e01b81523060048201819052612c15956001600160a01b0390811695946000949082169391169190819084906370a08231906024015b60206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0e9190614bcd565b6000613a30565b505b61010254610101546001600160a01b03908116911614801590612cb45750610101546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612c7a57600080fd5b505afa158015612c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb29190614bcd565b115b156107d757610109546101065461010154610102546040516370a0823160e01b815230600482018190526128d5956001600160a01b0390811695946000949082169391169190819084906370a0823190602401612bbe565b610105546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d5157600080fd5b505afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190614bcd565b610105546101085460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015612ddd57600080fd5b505af1158015612df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e159190614b42565b506101085460405163534a7e1d60e11b8152600481018390526001600160a01b039091169063a694fc3a906024015b600060405180830381600087803b158015612e5e57600080fd5b505af1158015612e72573d6000803e3d6000fd5b5050505050565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612eb5603a85856145d5565b50815181518114612eff5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015260640161059c565b60005b8181101561257e57612f46848281518110612f1f57612f1f61547d565b6020026020010151848381518110612f3957612f3961547d565b6020026020010151612073565b80612f5081615400565b915050612f02565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820152879080876001811115612fb457612fb4615451565b90816001811115612fc757612fc7615451565b9052506001600160a01b0386811660208301528581166040808401919091526060830186905251631f29a8cd60e31b8152600481018a905260009182919085169063f94d46689060240160006040518083038186803b15801561302957600080fd5b505afa15801561303d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130659190810190614a38565b5091509150600080856001600160a01b031663f6c009278d6040518263ffffffff1660e01b815260040161309b91815260200190565b604080518083038186803b1580156130b257600080fd5b505afa1580156130c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ea91906149c3565b9092509050600081600281111561310357613103615451565b141561323c5760008060005b86518160ff1610156131ab578c6001600160a01b0316878260ff168151811061313a5761313a61547d565b60200260200101516001600160a01b0316141561315c578060ff169250613199565b8b6001600160a01b0316878260ff168151811061317b5761317b61547d565b60200260200101516001600160a01b03161415613199578060ff1691505b806131a38161541b565b91505061310f565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a906131dd908a90899087908790600401615123565b60206040518083038186803b1580156131f557600080fd5b505afa158015613209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322d9190614bcd565b9850505050505050505061342f565b600181600281111561325057613250615451565b141561335b5760008060005b86518160ff16101561332a578c6001600160a01b0316878260ff16815181106132875761328761547d565b60200260200101516001600160a01b031614156132c257858160ff16815181106132b3576132b361547d565b60200260200101519250613318565b8b6001600160a01b0316878260ff16815181106132e1576132e161547d565b60200260200101516001600160a01b0316141561331857858160ff168151811061330d5761330d61547d565b602002602001015191505b806133228161541b565b91505061325c565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c906131dd908a9086908690600401615184565b60008060005b86518160ff16101561332a578c6001600160a01b0316878260ff168151811061338c5761338c61547d565b60200260200101516001600160a01b031614156133c757858160ff16815181106133b8576133b861547d565b6020026020010151925061341d565b8b6001600160a01b0316878260ff16815181106133e6576133e661547d565b60200260200101516001600160a01b0316141561341d57858160ff16815181106134125761341261547d565b602002602001015191505b806134278161541b565b915050613361565b9695505050505050565b600061271061294c8382615253565b600080613455878a61537b565b61345f878c61537b565b6134699190615253565b866134748d8b61537b565b61347e919061537b565b613488919061526b565b905060005b6001811015613518576000896134a3848d61537b565b6134ad919061526b565b905060006134c08f896000898b87612f58565b90506134cc818d61537b565b6134d6838f61537b565b6134e09190615253565b828f8d6134ed919061537b565b6134f7919061537b565b613501919061526b565b93505050808061351090615400565b91505061348d565b509b9a5050505050505050505050565b61010854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401612e44565b60006135af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141a69092919063ffffffff16565b80519091501561158957808060200190518101906135cd9190614b42565b6115895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059c565b60008060008061010560009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561368157600080fd5b505afa158015613695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b99190614b64565b506001600160701b031691506001600160701b03169150600361010060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561372157600080fd5b505afa158015613735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137599190614c38565b61376391906153b1565b61376e90600a6152d0565b8211801561380d5750610101546040805163313ce56760e01b815290516003926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156137bd57600080fd5b505afa1580156137d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f59190614c38565b6137ff91906153b1565b61380a90600a6152d0565b81115b61384c5760405162461bcd60e51b815260206004820152601060248201526f526573657276657320746f6f206c6f7760801b604482015260640161059c565b90939092509050565b610102546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561389a57600080fd5b505afa1580156138ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d29190614bcd565b61010054610102549192506001600160a01b039182169116146128d557610109546101065461010254610100546105af936001600160a01b039081169392600092908216911630808885613a30565b60008a8189896139318a8e61537b565b61393b919061526b565b6139459190615253565b61394f8b8e61537b565b613959919061526b565b905061398a6040518060400160405280600d81526020016c0616d6f756e7430546f5377617609c1b815250826141bf565b60005b87811015613a1f576139be6040518060400160405280600681526020016506f6e537761760d41b8152508787614204565b60006139cf8f8960008a8a88612f58565b90508b83828f6139df919061537b565b6139e9919061526b565b6139f39190615253565b8c8f6139ff919061537b565b613a09919061526b565b9250508080613a1790615400565b91505061398d565b509c9b505050505050505050505050565b6000808a9050613a716040518060400160405280601981526020017842616c616e6365725661756c743a207377617070696e67203160381b8152508261424b565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b8152306004820152613b2291908a906001600160a01b038216906370a082319060240160206040518083038186803b158015613ae557600080fd5b505afa158015613af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1d9190614bcd565b614290565b6040516370a0823160e01b81523060048201526001600160a01b0389169063095ea7b390839083906370a082319060240160206040518083038186803b158015613b6b57600080fd5b505afa158015613b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba39190614bcd565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015613be957600080fd5b505af1158015613bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c219190614b42565b5082613c5d57613c358b8b8b8b8b89612f58565b9250613c5a613c53662386f26fc10000670de0b6b3a764000061539a565b84906142d7565b92505b613ca96040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b8a8152602081018a6001811115613cc257613cc2615451565b90816001811115613cd557613cd5615451565b9052506001600160a01b03898116604083810191909152898216606080850191909152608080850189905282519081018352600060208201819052918101919091528983168152888316918101919091529083166352bbbe29838388613d3d42610258615253565b6040518563ffffffff1660e01b8152600401613d5c9493929190615068565b602060405180830381600087803b158015613d7657600080fd5b505af1158015613d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dae9190614bcd565b9d9c50505050505050505050505050565b609d5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101879052600091829182918b169063095ea7b390604401602060405180830381600087803b158015613e1357600080fd5b505af1158015613e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4b9190614b42565b50609d5460405163095ea7b360e01b81526001600160a01b03918216600482015260248101899052908a169063095ea7b390604401602060405180830381600087803b158015613e9a57600080fd5b505af1158015613eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed29190614b42565b50609d546001600160a01b031663e8e337008b8b8b8b8b8b8b613ef742610258615253565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b158015613f6e57600080fd5b505af1158015613f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa69190614c0a565b9250925092509750975097945050505050565b609d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905260009186169063095ea7b390604401602060405180830381600087803b15801561400957600080fd5b505af115801561401d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140419190614b42565b50600061404f8686866142ec565b90508061406057600091505061419e565b60408051600280825260608201835260009260208301908036833701905050905086816000815181106140955761409561547d565b60200260200101906001600160a01b031690816001600160a01b03168152505085816001815181106140c9576140c961547d565b6001600160a01b039283166020918202929092010152609d54600091166338ed1739876140f786600461293d565b858961410542610258615253565b6040518663ffffffff1660e01b81526004016141259594939291906151c2565b600060405180830381600087803b15801561413f57600080fd5b505af1158015614153573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261417b9190810190614b0d565b9050806001815181106141905761419061547d565b602002602001015193505050505b949350505050565b60606141b58484600085614419565b90505b9392505050565b6105af82826040516024016141d5929190614efd565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052614541565b61158983838360405160240161421c93929190614e9c565b60408051601f198184030181529190526020810180516001600160e01b03166307e763af60e51b179052614541565b6105af8282604051602401614261929190614e72565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614541565b6115898383836040516024016142a893929190614ecf565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b179052614541565b60006129608383670de0b6b3a7640000614562565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106143255761432561547d565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106143595761435961547d565b6001600160a01b039283166020918202929092010152609d5460405163d06ca61f60e01b8152600092919091169063d06ca61f9061439d90879086906004016151a9565b60006040518083038186803b1580156143b557600080fd5b505afa1580156143c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143f19190810190614b0d565b9050806001815181106144065761440661547d565b6020026020010151925050509392505050565b60608247101561447a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059c565b843b6144c85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059c565b600080866001600160a01b031685876040516144e49190614d98565b60006040518083038185875af1925050503d8060008114614521576040519150601f19603f3d011682016040523d82523d6000602084013e614526565b606091505b5091509150614536828286614584565b979650505050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008061456f85856145bd565b905061457b81846145c9565b95945050505050565b606083156145935750816141b8565b8251156145a35782518084602001fd5b8160405162461bcd60e51b815260040161059c9190614e5f565b6000612960828461537b565b6000612960828461526b565b828054828255906000526020600020908101928215614628579160200282015b828111156146285781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906145f5565b50614634929150614638565b5090565b5b808211156146345760008155600101614639565b8035614658816154a9565b919050565b60008083601f84011261466f57600080fd5b50813567ffffffffffffffff81111561468757600080fd5b6020830191508360208260051b85010111156146a257600080fd5b9250929050565b600082601f8301126146ba57600080fd5b815160206146cf6146ca8361522f565b6151fe565b80838252828201915082860187848660051b89010111156146ef57600080fd5b60005b8581101561470e578151845292840192908401906001016146f2565b5090979650505050505050565b80516001600160701b038116811461465857600080fd5b60006020828403121561474457600080fd5b81356141b8816154a9565b6000806040838503121561476257600080fd5b823561476d816154a9565b9150602083013561477d816154a9565b809150509250929050565b60008060008060008060008060a0898b0312156147a457600080fd5b88356147af816154a9565b975060208901356147bf816154a9565b9650604089013567ffffffffffffffff808211156147dc57600080fd5b6147e88c838d0161465d565b909850965060608b013591508082111561480157600080fd5b61480d8c838d0161465d565b909650945060808b013591508082111561482657600080fd5b506148338b828c0161465d565b999c989b5096995094979396929594505050565b6000806000806000806000806000806000806101208d8f03121561486a57600080fd5b6148738d61464d565b9b5061488160208e0161464d565b9a5067ffffffffffffffff60408e0135111561489c57600080fd5b6148ac8e60408f01358f0161465d565b909a50985067ffffffffffffffff60608e013511156148ca57600080fd5b6148da8e60608f01358f0161465d565b909850965067ffffffffffffffff60808e013511156148f857600080fd5b6149088e60808f01358f0161465d565b909650945061491960a08e0161464d565b935061492760c08e0161464d565b925061493560e08e0161464d565b91506149446101008e0161464d565b90509295989b509295989b509295989b565b60008060006060848603121561496b57600080fd5b8335614976816154a9565b92506020840135614986816154a9565b929592945050506040919091013590565b600080604083850312156149aa57600080fd5b82356149b5816154a9565b946020939093013593505050565b600080604083850312156149d657600080fd5b82516149e1816154a9565b60208401519092506003811061477d57600080fd5b60008060208385031215614a0957600080fd5b823567ffffffffffffffff811115614a2057600080fd5b614a2c8582860161465d565b90969095509350505050565b600080600060608486031215614a4d57600080fd5b835167ffffffffffffffff80821115614a6557600080fd5b818601915086601f830112614a7957600080fd5b81516020614a896146ca8361522f565b8083825282820191508286018b848660051b8901011115614aa957600080fd5b600096505b84871015614ad5578051614ac1816154a9565b835260019690960195918301918301614aae565b5091890151919750909350505080821115614aef57600080fd5b50614afc868287016146a9565b925050604084015190509250925092565b600060208284031215614b1f57600080fd5b815167ffffffffffffffff811115614b3657600080fd5b61419e848285016146a9565b600060208284031215614b5457600080fd5b815180151581146141b857600080fd5b600080600060608486031215614b7957600080fd5b614b828461471b565b9250614b906020850161471b565b9150604084015163ffffffff81168114614ba957600080fd5b809150509250925092565b600060208284031215614bc657600080fd5b5035919050565b600060208284031215614bdf57600080fd5b5051919050565b60008060408385031215614bf957600080fd5b505080516020909101519092909150565b600080600060608486031215614c1f57600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215614c4a57600080fd5b815160ff811681146141b857600080fd5b600081518084526020808501945080840160005b83811015614c945781516001600160a01b031687529582019590820190600101614c6f565b509495945050505050565b60008151808452614cb78160208601602086016153d4565b601f01601f19169290920160200192915050565b60028110614ce957634e487b7160e01b600052602160045260246000fd5b9052565b6000610120614cfd848451614ccb565b6020838101516001600160a01b03169085015260408084015190614d2b908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151614d6460c08601826001600160a01b03169052565b5060e0830151614d7f60e08601826001600160a01b03169052565b5061010080840151828287015261342f83870182614c9f565b60008251614daa8184602087016153d4565b9190910192915050565b6020815260006129606020830184614c5b565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015614e115781546001600160a01b031684529284019260019182019101614dec565b505050838103828501528481528590820160005b86811015614e53578235614e38816154a9565b6001600160a01b031682529183019190830190600101614e25565b50979650505050505050565b6020815260006129606020830184614c9f565b604081526000614e856040830185614c9f565b905060018060a01b03831660208301529392505050565b606081526000614eaf6060830186614c9f565b6001600160a01b0394851660208401529290931660409091015292915050565b606081526000614ee26060830186614c9f565b6001600160a01b039490941660208301525060400152919050565b604081526000614f106040830185614c9f565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60e08152845160e082015260006020860151615088610100840182614ccb565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c06101808401526150d16101a0840182614c9f565b915050615111602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b6080815260006151366080830187614ced565b82810360208481019190915286518083528782019282019060005b8181101561516d57845183529383019391830191600101615151565b505060408501969096525050506060015292915050565b6060815260006151976060830186614ced565b60208301949094525060400152919050565b8281526040602082015260006141b56040830184614c5b565b85815284602082015260a0604082015260006151e160a0830186614c5b565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561522757615227615493565b604052919050565b600067ffffffffffffffff82111561524957615249615493565b5060051b60200190565b600082198211156152665761526661543b565b500190565b60008261528857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156152c85781600019048211156152ae576152ae61543b565b808516156152bb57918102915b93841c9390800290615292565b509250929050565b600061296060ff8416836000826152e957506001612963565b816152f657506000612963565b816001811461530c576002811461531657615332565b6001915050612963565b60ff8411156153275761532761543b565b50506001821b612963565b5060208310610133831016604e8410600b8410161715615355575081810a612963565b61535f838361528d565b80600019048211156153735761537361543b565b029392505050565b60008160001904831182151516156153955761539561543b565b500290565b6000828210156153ac576153ac61543b565b500390565b600060ff821660ff8416808210156153cb576153cb61543b565b90039392505050565b60005b838110156153ef5781810151838201526020016153d7565b8381111561280e5750506000910152565b60006000198214156154145761541461543b565b5060010190565b600060ff821660ff8114156154325761543261543b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146128d557600080fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220547a8658b6f8c4d2940bced1093e924a107d9026d74ba3a1b691c51bb111a0b464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance()": {
        "details": "Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.",
        "returns": {
          "_0": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit an amount of asset into the platform",
        "params": {
          "_amount": "Units of asset to deposit",
          "_asset": "Address for the asset"
        }
      },
      "depositAll()": {
        "details": "Deposit balance of all supported assets into the platform"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary."
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdrawAll()": {
        "details": "Withdraw all assets from strategy sending assets to Vault."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address,address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as QuickSwap strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30623,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30626,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30666,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30750,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 30752,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 30756,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30759,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30761,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 30763,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30765,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 30768,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30772,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 7950,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IUniswapV2Router02)5552"
      },
      {
        "astId": 8212,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7210,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25853,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "token0",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25856,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "token1",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25859,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "primaryStable",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25862,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickTokenNew",
        "offset": 0,
        "slot": "259",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25865,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickDragon",
        "offset": 0,
        "slot": "260",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 25868,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickSwapPair",
        "offset": 0,
        "slot": "261",
        "type": "t_contract(IUniswapV2Pair)5143"
      },
      {
        "astId": 25870,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "poolId",
        "offset": 0,
        "slot": "262",
        "type": "t_bytes32"
      },
      {
        "astId": 25874,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "assetToDenominator",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25877,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "quickSwapPairStaker",
        "offset": 0,
        "slot": "264",
        "type": "t_contract(IStakingRewards)4652"
      },
      {
        "astId": 25879,
        "contract": "contracts/strategies/QuickSwapStrategy.sol:QuickSwapStrategy",
        "label": "balancerVault",
        "offset": 0,
        "slot": "265",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingRewards)4652": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)5143": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)5552": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}