{
  "address": "0x07921a3581699eE4c0876D443093DfcD4ccb806C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldHarvesterAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newHarvesterAddress",
          "type": "address"
        }
      ],
      "name": "HarvesterAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "TransferLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALUE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolIdUsdcTusdDaiUsdt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerPoolIdWmaticUsdcWethBal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoMine",
      "outputs": [
        {
          "internalType": "contract IDODOMine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV1UsdcUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoV2DodoUsdtPool",
      "outputs": [
        {
          "internalType": "contract IDODOV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvesterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_usdtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wMaticToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "dodoAddresses",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryStable",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primaryStable",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolIdUsdcTusdDaiUsdt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_balancerPoolIdWmaticUsdcWethBal",
          "type": "bytes32"
        }
      ],
      "name": "setBalancerAndPrimaryStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvesterAddress",
          "type": "address"
        }
      ],
      "name": "setHarvesterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9ac4f9748dd52475cd86f1eaace27cad74e7ae1940340cadc9779840baef32e",
  "receipt": {
    "to": null,
    "from": "0xA2a067351C977113B98096F75c9685a3d51614eC",
    "contractAddress": "0x07921a3581699eE4c0876D443093DfcD4ccb806C",
    "transactionIndex": 26,
    "gasUsed": "4646623",
    "logsBloom": "0x
    "blockHash": "0x21148042e28f5dad046e31835f33fdccb6bd185bab226993593af732051b8463",
    "transactionHash": "0xd9ac4f9748dd52475cd86f1eaace27cad74e7ae1940340cadc9779840baef32e",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 32558853,
        "transactionHash": "0xd9ac4f9748dd52475cd86f1eaace27cad74e7ae1940340cadc9779840baef32e",
        "address": "0x07921a3581699eE4c0876D443093DfcD4ccb806C",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x21148042e28f5dad046e31835f33fdccb6bd185bab226993593af732051b8463"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 32558853,
        "transactionHash": "0xd9ac4f9748dd52475cd86f1eaace27cad74e7ae1940340cadc9779840baef32e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a2a067351c977113b98096f75c9685a3d51614ec",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003205852834857d7000000000000000000000000000000000000000000000002697fb9780cb02e51000000000000000000000000000000000000000000000949fc306911fb66f5f4000000000000000000000000000000000000000000000002665f61258967d67a000000000000000000000000000000000000000000000949ff50c1647eaf4dcb",
        "logIndex": 105,
        "blockHash": "0x21148042e28f5dad046e31835f33fdccb6bd185bab226993593af732051b8463"
      }
    ],
    "blockNumber": 32558853,
    "cumulativeGasUsed": "8304435",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "687ed9fa5cffd3a4c7a6373a1d9ad1d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldHarvesterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newHarvesterAddress\",\"type\":\"address\"}],\"name\":\"HarvesterAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"TransferLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALUE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolIdUsdcTusdDaiUsdt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolIdWmaticUsdcWethBal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoMine\",\"outputs\":[{\"internalType\":\"contract IDODOMine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV1UsdcUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoV2DodoUsdtPool\",\"outputs\":[{\"internalType\":\"contract IDODOV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvesterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wMaticToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dodoAddresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryStable\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primaryStable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolIdUsdcTusdDaiUsdt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolIdWmaticUsdcWethBal\",\"type\":\"bytes32\"}],\"name\":\"setBalancerAndPrimaryStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvesterAddress\",\"type\":\"address\"}],\"name\":\"setHarvesterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance()\":{\"details\":\"Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.\",\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated reward token and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit an amount of asset into the platform\",\"params\":{\"_amount\":\"Units of asset to deposit\",\"_asset\":\"Address for the asset\"}},\"depositAll()\":{\"details\":\"Deposit balance of all supported assets into the platform\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address,address,address[],address[],address[],address,address,address[])\":{\"params\":{\"_assets\":\"Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                USDC\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Address of the nUSD\",\"_rewardTokenAddresses\":\"Address of USDC\",\"_vaultAddress\":\"Address of the vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"setHarvesterAddress(address)\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_harvesterAddress\":\"Address of the harvester\"}},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward token\"}},\"supportsAsset(address)\":{\"details\":\"Check if an asset is supported.\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"_0\":\"bool     Whether asset is supported\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address[],address[],address[],address,address,address[])\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Dodo strategies don't fit well within that abstraction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/DodoStrategy.sol\":\"DodoStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/connectors/dodo/IDODOMine.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOMine {\\r\\n\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    function claimAllRewards() external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8ebf3cf754f70f6524eab6b11d16c933a3c99fabfbe0afb88d3d06756899a2a4\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOProxy.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOProxy {\\r\\n    function dodoSwapV1(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory dodoPairs,\\r\\n        uint256 directions,\\r\\n        bool,\\r\\n        uint256 deadLine\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function dodoSwapV2TokenToToken(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 minReturnAmount,\\r\\n        address[] memory dodoPairs,\\r\\n        uint256 directions,\\r\\n        bool isIncentive,\\r\\n        uint256 deadLine\\r\\n    ) external returns (uint256 returnAmount);\\r\\n}\",\"keccak256\":\"0x88c04403ba8bad71f5e43eb1a6a87cad472032e8be99c87a23e046a20edebf67\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOV1.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOV1 {\\r\\n    function init(\\r\\n        address owner,\\r\\n        address supervisor,\\r\\n        address maintainer,\\r\\n        address baseToken,\\r\\n        address quoteToken,\\r\\n        address oracle,\\r\\n        uint256 lpFeeRate,\\r\\n        uint256 mtFeeRate,\\r\\n        uint256 k,\\r\\n        uint256 gasPriceLimit\\r\\n    ) external;\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function sellBaseToken(\\r\\n        uint256 amount,\\r\\n        uint256 minReceiveQuote,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function buyBaseToken(\\r\\n        uint256 amount,\\r\\n        uint256 maxPayQuote,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\\r\\n\\r\\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\\r\\n\\r\\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\\r\\n\\r\\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawBase(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAllBase() external returns (uint256);\\r\\n\\r\\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawQuote(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAllQuote() external returns (uint256);\\r\\n\\r\\n    function _BASE_CAPITAL_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _QUOTE_CAPITAL_TOKEN_() external view returns (address);\\r\\n\\r\\n    function _BASE_TOKEN_() external returns (address);\\r\\n\\r\\n    function _QUOTE_TOKEN_() external returns (address);\\r\\n\\r\\n    function _K_() external view returns (uint256);\\r\\n\\r\\n    function _R_STATUS_() external view returns (RStatus);\\r\\n\\r\\n    function _TARGET_BASE_TOKEN_AMOUNT_() external view returns (uint256);\\r\\n\\r\\n    function _TARGET_QUOTE_TOKEN_AMOUNT_() external view returns (uint256);\\r\\n\\r\\n    function _BASE_BALANCE_() external view returns (uint256);\\r\\n\\r\\n    function _QUOTE_BALANCE_() external view returns (uint256);\\r\\n\\r\\n    function getOraclePrice() external view returns (uint256);\\r\\n\\r\\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3f1874815e82c6a3c39badf4ff1138063734f9c85055382103686d87ff008aab\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOV1Helper.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOV1Helper {\\r\\n    function querySellQuoteToken(\\r\\n        address dodoV1Pool,\\r\\n        uint256 quoteAmount\\r\\n    ) external view returns (uint256 receivedBaseAmount);\\r\\n\\r\\n    function querySellBaseToken(\\r\\n        address dodoV1Pool,\\r\\n        uint256 baseAmount\\r\\n    ) external view returns (uint256 receivedQuoteAmount);\\r\\n}\\r\\n\",\"keccak256\":\"0x28cbc6b3fe5906ac4acd40d97c9cf40ce88c1bd53aefcb3f77ad43b49c2c5fab\",\"license\":\"Apache-2.0\"},\"contracts/connectors/dodo/IDODOV2.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IDODOV2 {\\r\\n    function querySellBase(\\r\\n        address trader,\\r\\n        uint256 payBaseAmount\\r\\n    ) external view returns (uint256 receiveQuoteAmount, uint256 mtFee);\\r\\n\\r\\n    function querySellQuote(\\r\\n        address trader,\\r\\n        uint256 payQuoteAmount\\r\\n    ) external view returns (uint256 receiveBaseAmount, uint256 mtFee);\\r\\n}\\r\\n\",\"keccak256\":\"0x4b226372ad0b7cf47314f3b9052adec36738eacf294facd12974c09526f34e0f\",\"license\":\"Apache-2.0\"},\"contracts/connectors/synapse/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IPool {\\r\\n    // pool data view functions\\r\\n    function getA() external view returns (uint256);\\r\\n\\r\\n    function getToken(uint8 index) external view returns (IERC20);\\r\\n\\r\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\r\\n\\r\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\r\\n\\r\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n\\r\\n    function getVirtualPrice() external view returns (uint256);\\r\\n\\r\\n    // min return calculation functions\\r\\n    function calculateSwap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n    function calculateRemoveLiquidity(uint256 amount)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256[] memory);\\r\\n\\r\\n    function calculateRemoveLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex\\r\\n    ) external view returns (uint256 availableTokenAmount);\\r\\n\\r\\n    // state modifying functions\\r\\n    function initialize(\\r\\n        IERC20[] memory pooledTokens,\\r\\n        uint8[] memory decimals,\\r\\n        string memory lpTokenName,\\r\\n        string memory lpTokenSymbol,\\r\\n        uint256 a,\\r\\n        uint256 fee,\\r\\n        uint256 adminFee,\\r\\n        address lpTokenTargetAddress\\r\\n    ) external;\\r\\n\\r\\n    function swap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx,\\r\\n        uint256 minDy,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 minToMint,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        uint256 amount,\\r\\n        uint256[] calldata minAmounts,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory);\\r\\n\\r\\n    function removeLiquidityOneToken(\\r\\n        uint256 tokenAmount,\\r\\n        uint8 tokenIndex,\\r\\n        uint256 minAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidityImbalance(\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 maxBurnAmount,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n}\",\"keccak256\":\"0x498e26d8a3554392cb45702ab7a635d7ac291b4e4e3e8b7539f78a3dd64791ab\",\"license\":\"MIT\"},\"contracts/connectors/synapse/IStakerPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IStakerPool {\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint128 accSynapsePerShare;\\r\\n        uint64 lastRewardTime;\\r\\n        uint64 allocPoint;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function updatePool(uint256 pid) external returns (IStakerPool.PoolInfo memory);\\r\\n\\r\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function harvest(uint256 pid, address to) external;\\r\\n\\r\\n    function withdrawAndHarvest(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid, address to) external;\\r\\n}\",\"keccak256\":\"0x2c8c8fa7dae8767d78a184984bc70856dac0a93412588a02fd8c322e48449560\",\"license\":\"MIT\"},\"contracts/exchanges/BalancerExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity  ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IGeneralPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\\\";\\r\\nimport \\\"../interfaces/balancer/interfaces/IPoolSwapStructs.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nabstract contract BalancerExchange {\\r\\n    using StableMath for uint256;\\r\\n\\r\\n    int256 public constant MAX_VALUE = 10 ** 27;\\r\\n    uint256 public constant MAX_SLIPPAGE = 1e16; // = 1%\\r\\n    function swap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 limit\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(balancerVault));\\r\\n        console.log(\\\"BalancerVault: swapping 1\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        if (limit == 0) {\\r\\n            limit =  onSwap(_balancerVault, poolId, kind,  IERC20(address(tokenIn)),  IERC20(address(tokenOut)), amount);\\r\\n            limit = limit.mulTruncate(\\r\\n                uint256(1e18) - MAX_SLIPPAGE\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, limit, block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        console.log(\\\"BalancerVault: swapping 2\\\", address(tokenIn),  IERC20(address(tokenIn)).balanceOf(address(this)) );\\r\\n\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), IERC20(address(tokenIn)).balanceOf(address(this)));\\r\\n\\r\\n        IVault.SingleSwap memory singleSwap;\\r\\n        singleSwap.poolId = poolId;\\r\\n        singleSwap.kind = kind;\\r\\n        singleSwap.assetIn = tokenIn;\\r\\n        singleSwap.assetOut = tokenOut;\\r\\n        singleSwap.amount = amount;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = payable(recipient);\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        return balancerVault.swap(singleSwap, fundManagement, uint256(MAX_VALUE), block.timestamp + 600);\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId1,\\r\\n        bytes32 poolId2,\\r\\n        IVault.SwapKind kind,\\r\\n        IAsset tokenIn,\\r\\n        IAsset tokenMid,\\r\\n        IAsset tokenOut,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        IERC20(address(tokenIn)).approve(address(balancerVault), amount);\\r\\n\\r\\n        IVault.BatchSwapStep[] memory swaps = new IVault.BatchSwapStep[](2);\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap1;\\r\\n        batchSwap1.poolId = poolId1;\\r\\n        batchSwap1.assetInIndex = 0;\\r\\n        batchSwap1.assetOutIndex = 1;\\r\\n        batchSwap1.amount = amount;\\r\\n        swaps[0] = batchSwap1;\\r\\n\\r\\n        IVault.BatchSwapStep memory batchSwap2;\\r\\n        batchSwap2.poolId = poolId2;\\r\\n        batchSwap2.assetInIndex = 1;\\r\\n        batchSwap2.assetOutIndex = 2;\\r\\n        batchSwap2.amount = 0;\\r\\n        swaps[1] = batchSwap2;\\r\\n\\r\\n        IAsset[] memory assets = new IAsset[](3);\\r\\n        assets[0] = tokenIn;\\r\\n        assets[1] = tokenMid;\\r\\n        assets[2] = tokenOut;\\r\\n\\r\\n        IVault.FundManagement memory fundManagement;\\r\\n        fundManagement.sender = sender;\\r\\n        fundManagement.fromInternalBalance = false;\\r\\n        fundManagement.recipient = recipient;\\r\\n        fundManagement.toInternalBalance = false;\\r\\n\\r\\n        int256[] memory limits = new int256[](3);\\r\\n        if (kind == IVault.SwapKind.GIVEN_IN) {\\r\\n            limits[0] = MAX_VALUE;\\r\\n            limits[1] = MAX_VALUE;\\r\\n            limits[2] = MAX_VALUE;\\r\\n        } else {\\r\\n            limits[0] = 0;\\r\\n            limits[1] = 0;\\r\\n            limits[2] = 0;\\r\\n        }\\r\\n\\r\\n        return uint256(- balancerVault.batchSwap(kind, swaps, assets, fundManagement, limits, block.timestamp + 600)[2]);\\r\\n    }\\r\\n\\r\\n    function onSwap(\\r\\n        address _balancerVault,\\r\\n        bytes32 poolId,\\r\\n        IVault.SwapKind kind,\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 balance\\r\\n    ) internal view returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        IPoolSwapStructs.SwapRequest memory swapRequest;\\r\\n        swapRequest.kind = kind;\\r\\n        swapRequest.tokenIn = tokenIn;\\r\\n        swapRequest.tokenOut = tokenOut;\\r\\n        swapRequest.amount = balance;\\r\\n\\r\\n        (IERC20[] memory tokens, uint256[] memory balances,) = balancerVault.getPoolTokens(poolId);\\r\\n\\r\\n        (address pool, IVault.PoolSpecialization poolSpecialization) = balancerVault.getPool(poolId);\\r\\n\\r\\n        if (poolSpecialization == IVault.PoolSpecialization.GENERAL) {\\r\\n\\r\\n            uint256 indexIn;\\r\\n            uint256 indexOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    indexIn = i;\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    indexOut = i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IGeneralPool(pool).onSwap(swapRequest, balances, indexIn, indexOut);\\r\\n\\r\\n        } else if (poolSpecialization == IVault.PoolSpecialization.MINIMAL_SWAP_INFO) {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            uint256 balanceIn;\\r\\n            uint256 balanceOut;\\r\\n            for (uint8 i = 0; i < tokens.length; i++) {\\r\\n                if (tokens[i] == tokenIn) {\\r\\n                    balanceIn = balances[i];\\r\\n                } else if (tokens[i] == tokenOut) {\\r\\n                    balanceOut = balances[i];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return IMinimalSwapInfoPool(pool).onSwap(swapRequest, balanceIn, balanceOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of token1 nominated in token0 where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountToSwap(\\r\\n        address _balancerVault,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        uint256 precision,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        IVault balancerVault = IVault(_balancerVault);\\r\\n        uint256 amount0ToSwap = (amount0Total * reserve1) / (reserve0 * denominator1 / denominator0 + reserve1);\\r\\n        console.log(\\\"amount0ToSwap\\\", amount0ToSwap);\\r\\n        for (uint i = 0; i < precision; i++) {\\r\\n            console.log(\\\"onSwap\\\", address(token0), address(token1));\\r\\n            uint256 amount1 = onSwap(_balancerVault, poolId, IVault.SwapKind.GIVEN_IN, token0, token1, amount0ToSwap);\\r\\n            amount0ToSwap = (amount0Total * reserve1) / (reserve0 * amount1 / amount0ToSwap + reserve1);\\r\\n        }\\r\\n\\r\\n        return amount0ToSwap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get amount of lp tokens where amount0Total is total getting amount nominated in token0\\r\\n     *\\r\\n     * precision: 0 - no correction, 1 - one correction (recommended value), 2 or more - several corrections\\r\\n     */\\r\\n    function _getAmountLpTokensToWithdraw(\\r\\n        address _balancerVault,\\r\\n        uint256 amount0Total,\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 totalLpBalance,\\r\\n        uint256 denominator0,\\r\\n        uint256 denominator1,\\r\\n        bytes32 poolId,\\r\\n        IERC20 token0,\\r\\n        IERC20 token1\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 lpBalance = (totalLpBalance * amount0Total * denominator1) / (reserve0 * denominator1 + reserve1 * denominator0);\\r\\n        for (uint i = 0; i < 1; i++) {\\r\\n            uint256 amount1 = reserve1 * lpBalance / totalLpBalance;\\r\\n            uint256 amount0 = onSwap(_balancerVault, poolId, IVault.SwapKind.GIVEN_IN, token1, token0, amount1);\\r\\n            lpBalance = (totalLpBalance * amount0Total * amount1) / (reserve0 * amount1 + reserve1 * amount0);\\r\\n        }\\r\\n        return lpBalance;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\",\"keccak256\":\"0xbe570d3bea74a4a0a9ec5c7919748d6f817d2c45902d498740d7dcb2e3172aa3\",\"license\":\"MIT\"},\"contracts/exchanges/DodoExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOV1Helper.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOProxy.sol\\\";\\r\\nimport \\\"../connectors/dodo/IDODOV2.sol\\\";\\r\\n\\r\\n/*\\r\\n    There are six swap functions in DODOProxy. Which are executed for different sources or versions\\r\\n\\r\\n    - dodoSwapV1: Used for DODOV1 pools\\r\\n    - dodoSwapV2ETHToToken: Used for DODOV2 pools and specify ETH as fromToken\\r\\n    - dodoSwapV2TokenToETH: Used for DODOV2 pools and specify ETH as toToken\\r\\n    - dodoSwapV2TokenToToken:  Used for DODOV2 pools and both fromToken and toToken are ERC20\\r\\n    - externalSwap: Used for executing third-party protocols' aggregation algorithm\\r\\n    - mixSwap: Used for executing DODO\\u2019s custom aggregation algorithm\\r\\n\\r\\n    Note: Best Trading path is calculated by off-chain program. DODOProxy's swap functions is only used for executing.\\r\\n*/\\r\\nabstract contract DodoExchange {\\r\\n\\r\\n    IDODOV1Helper private dodoV1Helper;\\r\\n    IDODOProxy private dodoProxy;\\r\\n    address private dodoApprove;\\r\\n\\r\\n    function _setDodoParams(\\r\\n        address _dodoV1Helper,\\r\\n        address _dodoProxy,\\r\\n        address _dodoApprove\\r\\n    ) internal {\\r\\n        dodoV1Helper = IDODOV1Helper(_dodoV1Helper);\\r\\n        dodoProxy = IDODOProxy(_dodoProxy);\\r\\n        dodoApprove = _dodoApprove;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        The code example assumes user wanting to use the specify DODOV1 pool for swapping\\r\\n\\r\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\r\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\r\\n        combination to represent the multi-hop directions to save gas consumption\\r\\n        For example:\\r\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\r\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\r\\n    */\\r\\n    function _useDodoSwapV1(\\r\\n        address dodoV1Pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 slippage,\\r\\n        uint256 directions\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 minReturnAmount;\\r\\n        if (directions == 0) {\\r\\n            uint256 receivedQuoteAmount = dodoV1Helper.querySellBaseToken(dodoV1Pool, fromTokenAmount);\\r\\n            minReturnAmount = receivedQuoteAmount * (100 - slippage) / 100;\\r\\n        } else {\\r\\n            uint256 receivedBaseAmount = dodoV1Helper.querySellQuoteToken(dodoV1Pool, fromTokenAmount);\\r\\n            minReturnAmount = receivedBaseAmount * (100 - slippage) / 100;\\r\\n        }\\r\\n        if (minReturnAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        address[] memory dodoPairs = new address[](1); //one-hop\\r\\n        dodoPairs[0] = dodoV1Pool;\\r\\n\\r\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\r\\n\\r\\n        return dodoProxy.dodoSwapV1(\\r\\n            fromToken,\\r\\n            toToken,\\r\\n            fromTokenAmount,\\r\\n            minReturnAmount,\\r\\n            dodoPairs,\\r\\n            directions,\\r\\n            false,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        The code example assumes user wanting to use the specify DODOV2 pool for swapping\\r\\n\\r\\n        Note: Differentiate sellBaseToken or sellQuoteToken. If sellBaseToken represents 0, sellQuoteToken represents 1.\\r\\n        At the same time, dodoSwapV1 supports multi-hop linear routing, so here we use 0,1\\r\\n        combination to represent the multi-hop directions to save gas consumption\\r\\n        For example:\\r\\n            A - B - C (A - B sellBase and  B - C sellQuote)  Binary: 10, Decimal 2 (directions = 2)\\r\\n            D - E - F (D - E sellQuote and E - F sellBase) Binary: 01, Decimal 1 (directions = 1)\\r\\n    */\\r\\n    function _useDodoSwapV2(\\r\\n        address dodoV2Pool,\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        uint256 fromTokenAmount,\\r\\n        uint256 slippage,\\r\\n        uint256 directions\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        uint256 minReturnAmount;\\r\\n        if (directions == 0) {\\r\\n            (uint256 receiveQuoteAmount,) = IDODOV2(dodoV2Pool).querySellBase(address(this), fromTokenAmount);\\r\\n            minReturnAmount = receiveQuoteAmount * (100 - slippage) / 100;\\r\\n        } else {\\r\\n            (uint256 receiveBaseAmount,) = IDODOV2(dodoV2Pool).querySellQuote(address(this), fromTokenAmount);\\r\\n            minReturnAmount = receiveBaseAmount * (100 - slippage) / 100;\\r\\n        }\\r\\n        if (minReturnAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        address[] memory dodoPairs = new address[](1); //one-hop\\r\\n        dodoPairs[0] = dodoV2Pool;\\r\\n\\r\\n        IERC20(fromToken).approve(dodoApprove, fromTokenAmount);\\r\\n\\r\\n        return dodoProxy.dodoSwapV2TokenToToken(\\r\\n            fromToken,\\r\\n            toToken,\\r\\n            fromTokenAmount,\\r\\n            minReturnAmount,\\r\\n            dodoPairs,\\r\\n            directions,\\r\\n            false,\\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x9de6fd8e4a7ecc7493fccc22846eb884e0a79ac9f25a77c46fcd5285c612cb09\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde5eed875b7d7ab3a97ca112ff817081874518ae2f1065fe9b10fc4194ecef43\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBasicToken {\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c53c94ab507ab0f44e541d130910e822d39d724bd88bf7c66de5a411334cfb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/balancer/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\r\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\r\\n * types.\\r\\n *\\r\\n * This concept is unrelated to a Pool's Asset Managers.\\r\\n */\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\",\"keccak256\":\"0x3509f39516a60dda160e4b06c6767332b7575e481780b267bdc1af3b93493317\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\nimport \\\"./IPoolSwapStructs.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\r\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\r\\n * either IGeneralPool or IMinimalSwapInfoPool\\r\\n */\\r\\ninterface IBasePool is IPoolSwapStructs {\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\r\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\r\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\r\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\r\\n     *\\r\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\r\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\r\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as minting pool shares.\\r\\n     */\\r\\n    function onJoinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    /**\\r\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\r\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\r\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\r\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\r\\n     * `protocolSwapFeePercentage`.\\r\\n     *\\r\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\r\\n     *\\r\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\r\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\r\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\r\\n     *\\r\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\r\\n     * balance.\\r\\n     *\\r\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\r\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\r\\n     *\\r\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\r\\n     * state-changing operations, such as burning pool shares.\\r\\n     */\\r\\n    function onExitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock,\\r\\n        uint256 protocolSwapFeePercentage,\\r\\n        bytes memory userData\\r\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\r\\n\\r\\n    function getPoolId() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x346508790e1b3f82b399b1313ed16a1e1fe3d3e86b19c67cb82084fe57475777\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev IPools with the General specialization setting should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will\\r\\n * grant to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IGeneralPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256[] memory balances,\\r\\n        uint256 indexIn,\\r\\n        uint256 indexOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x89cc84a63e52afa04dabfdeda368399994b7cf8f0bf7a0605b3f3473cab46b76\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IBasePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\r\\n *\\r\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\r\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\r\\n * to the pool in a 'given out' swap.\\r\\n *\\r\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\r\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\r\\n * indeed the Vault.\\r\\n */\\r\\ninterface IMinimalSwapInfoPool is IBasePool {\\r\\n    function onSwap(\\r\\n        SwapRequest memory swapRequest,\\r\\n        uint256 currentBalanceTokenIn,\\r\\n        uint256 currentBalanceTokenOut\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xe1439eeab21fc38a546a22e3463dd08a7f50ba4d97cb90daeafb215891925a5a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IPoolSwapStructs {\\r\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\r\\n    // IMinimalSwapInfoPool.\\r\\n    //\\r\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\r\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\r\\n    //\\r\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\r\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\r\\n    //\\r\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\r\\n    // some Pools.\\r\\n    //\\r\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\r\\n    // one Pool.\\r\\n    //\\r\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\r\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\r\\n    //    balance.\\r\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\r\\n    //\\r\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\r\\n    // where the Pool sends the outgoing tokens.\\r\\n    //\\r\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\r\\n    struct SwapRequest {\\r\\n        IVault.SwapKind kind;\\r\\n        IERC20 tokenIn;\\r\\n        IERC20 tokenOut;\\r\\n        uint256 amount;\\r\\n        // Misc data\\r\\n        bytes32 poolId;\\r\\n        uint256 lastChangeBlock;\\r\\n        address from;\\r\\n        address to;\\r\\n        bytes userData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe058df50060904ef53e0fe5c80a2475bc27423c608befab165f42cc1ff458f97\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/balancer/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IAsset.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user's Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user's Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool's registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool's token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 cash,\\r\\n        uint256 managed,\\r\\n        uint256 lastChangeBlock,\\r\\n        address assetManager\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens' `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory balances,\\r\\n        uint256 lastChangeBlock\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool's contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool's registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool's contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool's internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\r\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xae7589cc88d2a39410d54f6b12a9fe06a2b8fcb118837499fc2cff60ad132487\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/DodoStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Synapse Strategy\\r\\n * @notice Investment strategy for investing stablecoins via Synapse\\r\\n */\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport { IPool } from \\\"./../connectors/synapse/IPool.sol\\\";\\r\\nimport { IStakerPool } from \\\"./../connectors/synapse/IStakerPool.sol\\\";\\r\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\r\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\r\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\r\\n\\r\\nimport { OvnMath } from \\\"../utils/OvnMath.sol\\\";\\r\\nimport { StrategyDodoLibrary } from \\\"../utils/StrategyDodoLibrary.sol\\\";\\r\\nimport \\\"./../connectors/dodo/IDODOV1.sol\\\";\\r\\nimport \\\"./../connectors/dodo/IDODOV2.sol\\\";\\r\\nimport \\\"./../connectors/dodo/IDODOMine.sol\\\";\\r\\n\\r\\nimport \\\"../exchanges/BalancerExchange.sol\\\";\\r\\nimport \\\"../exchanges/DodoExchange.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract DodoStrategy is InitializableAbstractStrategy, BalancerExchange, DodoExchange {\\r\\n    using SafeMath for uint256;\\r\\n    using StableMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using OvnMath for uint256;\\r\\n\\r\\n\\r\\n    IERC20 public usdtToken; // form intializers\\r\\n    IERC20 public dodoToken; // platform Address\\r\\n    IERC20 public wmaticToken; // intermediary Address\\r\\n    IERC20 public usdcLPToken; // pToken \\r\\n\\r\\n    IERC20 public primaryStable; \\r\\n\\r\\n\\r\\n    IDODOV1 public dodoV1UsdcUsdtPool;\\r\\n    IDODOV2 public dodoV2DodoUsdtPool;\\r\\n    IDODOMine public dodoMine;\\r\\n\\r\\n    bytes32 public balancerPoolIdUsdcTusdDaiUsdt;\\r\\n    bytes32 public balancerPoolIdWmaticUsdcWethBal;\\r\\n\\r\\n    address public balancerVault;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Initializer for setting up strategy internal state. This overrides the\\r\\n     * InitializableAbstractStrategy initializer as Dodo strategies don't fit\\r\\n     * well within that abstraction.\\r\\n     * @param _platformAddress Address of the nUSD\\r\\n     * @param _vaultAddress Address of the vault\\r\\n     * @param _rewardTokenAddresses Address of USDC\\r\\n     * @param _assets Addresses of supported assets. MUST be passed in the same\\r\\n     *                order as returned by coins on the pool contract, i.e.\\r\\n     *                USDC\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress, // DODO Token address\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses, // USDC\\r\\n        address[] calldata _assets, // USDC\\r\\n        address[] calldata _pTokens, // usdcLPToken Token address\\r\\n        address _usdtToken, // USDT\\r\\n        address _wMaticToken, // wMATIC\\r\\n        address[] calldata dodoAddresses // In ORDER: _dodoV1UsdcUsdtPool,  _dodoV2DodoUsdtPool,  _dodoMine,  _dodoV1Helper,  _dodoProxy,  _dodoApprove\\r\\n    ) external onlyGovernor initializer {\\r\\n        usdcLPToken = IERC20(_pTokens[0]);\\r\\n        usdtToken = IERC20(_usdtToken);\\r\\n        wmaticToken = IERC20(_wMaticToken);\\r\\n        dodoToken = IERC20(_platformAddress);\\r\\n        dodoV1UsdcUsdtPool = IDODOV1(dodoAddresses[0]);\\r\\n        dodoV2DodoUsdtPool = IDODOV2(dodoAddresses[1]);\\r\\n        dodoMine = IDODOMine(dodoAddresses[2]);\\r\\n        _setDodoParams(dodoAddresses[3], dodoAddresses[4], dodoAddresses[5]);\\r\\n\\r\\n        super._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n    function setBalancerAndPrimaryStable(address _primaryStable, address _balancerVault, bytes32 _balancerPoolIdUsdcTusdDaiUsdt, bytes32 _balancerPoolIdWmaticUsdcWethBal) external onlyGovernor {\\r\\n        require(_primaryStable != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_balancerVault != address(0), \\\"Zero address not allowed\\\");\\r\\n        require(_balancerPoolIdUsdcTusdDaiUsdt != \\\"\\\", \\\"Empty pool id not allowed\\\");\\r\\n        require(_balancerPoolIdWmaticUsdcWethBal != \\\"\\\", \\\"Empty pool id not allowed\\\");\\r\\n        primaryStable = IERC20(_primaryStable);\\r\\n        balancerVault = _balancerVault;\\r\\n        balancerPoolIdUsdcTusdDaiUsdt = _balancerPoolIdUsdcTusdDaiUsdt;\\r\\n        balancerPoolIdWmaticUsdcWethBal = _balancerPoolIdWmaticUsdcWethBal;\\r\\n    }\\r\\n    // TODO: Use \\\"_amount\\\" while depositing\\r\\n    function _deposit(address _asset, uint256 _amount)\\r\\n        internal\\r\\n    {\\r\\n        require(( (_asset == address(primaryStable)) && (_asset == assetsMapped[0] ) ), \\\"Token not supported.\\\");\\r\\n\\r\\n        // stake all usdc tokens\\r\\n        uint256 primaryStableAmount = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"Depositing \\\", primaryStableAmount, \\\" usdc tokens to DODO\\\");\\r\\n        emit TransferLog(\\\"Depositing into DODO : \\\", _asset, primaryStableAmount);\\r\\n\\r\\n        // add liquidity to pool\\r\\n        primaryStable.approve(address(dodoV1UsdcUsdtPool), primaryStableAmount);\\r\\n        dodoV1UsdcUsdtPool.depositBaseTo(address(this), primaryStableAmount);\\r\\n\\r\\n        // stake all lp tokens\\r\\n        uint256 usdcLPTokenBalance = usdcLPToken.balanceOf(address(this));\\r\\n        usdcLPToken.approve(address(dodoMine), usdcLPTokenBalance);\\r\\n        dodoMine.deposit(usdcLPTokenBalance);\\r\\n    }\\r\\n    function deposit(address _asset, uint256 _amount)\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n        nonReentrant\\r\\n    {\\r\\n        _deposit(_asset, _amount);\\r\\n    }\\r\\n    function depositAll() external override onlyVault nonReentrant {\\r\\n        _deposit(address(primaryStable), primaryStable.balanceOf(address(this)));\\r\\n    }\\r\\n    function withdraw(\\r\\n        address _beneficiary,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external override onlyVault nonReentrant  {\\r\\n        require(( (_asset == address(primaryStable)) && (_asset == assetsMapped[0] ) ), \\\"Token not supported.\\\");\\r\\n        // console.log(\\\"Starting withdrawing from DODO of\\\",_asset, _amount);\\r\\n        uint256 amountToUnstake = StrategyDodoLibrary._getAmountIn(_amount, dodoV1UsdcUsdtPool);\\r\\n\\r\\n        // get lp tokens\\r\\n        uint256 usdcLPTokenTotalSupply = usdcLPToken.totalSupply();\\r\\n        (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\r\\n        uint256 unstakeLpBalance = amountToUnstake * usdcLPTokenTotalSupply / baseTarget;\\r\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\r\\n        if (unstakeLpBalance > userLPBalance) {\\r\\n            unstakeLpBalance = userLPBalance;\\r\\n        }\\r\\n\\r\\n        // unstake lp tokens\\r\\n        dodoMine.withdraw(unstakeLpBalance);\\r\\n\\r\\n        // remove liquidity from pool\\r\\n        dodoV1UsdcUsdtPool.withdrawAllBase();\\r\\n\\r\\n        // return all usdc tokens\\r\\n        uint256 assetBalance = primaryStable.balanceOf(address(this));\\r\\n        if (assetBalance > 0) {\\r\\n            emit TransferLog(\\\"Withdrawing from the DODO: \\\",assetsMapped[0], assetBalance);\\r\\n            IERC20(assetsMapped[0]).safeTransfer(_beneficiary, assetBalance);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @dev Remove all assets from platform and send them to Vault contract.\\r\\n     */\\r\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\r\\n        // get all lp tokens\\r\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\r\\n        if (userLPBalance == 0) {\\r\\n            return;\\r\\n        }\\r\\n        // unstake lp tokens\\r\\n        dodoMine.withdraw(userLPBalance);\\r\\n        // remove liquidity from pool\\r\\n        dodoV1UsdcUsdtPool.withdrawAllBase();\\r\\n        uint256 assetBalance = primaryStable.balanceOf(address(this));\\r\\n\\r\\n        // console.log(\\\"Withdrawing  everthing from the DODO: \\\", assetBalance);\\r\\n        emit TransferLog(\\\"Withdrawing  everthing from the DODO: \\\",  assetsMapped[0], assetBalance);\\r\\n\\r\\n        if (assetBalance > 0) {\\r\\n            IERC20(assetsMapped[0]).safeTransfer(vaultAddress, assetBalance);\\r\\n        }\\r\\n    }\\r\\n    function collectRewardTokens()\\r\\n        external\\r\\n        override\\r\\n        onlyHarvester\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\r\\n        if (userLPBalance == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // claim rewards\\r\\n        dodoMine.claimAllRewards();\\r\\n\\r\\n        // sell rewards\\r\\n        uint256 totalPrimaryStable;\\r\\n\\r\\n        uint256 dodoBalance = dodoToken.balanceOf(address(this));\\r\\n        // console.log(\\\"dodoBalance\\\", dodoBalance);\\r\\n        if (dodoBalance > 0) {\\r\\n            // swap v2 dodo -> usdt\\r\\n            uint256 usdtTokenAmount = _useDodoSwapV2(\\r\\n                address(dodoV2DodoUsdtPool),\\r\\n                address(dodoToken),\\r\\n                address(usdtToken),\\r\\n                dodoBalance,\\r\\n                1,\\r\\n                0\\r\\n            );\\r\\n            // console.log(usdtTokenAmount);\\r\\n\\r\\n            uint256 primaryStableAmount;\\r\\n            if (usdtTokenAmount > 0) {\\r\\n                // swap v1 usdt -> PrimaryStable\\r\\n                primaryStableAmount = swap(\\r\\n                    balancerVault,\\r\\n                    balancerPoolIdUsdcTusdDaiUsdt,\\r\\n                    IVault.SwapKind.GIVEN_IN,\\r\\n                    IAsset(address(usdtToken)),\\r\\n                    IAsset(address(primaryStable)),\\r\\n                    address(this),\\r\\n                    address(this),\\r\\n                    usdtTokenAmount,\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n            // console.log(\\\"primaryStableAmount\\\", primaryStableAmount);\\r\\n            totalPrimaryStable += primaryStableAmount;\\r\\n        }\\r\\n\\r\\n        uint256 wmaticBalance = wmaticToken.balanceOf(address(this));\\r\\n        // console.log(\\\"wmaticBalance\\\", wmaticBalance);\\r\\n        if (wmaticBalance > 0) {\\r\\n            uint256 wmaticPrimaryStable = swap(\\r\\n                balancerVault,\\r\\n                balancerPoolIdWmaticUsdcWethBal,\\r\\n                IVault.SwapKind.GIVEN_IN,\\r\\n                IAsset(address(wmaticToken)),\\r\\n                IAsset(address(primaryStable)),\\r\\n                address(this),\\r\\n                address(this),\\r\\n                wmaticBalance,\\r\\n                0\\r\\n            );\\r\\n            // console.log(\\\"wmaticPrimaryStable\\\", wmaticPrimaryStable);\\r\\n\\r\\n            totalPrimaryStable += wmaticPrimaryStable;\\r\\n        }\\r\\n        // console.log(\\\"totalPrimaryStable\\\", totalPrimaryStable);\\r\\n\\r\\n        if (totalPrimaryStable > 0) {\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                address(primaryStable),\\r\\n                totalPrimaryStable\\r\\n            );\\r\\n            primaryStable.transfer(harvesterAddress, totalPrimaryStable);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n\\r\\n        uint256 primaryStableBalance = primaryStable.balanceOf(address(this));\\r\\n        // console.log(\\\"primaryStableBalance\\\", primaryStableBalance);\\r\\n        uint256 userLPBalance = dodoMine.balanceOf(address(this));\\r\\n        // console.log(\\\"userLPBalance\\\", userLPBalance);\\r\\n        if (userLPBalance > 0) {\\r\\n            uint256 usdcLPTokenTotalSupply = usdcLPToken.totalSupply();\\r\\n            // console.log(\\\"usdcLPTokenTotalSupply\\\", usdcLPTokenTotalSupply);\\r\\n            (uint256 baseTarget,) = dodoV1UsdcUsdtPool.getExpectedTarget();\\r\\n            // console.log(\\\"baseTarget\\\", baseTarget);\\r\\n            uint256 primaryStableAmount = baseTarget * userLPBalance / usdcLPTokenTotalSupply;\\r\\n            // console.log(\\\"primaryStableAmount\\\", primaryStableAmount);\\r\\n            primaryStableBalance += primaryStableAmount - (primaryStableAmount * 6 / 10000); // - 0.06 %\\r\\n        }\\r\\n        return primaryStableBalance;\\r\\n    }\\r\\n    function supportsAsset(address _asset)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return ( (_asset == address(primaryStable)) && (_asset == assetsMapped[0] ) );\\r\\n    }\\r\\n    /* NOT NEEDED */\\r\\n    function safeApproveAllTokens() external override  {}\\r\\n    function _abstractSetPToken(address _asset, address _cToken)internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xaac484eac5d9df8b60a2e5caf30de2d1604d31c580815b2e06775dd5c06d0b89\",\"license\":\"agpl-3.0\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title DecimalMath\\r\\n * @author DODO Breeder\\r\\n *\\r\\n * @notice Functions for fixed point number with 18 decimals\\r\\n */\\r\\nlibrary DecimalMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 constant ONE = 10**18;\\r\\n\\r\\n    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d) / ONE;\\r\\n    }\\r\\n\\r\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(d).divCeil(ONE);\\r\\n    }\\r\\n\\r\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(ONE).div(d);\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\r\\n        return target.mul(ONE).divCeil(d);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8cc3393fdcece2974572a29cb6b1b81745c31be46991d21b9d172e54e2ca4e87\",\"license\":\"Apache-2.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\r\\n\\r\\nlibrary Helpers {\\r\\n    /**\\r\\n     * @notice Fetch the `symbol()` from an ERC20 token\\r\\n     * @dev Grabs the `symbol()` from a contract\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return string Symbol of the ERC20 token\\r\\n     */\\r\\n    function getSymbol(address _token) internal view returns (string memory) {\\r\\n        string memory symbol = IBasicToken(_token).symbol();\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetch the `decimals()` from an ERC20 token\\r\\n     * @dev Grabs the `decimals()` from a contract and fails if\\r\\n     *      the decimal value does not live within a certain range\\r\\n     * @param _token Address of the ERC20 token\\r\\n     * @return uint256 Decimals of the ERC20 token\\r\\n     */\\r\\n    function getDecimals(address _token) internal view returns (uint256) {\\r\\n        uint256 decimals = IBasicToken(_token).decimals();\\r\\n        require(\\r\\n            decimals >= 4 && decimals <= 18,\\r\\n            \\\"Token must have sufficient decimal places\\\"\\r\\n        );\\r\\n\\r\\n        return decimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd811b2c8f5435e41200458a3853f6bacc86efe20a0daa65d8497abbf821e44fa\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(\\r\\n            initializing || !initialized,\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n\\r\\n        bool isTopLevelCall = !initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = true;\\r\\n            initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private ______gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event PTokenAdded(address indexed _asset, address _pToken);\\r\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\r\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\r\\n    event RewardTokenCollected(\\r\\n        address recipient,\\r\\n        address rewardToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event RewardTokenAddressesUpdated(\\r\\n        address[] _oldAddresses,\\r\\n        address[] _newAddresses\\r\\n    );\\r\\n    event HarvesterAddressesUpdated(\\r\\n        address _oldHarvesterAddress,\\r\\n        address _newHarvesterAddress\\r\\n    );\\r\\n    event TransferLog (\\r\\n        string _message,\\r\\n        address _asset,\\r\\n        uint256 _number\\r\\n    );\\r\\n\\r\\n    // Core address for the given platform\\r\\n    address public platformAddress;\\r\\n\\r\\n    address public vaultAddress;\\r\\n\\r\\n    // asset => pToken (Platform Specific Token Address)\\r\\n    mapping(address => address) public assetToPToken;\\r\\n\\r\\n    // Full list of all assets supported here\\r\\n    address[] internal assetsMapped;\\r\\n\\r\\n    // Deprecated: Reward token address\\r\\n    // slither-disable-next-line constable-states\\r\\n    address public _deprecated_rewardTokenAddress;\\r\\n\\r\\n    // Deprecated: now resides in Harvester's rewardTokenConfigs\\r\\n    // slither-disable-next-line constable-states\\r\\n    uint256 public _deprecated_rewardLiquidationThreshold;\\r\\n\\r\\n    // Address of the one address allowed to collect reward tokens\\r\\n    address public harvesterAddress;\\r\\n\\r\\n    // Reward token addresses\\r\\n    address[] public rewardTokenAddresses;\\r\\n    // Reserved for future expansion\\r\\n    int256[98] private _reserved;\\r\\n\\r\\n    /**\\r\\n     * @dev Internal initialize function, to set up initial internal state\\r\\n     * @param _platformAddress Generic platform address\\r\\n     * @param _vaultAddress Address of the Vault\\r\\n     * @param _rewardTokenAddresses Address of reward token for platform\\r\\n     * @param _assets Addresses of initial supported assets\\r\\n     * @param _pTokens Platform Token corresponding addresses\\r\\n     */\\r\\n    function initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] calldata _assets,\\r\\n        address[] calldata _pTokens\\r\\n    ) external onlyGovernor initializer {\\r\\n        InitializableAbstractStrategy._initialize(\\r\\n            _platformAddress,\\r\\n            _vaultAddress,\\r\\n            _rewardTokenAddresses,\\r\\n            _assets,\\r\\n            _pTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _initialize(\\r\\n        address _platformAddress,\\r\\n        address _vaultAddress,\\r\\n        address[] calldata _rewardTokenAddresses,\\r\\n        address[] memory _assets,\\r\\n        address[] memory _pTokens\\r\\n    ) internal {\\r\\n        platformAddress = _platformAddress;\\r\\n        vaultAddress = _vaultAddress;\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n\\r\\n        uint256 assetCount = _assets.length;\\r\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Collect accumulated reward token and send to Vault.\\r\\n     */\\r\\n    function collectRewardTokens() external virtual onlyHarvester nonReentrant {\\r\\n        _collectRewardTokens();\\r\\n    }\\r\\n\\r\\n    function _collectRewardTokens() internal {\\r\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\r\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\r\\n            uint256 balance = rewardToken.balanceOf(address(this));\\r\\n            emit RewardTokenCollected(\\r\\n                harvesterAddress,\\r\\n                rewardTokenAddresses[i],\\r\\n                balance\\r\\n            );\\r\\n            rewardToken.safeTransfer(harvesterAddress, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault.\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Harvester.\\r\\n     */\\r\\n    modifier onlyHarvester() {\\r\\n        require(msg.sender == harvesterAddress, \\\"Caller is not the Harvester\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies that the caller is the Vault or Governor.\\r\\n     */\\r\\n    modifier onlyVaultOrGovernor() {\\r\\n        require(\\r\\n            msg.sender == vaultAddress || msg.sender == governor(),\\r\\n            \\\"Caller is not the Vault or Governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _rewardTokenAddresses Address array of the reward token\\r\\n     */\\r\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\r\\n            require(\\r\\n                _rewardTokenAddresses[i] != address(0),\\r\\n                \\\"Can not set an empty address as a reward token\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RewardTokenAddressesUpdated(\\r\\n            rewardTokenAddresses,\\r\\n            _rewardTokenAddresses\\r\\n        );\\r\\n        rewardTokenAddresses = _rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the reward token addresses.\\r\\n     * @return address[] the reward token addresses.\\r\\n     */\\r\\n    function getRewardTokenAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return rewardTokenAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function setPTokenAddress(address _asset, address _pToken)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setPTokenAddress(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a supported asset by passing its index.\\r\\n     *      This method can only be called by the system Governor\\r\\n     * @param _assetIndex Index of the asset to be removed\\r\\n     */\\r\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\r\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\r\\n        address asset = assetsMapped[_assetIndex];\\r\\n        address pToken = assetToPToken[asset];\\r\\n\\r\\n        if (_assetIndex < assetsMapped.length - 1) {\\r\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\r\\n        }\\r\\n        assetsMapped.pop();\\r\\n        assetToPToken[asset] = address(0);\\r\\n\\r\\n        emit PTokenRemoved(asset, pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Provide support for asset by passing its pToken address.\\r\\n     *      Add to internal mappings and execute the platform specific,\\r\\n     * abstract method `_abstractSetPToken`\\r\\n     * @param _asset    Address for the asset\\r\\n     * @param _pToken   Address for the corresponding platform token\\r\\n     */\\r\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\r\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\r\\n        require(\\r\\n            _asset != address(0) && _pToken != address(0),\\r\\n            \\\"Invalid addresses\\\"\\r\\n        );\\r\\n\\r\\n        assetToPToken[_asset] = _pToken;\\r\\n        assetsMapped.push(_asset);\\r\\n\\r\\n        emit PTokenAdded(_asset, _pToken);\\r\\n\\r\\n        _abstractSetPToken(_asset, _pToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\r\\n     *      strategy contracts, i.e. mistaken sends.\\r\\n     * @param _asset Address for the asset\\r\\n     * @param _amount Amount of the asset to transfer\\r\\n     */\\r\\n    function transferToken(address _asset, uint256 _amount)\\r\\n        public\\r\\n        onlyGovernor\\r\\n    {\\r\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the reward token addresses.\\r\\n     * @param _harvesterAddress Address of the harvester\\r\\n     */\\r\\n    function setHarvesterAddress(address _harvesterAddress)\\r\\n        external\\r\\n        onlyGovernor\\r\\n    {\\r\\n        harvesterAddress = _harvesterAddress;\\r\\n        emit HarvesterAddressesUpdated(harvesterAddress, _harvesterAddress);\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                 Abstract\\r\\n    ****************************************/\\r\\n\\r\\n    function _abstractSetPToken(address _asset, address _pToken)\\r\\n        internal\\r\\n        virtual;\\r\\n\\r\\n    function safeApproveAllTokens() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit an amount of asset into the platform\\r\\n     * @param _asset               Address for the asset\\r\\n     * @param _amount              Units of asset to deposit\\r\\n     */\\r\\n    function deposit(address _asset, uint256 _amount) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit balance of all supported assets into the platform\\r\\n     */\\r\\n    function depositAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw an amount of asset from the platform.\\r\\n     * @param _recipient         Address to which the asset should be sent\\r\\n     * @param _asset             Address of the asset\\r\\n     * @param _amount            Units of asset to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _recipient,\\r\\n        address _asset,\\r\\n        uint256 _amount\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\r\\n     */\\r\\n    function withdrawAll() external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Get the total primary stable value held in the platform.\\r\\n     *      This includes any interest that was generated since depositing.\\r\\n     * @return balance    Total value of the asset in the platform\\r\\n     */\\r\\n    function checkBalance()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an asset is supported.\\r\\n     * @param _asset    Address of the asset\\r\\n     * @return bool     Whether asset is supported\\r\\n     */\\r\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x232664a78773fffce1d3f7cf05c43d7a08c81966ace4ce55fcfceaa2555589a5\",\"license\":\"agpl-3.0\"},\"contracts/utils/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary OvnMath {\\r\\n\\r\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\r\\n\\r\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return (x > y) ? (x - y) : (y - x);\\r\\n    }\\r\\n\\r\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\r\\n    }\\r\\n\\r\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\r\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x72976e446429837ea5cf2b52b6a9b8e0dbf2790e52b1c0d218103cb08daf2a2e\",\"license\":\"MIT\"},\"contracts/utils/SafeMath.sol\":{\"content\":\"/*\\r\\n\\r\\n    Copyright 2020 DODO ZOO.\\r\\n    SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @author DODO Breeder\\r\\n *\\r\\n * @notice Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 quotient = div(a, b);\\r\\n        uint256 remainder = a - quotient * b;\\r\\n        if (remainder > 0) {\\r\\n            return quotient + 1;\\r\\n        } else {\\r\\n            return quotient;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SUB_ERROR\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ADD_ERROR\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\r\\n        uint256 z = x / 2 + 1;\\r\\n        y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3de68b06b086737cce7d7825198e079c619033ca01298074e5babb14c5ae053a\",\"license\":\"Apache-2.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Based on StableMath from Stability Labs Pty. Ltd.\\r\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\r\\n\\r\\nlibrary StableMath {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Scaling unit for use in specific calculations,\\r\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\r\\n     */\\r\\n    uint256 private constant FULL_SCALE = 1e18;\\r\\n\\r\\n    /***************************************\\r\\n                    Helpers\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Adjust the scale of an integer\\r\\n     * @param to Decimals to scale to\\r\\n     * @param from Decimals to scale from\\r\\n     */\\r\\n    function scaleBy(\\r\\n        uint256 x,\\r\\n        uint256 to,\\r\\n        uint256 from\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (to > from) {\\r\\n            x = x.mul(10**(to - from));\\r\\n        } else if (to < from) {\\r\\n            x = x.div(10**(from - to));\\r\\n        }\\r\\n        return x;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n               Precise Arithmetic\\r\\n    ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulTruncateScale(x, y, FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\r\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @param scale Scale unit\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *         scale unit\\r\\n     */\\r\\n    function mulTruncateScale(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 scale\\r\\n    ) internal pure returns (uint256) {\\r\\n        // e.g. assume scale = fullScale\\r\\n        // z = 10e18 * 9e17 = 9e36\\r\\n        uint256 z = x.mul(y);\\r\\n        // return 9e36 / 1e18 = 9e18\\r\\n        return z.div(scale);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\r\\n     * @param x Left hand input to multiplication\\r\\n     * @param y Right hand input to multiplication\\r\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\r\\n     *          scale unit, rounded up to the closest base unit.\\r\\n     */\\r\\n    function mulTruncateCeil(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\r\\n        uint256 scaled = x.mul(y);\\r\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\r\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\r\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\r\\n        return ceil.div(FULL_SCALE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\r\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\r\\n     * @param x Left hand input to division\\r\\n     * @param y Right hand input to division\\r\\n     * @return Result after multiplying the left operand by the scale, and\\r\\n     *         executing the division on the right hand input.\\r\\n     */\\r\\n    function divPrecisely(uint256 x, uint256 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // e.g. 8e18 * 1e18 = 8e36\\r\\n        uint256 z = x.mul(FULL_SCALE);\\r\\n        // e.g. 8e36 / 10e18 = 8e17\\r\\n        return z.div(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x83669eb50b245f9f48eeefe79034a3cb889675e46e2bee37f93caa2766284a69\",\"license\":\"agpl-3.0\"},\"contracts/utils/StrategyDodoLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"../connectors/dodo/IDODOV1.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./DecimalMath.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nlibrary StrategyDodoLibrary {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n\\r\\n    struct Context {\\r\\n        IDODOV1 dodo;\\r\\n        uint256 amountOut;\\r\\n        uint256 fairAmount;\\r\\n        uint256 targetBase;\\r\\n        uint256 dd;\\r\\n        uint256 a;\\r\\n        uint256 b;\\r\\n        uint256 c;\\r\\n        uint256 d;\\r\\n        uint256 e;\\r\\n        uint256 g;\\r\\n        uint256 h;\\r\\n        uint256 i;\\r\\n    }\\r\\n\\r\\n    function _getAmountIn(uint256 amountOut, IDODOV1 dodo) internal view returns (uint256) {\\r\\n        if (dodo._R_STATUS_() != IDODOV1.RStatus.ABOVE_ONE) {\\r\\n            return amountOut;\\r\\n        }\\r\\n\\r\\n        Context memory ctx;\\r\\n        ctx.dodo = dodo;\\r\\n        ctx.amountOut = amountOut;\\r\\n\\r\\n        ctx.fairAmount = _fairAmount(ctx);\\r\\n        console.log(\\\"fairAmount:\\\",ctx.fairAmount);\\r\\n\\r\\n        ctx.targetBase = _solveQuadraticFunctionForTargetCeil(ctx);\\r\\n        console.log(\\\"targetBase:\\\", ctx.targetBase );\\r\\n        ctx.dd = getDD(ctx);\\r\\n        ctx.a = getA(ctx);\\r\\n        ctx.b = getB(ctx);\\r\\n        ctx.c = getC(ctx);\\r\\n        ctx.d = getD(ctx);\\r\\n        ctx.e = getE(ctx);\\r\\n        console.log(\\\"ctx.a: \\\" , ctx.a);\\r\\n        console.log(\\\"ctx.b: \\\" , ctx.b);\\r\\n        console.log(\\\"ctx.c: \\\" , ctx.c);\\r\\n        console.log(\\\"ctx.d: \\\" , ctx.d);\\r\\n        console.log(\\\"ctx.e: \\\" , ctx.e);\\r\\n        ctx.g = getG(ctx);\\r\\n        ctx.h = getH(ctx);\\r\\n        ctx.i = getI(ctx);\\r\\n        console.log(\\\"ctx.g: \\\" , ctx.g);\\r\\n        console.log(\\\"ctx.h: \\\" , ctx.h);\\r\\n        console.log(\\\"ctx.i: \\\" , ctx.i);\\r\\n        console.log(\\\"ctx.dd: \\\" , ctx.dd);\\r\\n\\r\\n        uint256 underSqrt = ctx.a.add(ctx.c).add(ctx.d).add(ctx.e).sub(ctx.b);\\r\\n        uint256 sqrt = underSqrt.sqrt();\\r\\n        uint256 t1 = ctx.g.add(sqrt);\\r\\n        uint256 t2 = t1.mul(1e18).div(ctx.i);\\r\\n        uint256 res = ctx.h.sub(t2);\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _fairAmount(Context memory ctx) internal view returns (uint256){\\r\\n        uint256 spareQuote = ctx.dodo._QUOTE_BALANCE_().sub(ctx.dodo._TARGET_QUOTE_TOKEN_AMOUNT_());\\r\\n        uint256 price = ctx.dodo.getOraclePrice();\\r\\n        uint256 fairAmount = DecimalMath.divFloor(spareQuote, price);\\r\\n        return fairAmount;\\r\\n    }\\r\\n\\r\\n    function getDD(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.dodo._BASE_BALANCE_().mul(2).sub(ctx.amountOut);\\r\\n    }\\r\\n\\r\\n    function getA(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.fairAmount.mul(ctx.fairAmount).add(ctx.targetBase.mul(ctx.targetBase));\\r\\n    }\\r\\n\\r\\n    function getB(Context memory ctx) internal view returns (uint256){\\r\\n\\r\\n        uint256 t1 = ctx.fairAmount.mul(ctx.dodo._K_()).mul(2).div(1e18);\\r\\n        uint256 t2 = ctx.dd.add(ctx.fairAmount).add(t1);\\r\\n        uint256 t3 = t2.mul(ctx.targetBase).mul(2);\\r\\n\\r\\n        return t3;\\r\\n    }\\r\\n\\r\\n    function getC(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.dd.mul(ctx.fairAmount).mul(2);\\r\\n    }\\r\\n\\r\\n    function getD(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.c.mul(ctx.dodo._K_()).mul(2).div(1e18);\\r\\n    }\\r\\n\\r\\n    function getE(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.dd.mul(ctx.dd);\\r\\n    }\\r\\n\\r\\n    function getG(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.targetBase.add(ctx.fairAmount).sub(ctx.dd);\\r\\n    }\\r\\n\\r\\n    function getH(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.targetBase.add(ctx.dodo._BASE_BALANCE_()).sub(ctx.dd);\\r\\n    }\\r\\n\\r\\n    function getI(Context memory ctx) internal view returns (uint256){\\r\\n        return ctx.dodo._K_().mul(2).add(uint256(2).mul(1e18));\\r\\n    }\\r\\n\\r\\n\\r\\n    function _solveQuadraticFunctionForTargetCeil(\\r\\n        Context memory ctx\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 V1 = ctx.dodo._BASE_BALANCE_();\\r\\n        uint256 k = ctx.dodo._K_();\\r\\n\\r\\n        // V0 = V1+V1*(sqrt-1)/2k\\r\\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mulCeil(k, ctx.fairAmount).mul(4), V1);\\r\\n        sqrt = sqrt.add(DecimalMath.ONE).mul(DecimalMath.ONE).sqrt();\\r\\n        uint256 premium = DecimalMath.divCeil(sqrt.sub(DecimalMath.ONE), k.mul(2));\\r\\n        // V0 is greater than or equal to V1 according to the solution\\r\\n        return DecimalMath.mul(V1, DecimalMath.ONE.add(premium));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4818574d960c598281d61452b986d2e3f0208f01b7e158032a08d8c1693550cf\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200002a336000805160206200532583398151915255565b60008051602062005325833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a36152a380620000826000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c8063853828b611610146578063c71daccb116100c3578063dbe55e5611610087578063dbe55e56146104db578063de5f6268146104ee578063f6ca71b0146104f6578063f78e4d811461050b578063f817bc631461051e578063f97595181461052757600080fd5b8063c71daccb14610492578063c7af33521461049a578063d2f24893146104a2578063d38bfff4146104b5578063d9caed12146104c857600080fd5b8063a98ad46c1161010a578063a98ad46c14610436578063aa388af614610449578063abf4be011461046c578063ad1728cb146102cd578063c2e1e3f41461047f57600080fd5b8063853828b6146103e25780639136616a146103ea5780639688d2fc146103fd57806396d538bb14610410578063a7a61d051461042357600080fd5b80632e655201116101d457806364153fe91161019857806364153fe91461038357806367c7066c1461039657806375123ff9146103a95780637b2d9b2c146103bc5780638400150a146103cf57600080fd5b80632e6552011461033a578063430bf08a1461034d57806347e7ef24146103605780635a063f63146103735780635d36b1901461037b57600080fd5b80630f5754a81161021b5780630f5754a8146102cf5780630fc3b4c4146102d85780631072cbea14610301578063154e4f5814610314578063158274a51461032757600080fd5b8063063bde241461025857806307ab0a7e1461027e5780630c340a24146102a95780630d9fe3fd146102b15780630ed57b3a146102ba575b600080fd5b61026b6b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b60d754610291906001600160a01b031681565b6040516001600160a01b039091168152602001610275565b610291610535565b61026b60da5481565b6102cd6102c83660046146b2565b610552565b005b61026b60d95481565b6102916102e6366004614695565b6035602052600090815260409020546001600160a01b031681565b6102cd61030f366004614983565b61058d565b60d654610291906001600160a01b031681565b60db54610291906001600160a01b031681565b603754610291906001600160a01b031681565b603454610291906001600160a01b031681565b6102cd61036e366004614983565b6105cd565b6102cd610640565b6102cd610a70565b6102cd6103913660046148cd565b610b16565b603954610291906001600160a01b031681565b60d254610291906001600160a01b031681565b6102916103ca366004614b05565b610ca9565b60d854610291906001600160a01b031681565b6102cd610cd3565b6102cd6103f8366004614b05565b61107a565b6102cd61040b3660046146eb565b611245565b6102cd61041e3660046149af565b61134e565b60d454610291906001600160a01b031681565b60d154610291906001600160a01b031681565b61045c610457366004614695565b611474565b6040519015158152602001610275565b60d354610291906001600160a01b031681565b6102cd61048d366004614695565b6114c4565b61026b611543565b61045c6117a6565b60d554610291906001600160a01b031681565b6102cd6104c3366004614695565b6117d7565b6102cd6104d6366004614913565b61187b565b603354610291906001600160a01b031681565b6102cd611d6a565b6104fe611e4e565b6040516102759190614d10565b6102cd6105193660046147aa565b611eb0565b61026b60385481565b61026b662386f26fc1000081565b600061054d60008051602061524e8339815191525490565b905090565b61055a6117a6565b61057f5760405162461bcd60e51b815260040161057690614e7f565b60405180910390fd5b6105898282612223565b5050565b6105956117a6565b6105b15760405162461bcd60e51b815260040161057690614e7f565b6105896105bc610535565b6001600160a01b0384169083612382565b6034546001600160a01b031633146105f75760405162461bcd60e51b815260040161057690614e48565b60008051602061522e833981519152805460028114156106295760405162461bcd60e51b815260040161057690614f04565b6002825561063784846123d4565b50600190555050565b6039546001600160a01b0316331461069a5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610576565b60008051602061522e833981519152805460028114156106cc5760405162461bcd60e51b815260040161057690614f04565b6002825560d8546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561071457600080fd5b505afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c9190614b1e565b9050806107595750610a69565b60d860009054906101000a90046001600160a01b03166001600160a01b0316630b83a7276040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505060d2546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108419190614b1e565b905080156108bd5760d75460d25460d154600092610873926001600160a01b03918216929082169116856001866127cd565b9050600081156108ae5760db5460d95460d15460d5546108ab936001600160a01b039081169392600092908216911630808985612aaa565b90505b6108b881856150c2565b935050505b60d3546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561090157600080fd5b505afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190614b1e565b905080156109825760db5460da5460d35460d554600093610972936001600160a01b039182169390928692918216911630808985612aaa565b905061097e81856150c2565b9350505b8215610a645760395460d554604080516001600160a01b03938416815292909116602083015281018490527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a160d55460395460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190614ac6565b505b505050505b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b031614610b0b5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610576565b610b1433612e39565b565b610b1e6117a6565b610b3a5760405162461bcd60e51b815260040161057690614e7f565b6001600160a01b038416610b8b5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610576565b6001600160a01b038316610bdc5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610576565b81610c255760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610576565b80610c6e5760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610576565b60d580546001600160a01b039586166001600160a01b03199182161790915560db80549490951693169290921790925560d99190915560da55565b603a8181548110610cb957600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610d045750610cef610535565b6001600160a01b0316336001600160a01b0316145b610d5c5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610576565b60008051602061522e83398151915280546002811415610d8e5760405162461bcd60e51b815260040161057690614f04565b6002825560d8546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190614b1e565b905080610e1b5750610a69565b60d854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b5050505060d660009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190614b1e565b5060d5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190614b1e565b90507ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a6036600081548110610fb557610fb56151df565b600091825260209182902001546040805160608082526026908201527f5769746864726177696e672020657665727468696e672066726f6d207468652060808201526502227a2279d160d51b60a08201526001600160a01b039092169282019290925290810183905260c00160405180910390a180156110715760345460368054611071926001600160a01b0316918491600090611055576110556151df565b6000918252602090912001546001600160a01b03169190612382565b50505060019055565b6110826117a6565b61109e5760405162461bcd60e51b815260040161057690614e7f565b60365481106110df5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610576565b6000603682815481106110f4576110f46151df565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906111319060019061511b565b8310156111b357603680546111489060019061511b565b81548110611158576111586151df565b600091825260209091200154603680546001600160a01b039092169185908110611184576111846151df565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60368054806111c4576111c46151c9565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b61124d6117a6565b6112695760405162461bcd60e51b815260040161057690614e7f565b600054610100900460ff1680611282575060005460ff16155b61129e5760405162461bcd60e51b815260040161057690614eb6565b600054610100900460ff161580156112c0576000805461ffff19166101011790555b6113318989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612efd92505050565b8015611343576000805461ff00191690555b505050505050505050565b6113566117a6565b6113725760405162461bcd60e51b815260040161057690614e7f565b60005b81811015611426576000838383818110611391576113916151df565b90506020020160208101906113a69190614695565b6001600160a01b031614156114145760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610576565b8061141e81615162565b915050611375565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161145b93929190614d23565b60405180910390a161146f603a838361454f565b505050565b60d5546000906001600160a01b0383811691161480156114be575060366000815481106114a3576114a36151df565b6000918252602090912001546001600160a01b038381169116145b92915050565b6114cc6117a6565b6114e85760405162461bcd60e51b815260040161057690614e7f565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60d5546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c39190614b1e565b60d8546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561160c57600080fd5b505afa158015611620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116449190614b1e565b905080156117a05760d454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190614b1e565b9050600060d660009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b15801561171a57600080fd5b505afa15801561172e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117529190614b37565b50905060008261176285846150fc565b61176c91906150da565b905061271061177c8260066150fc565b61178691906150da565b611790908261511b565b61179a90866150c2565b94505050505b50919050565b60006117be60008051602061524e8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117df6117a6565b6117fb5760405162461bcd60e51b815260040161057690614e7f565b611823817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b031661184360008051602061524e8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146118a55760405162461bcd60e51b815260040161057690614e48565b60008051602061522e833981519152805460028114156118d75760405162461bcd60e51b815260040161057690614f04565b6002825560d5546001600160a01b03858116911614801561192257506036600081548110611907576119076151df565b6000918252602090912001546001600160a01b038581169116145b6119655760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b6044820152606401610576565b60d65460009061197f9085906001600160a01b0316612fdc565b9050600060d460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d157600080fd5b505afa1580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a099190614b1e565b9050600060d660009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b158015611a5a57600080fd5b505afa158015611a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a929190614b37565b509050600081611aa284866150fc565b611aac91906150da565b60d8546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611af557600080fd5b505afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d9190614b1e565b905080821115611b3b578091505b60d854604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015611b8157600080fd5b505af1158015611b95573d6000803e3d6000fd5b5050505060d660009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611be957600080fd5b505af1158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c219190614b1e565b5060d5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611c6657600080fd5b505afa158015611c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9e9190614b1e565b90508015611d59577ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a6036600081548110611cdb57611cdb6151df565b60009182526020918290200154604080516060808252601b908201527f5769746864726177696e672066726f6d2074686520444f444f3a20000000000060808201526001600160a01b039092169282019290925290810183905260a00160405180910390a1611d598b826036600081548110611055576110556151df565b505050505050600182555050505050565b6034546001600160a01b03163314611d945760405162461bcd60e51b815260040161057690614e48565b60008051602061522e83398151915280546002811415611dc65760405162461bcd60e51b815260040161057690614f04565b6002825560d5546040516370a0823160e01b8152306004820152610a69916001600160a01b03169081906370a082319060240160206040518083038186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e499190614b1e565b6123d4565b6060603a805480602002602001604051908101604052809291908181526020018280548015611ea657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e88575b5050505050905090565b611eb86117a6565b611ed45760405162461bcd60e51b815260040161057690614e7f565b600054610100900460ff1680611eed575060005460ff16155b611f095760405162461bcd60e51b815260040161057690614eb6565b600054610100900460ff16158015611f2b576000805461ffff19166101011790555b86866000818110611f3e57611f3e6151df565b9050602002016020810190611f539190614695565b60d460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460d160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508360d360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c60d260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082826000818110612001576120016151df565b90506020020160208101906120169190614695565b60d680546001600160a01b0319166001600160a01b039290921691909117905582826001818110612049576120496151df565b905060200201602081019061205e9190614695565b60d780546001600160a01b0319166001600160a01b039290921691909117905582826002818110612091576120916151df565b90506020020160208101906120a69190614695565b60d880546001600160a01b0319166001600160a01b0392909216919091179055612180838360038181106120dc576120dc6151df565b90506020020160208101906120f19190614695565b84846004818110612104576121046151df565b90506020020160208101906121199190614695565b8585600581811061212c5761212c6151df565b90506020020160208101906121419190614695565b60ce80546001600160a01b039485166001600160a01b03199182161790915560cf80549385169382169390931790925560d08054919093169116179055565b6122028d8d8d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612efd92505050565b8015612214576000805461ff00191690555b50505050505050505050505050565b6001600160a01b0382811660009081526035602052604090205416156122805760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610576565b6001600160a01b038216158015906122a057506001600160a01b03811615155b6122e05760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610576565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261146f908490613451565b60d5546001600160a01b03838116911614801561241b57506036600081548110612400576124006151df565b6000918252602090912001546001600160a01b038381169116145b61245e5760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b6044820152606401610576565b60d5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156124a257600080fd5b505afa1580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da9190614b1e565b6040805160608082526017908201527f4465706f736974696e6720696e746f20444f444f203a2000000000000000000060808201526001600160a01b03861660208201529081018290529091507ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a9060a00160405180910390a160d55460d65460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156125a457600080fd5b505af11580156125b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125dc9190614ac6565b5060d65460405163aa06ce9b60e01b8152306004820152602481018390526001600160a01b039091169063aa06ce9b90604401602060405180830381600087803b15801561262957600080fd5b505af115801561263d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126619190614b1e565b5060d4546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156126a657600080fd5b505afa1580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de9190614b1e565b60d45460d85460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b15801561273057600080fd5b505af1158015612744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127689190614ac6565b5060d85460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b1580156127af57600080fd5b505af11580156127c3573d6000803e3d6000fd5b5050505050505050565b6000808261288057604051633cd0243b60e11b8152306004820152602481018690526000906001600160a01b038a16906379a0487690604401604080518083038186803b15801561281d57600080fd5b505afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190614b37565b5090506064612864868261511b565b61286e90836150fc565b61287891906150da565b915050612927565b6040516366410a2160e01b8152306004820152602481018690526000906001600160a01b038a16906366410a2190604401604080518083038186803b1580156128c857600080fd5b505afa1580156128dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129009190614b37565b509050606461290f868261511b565b61291990836150fc565b61292391906150da565b9150505b80612936576000915050612aa0565b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061296c5761296c6151df565b6001600160a01b03928316602091820292909201015260d05460405163095ea7b360e01b81529082166004820152602481018890529089169063095ea7b390604401602060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a009190614ac6565b5060cf546001600160a01b031663f87dc1b789898986868a6000612a26426102586150c2565b6040518963ffffffff1660e01b8152600401612a49989796959493929190614cb4565b602060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9b9190614b1e565b925050505b9695505050505050565b6000808a9050612aeb6040518060400160405280601981526020017842616c616e6365725661756c743a207377617070696e67203160381b81525082613523565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b8152306004820152612b9c91908a906001600160a01b038216906370a082319060240160206040518083038186803b158015612b5f57600080fd5b505afa158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b979190614b1e565b613568565b6040516370a0823160e01b81523060048201526001600160a01b0389169063095ea7b390839083906370a082319060240160206040518083038186803b158015612be557600080fd5b505afa158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614b1e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015612c6357600080fd5b505af1158015612c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9b9190614ac6565b5082612cd757612caf8b8b8b8b8b896135af565b9250612cd4612ccd662386f26fc10000670de0b6b3a764000061511b565b8490613a86565b92505b612d236040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b8a8152602081018a6001811115612d3c57612d3c6151b3565b90816001811115612d4f57612d4f6151b3565b9052506001600160a01b03898116604083810191909152898216606080850191909152608080850189905282519081018352600060208201819052918101919091528983168152888316918101919091529083166352bbbe29838388612db7426102586150c2565b6040518563ffffffff1660e01b8152600401612dd69493929190614f2c565b602060405180830381600087803b158015612df057600080fd5b505af1158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e289190614b1e565b9d9c50505050505050505050505050565b6001600160a01b038116612e8f5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610576565b806001600160a01b0316612eaf60008051602061524e8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612efa8160008051602061524e83398151915255565b50565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612f39603a858561454f565b50815181518114612f835760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610576565b60005b818110156127c357612fca848281518110612fa357612fa36151df565b6020026020010151848381518110612fbd57612fbd6151df565b6020026020010151612223565b80612fd481615162565b915050612f86565b60006001826001600160a01b03166317be952e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301957600080fd5b505afa15801561302d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130519190614ae8565b6002811115613062576130626151b3565b1461306e5750816114be565b6130e2604051806101a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0383168152602081018490526130fe81613aa2565b60408083019182528051808201909152600b81526a3330b4b920b6b7bab73a1d60a91b602082015290516131329190613c22565b61313b81613c67565b6060820190815260408051808201909152600b81526a3a30b933b2ba2130b9b29d60a91b602082015290516131709190613c22565b61317981613de4565b608082015261318781613e68565b60a082015261319581613e8d565b60c08201526131a381613f67565b60e08201526131b181613f89565b6101008201526131c08161401f565b610120820152604080518082019091526007815266031ba3c17309d160cd1b602082015260a08201516131f39190613c22565b61322060405180604001604052806007815260200166031ba3c17311d160cd1b8152508260c00151613c22565b61324d60405180604001604052806007815260200166031ba3c17319d160cd1b8152508260e00151613c22565b61327b60405180604001604052806007815260200166031ba3c17321d160cd1b815250826101000151613c22565b6132a960405180604001604052806007815260200166031ba3c17329d160cd1b815250826101200151613c22565b6132b281614031565b6101408201526132c181614056565b6101608201526132d0816140e3565b610180820152604080518082019091526007815266031ba3c17339d160cd1b60208201526101408201516133049190613c22565b61333260405180604001604052806007815260200166031ba3c17341d160cd1b815250826101600151613c22565b61336060405180604001604052806007815260200166031ba3c17349d160cd1b815250826101800151613c22565b61338e60405180604001604052806008815260200167031ba3c1732321d160c51b8152508260800151613c22565b60006133d18260c001516133cb8461012001516133c58661010001516133c58860e001518960a0015161413d90919063ffffffff16565b9061413d565b90614188565b905060006133de826141d0565b905060006133fa8285610140015161413d90919063ffffffff16565b90506000613428856101800151613422670de0b6b3a76400008561422290919063ffffffff16565b90614283565b905060006134448287610160015161418890919063ffffffff16565b9998505050505050505050565b60006134a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142cf9092919063ffffffff16565b80519091501561146f57808060200190518101906134c49190614ac6565b61146f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610576565b6105898282604051602401613539929190614dce565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526142e6565b61146f83838360405160240161358093929190614df8565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526142e6565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082015287908087600181111561360b5761360b6151b3565b9081600181111561361e5761361e6151b3565b9052506001600160a01b0386811660208301528581166040808401919091526060830186905251631f29a8cd60e31b8152600481018a905260009182919085169063f94d46689060240160006040518083038186803b15801561368057600080fd5b505afa158015613694573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136bc91908101906149f1565b5091509150600080856001600160a01b031663f6c009278d6040518263ffffffff1660e01b81526004016136f291815260200190565b604080518083038186803b15801561370957600080fd5b505afa15801561371d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137419190614954565b9092509050600081600281111561375a5761375a6151b3565b14156138935760008060005b86518160ff161015613802578c6001600160a01b0316878260ff1681518110613791576137916151df565b60200260200101516001600160a01b031614156137b3578060ff1692506137f0565b8b6001600160a01b0316878260ff16815181106137d2576137d26151df565b60200260200101516001600160a01b031614156137f0578060ff1691505b806137fa8161517d565b915050613766565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a90613834908a90899087908790600401614fe7565b60206040518083038186803b15801561384c57600080fd5b505afa158015613860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138849190614b1e565b98505050505050505050612aa0565b60018160028111156138a7576138a76151b3565b14156139b25760008060005b86518160ff161015613981578c6001600160a01b0316878260ff16815181106138de576138de6151df565b60200260200101516001600160a01b0316141561391957858160ff168151811061390a5761390a6151df565b6020026020010151925061396f565b8b6001600160a01b0316878260ff1681518110613938576139386151df565b60200260200101516001600160a01b0316141561396f57858160ff1681518110613964576139646151df565b602002602001015191505b806139798161517d565b9150506138b3565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c90613834908a9086908690600401615048565b60008060005b86518160ff161015613981578c6001600160a01b0316878260ff16815181106139e3576139e36151df565b60200260200101516001600160a01b03161415613a1e57858160ff1681518110613a0f57613a0f6151df565b60200260200101519250613a74565b8b6001600160a01b0316878260ff1681518110613a3d57613a3d6151df565b60200260200101516001600160a01b03161415613a7457858160ff1681518110613a6957613a696151df565b602002602001015191505b80613a7e8161517d565b9150506139b8565b6000613a9b8383670de0b6b3a7640000614307565b9392505050565b600080613b9283600001516001600160a01b031663245c96856040518163ffffffff1660e01b815260040160206040518083038186803b158015613ae557600080fd5b505afa158015613af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1d9190614b1e565b84600001516001600160a01b0316637c9b8e896040518163ffffffff1660e01b815260040160206040518083038186803b158015613b5a57600080fd5b505afa158015613b6e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cb9190614b1e565b9050600083600001516001600160a01b031663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b158015613bd357600080fd5b505afa158015613be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0b9190614b1e565b90506000613c198383614320565b95945050505050565b6105898282604051602401613c38929190614e26565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526142e6565b60008082600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ca757600080fd5b505afa158015613cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cdf9190614b1e565b9050600083600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d2057600080fd5b505afa158015613d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d589190614b1e565b90506000613d7e613d786004613d72858960400151614338565b90614222565b84614356565b9050613d9e613d99670de0b6b3a7640000613d72848261413d565b6141d0565b90506000613dc7613db783670de0b6b3a7640000614188565b613dc2856002614222565b614356565b9050612aa084613ddf670de0b6b3a76400008461413d565b61436e565b60006114be82602001516133cb600285600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3057600080fd5b505afa158015613e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d729190614b1e565b60608101516000906114be90613e7e9080614222565b60408401516133c59080614222565b600080613f24670de0b6b3a76400006134226002613d7287600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ee157600080fd5b505afa158015613ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f199190614b1e565b604089015190614222565b90506000613f47826133c58660400151876080015161413d90919063ffffffff16565b90506000613c196002613d7287606001518561422290919063ffffffff16565b60006114be6002613d728460400151856080015161422290919063ffffffff16565b60006114be670de0b6b3a76400006134226002613d7286600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fdc57600080fd5b505afa158015613ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140149190614b1e565b60e088015190614222565b60808101516000906114be9080614222565b60006114be82608001516133cb8460400151856060015161413d90919063ffffffff16565b60006114be82608001516133cb84600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156140a057600080fd5b505afa1580156140b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d89190614b1e565b60608601519061413d565b60006114be6140fb6002670de0b6b3a7640000614222565b6133c5600285600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3057600080fd5b60008061414a83856150c2565b905083811015613a9b5760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b6044820152606401610576565b6000828211156141c65760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b6044820152606401610576565b613a9b828461511b565b6000806141de6002846150da565b6141e99060016150c2565b90508291505b818110156117a05790508060028161420781866150da565b61421191906150c2565b61421b91906150da565b90506141ef565b600082614231575060006114be565b600061423d83856150fc565b90508261424a85836150da565b14613a9b5760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b6044820152606401610576565b60008082116142c55760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b6044820152606401610576565b613a9b82846150da565b60606142de848460008561438d565b949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008061431485856144b5565b9050613c1981846144c1565b6000613a9b8261342285670de0b6b3a7640000614222565b6000613a9b670de0b6b3a76400006143508585614222565b906144cd565b6000613a9b8261435085670de0b6b3a7640000614222565b6000670de0b6b3a76400006143838484614222565b613a9b91906150da565b6060824710156143ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610576565b843b61443c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610576565b600080866001600160a01b031685876040516144589190614c98565b60006040518083038185875af1925050503d8060008114614495576040519150601f19603f3d011682016040523d82523d6000602084013e61449a565b606091505b50915091506144aa828286614516565b979650505050505050565b6000613a9b82846150fc565b6000613a9b82846150da565b6000806144da8484614283565b905060006144e884836150fc565b6144f2908661511b565b9050801561450e576145058260016150c2565b925050506114be565b5090506114be565b60608315614525575081613a9b565b8251156145355782518084602001fd5b8160405162461bcd60e51b81526004016105769190614dbb565b8280548282559060005260206000209081019282156145a2579160200282015b828111156145a25781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061456f565b506145ae9291506145b2565b5090565b5b808211156145ae57600081556001016145b3565b80356145d28161520b565b919050565b60008083601f8401126145e957600080fd5b50813567ffffffffffffffff81111561460157600080fd5b6020830191508360208260051b850101111561461c57600080fd5b9250929050565b600082601f83011261463457600080fd5b815160206146496146448361509e565b61506d565b80838252828201915082860187848660051b890101111561466957600080fd5b60005b858110156146885781518452928401929084019060010161466c565b5090979650505050505050565b6000602082840312156146a757600080fd5b8135613a9b8161520b565b600080604083850312156146c557600080fd5b82356146d08161520b565b915060208301356146e08161520b565b809150509250929050565b60008060008060008060008060a0898b03121561470757600080fd5b88356147128161520b565b975060208901356147228161520b565b9650604089013567ffffffffffffffff8082111561473f57600080fd5b61474b8c838d016145d7565b909850965060608b013591508082111561476457600080fd5b6147708c838d016145d7565b909650945060808b013591508082111561478957600080fd5b506147968b828c016145d7565b999c989b5096995094979396929594505050565b6000806000806000806000806000806000806101008d8f0312156147cd57600080fd5b6147d68d6145c7565b9b506147e460208e016145c7565b9a5067ffffffffffffffff60408e013511156147ff57600080fd5b61480f8e60408f01358f016145d7565b909a50985067ffffffffffffffff60608e0135111561482d57600080fd5b61483d8e60608f01358f016145d7565b909850965067ffffffffffffffff60808e0135111561485b57600080fd5b61486b8e60808f01358f016145d7565b909650945061487c60a08e016145c7565b935061488a60c08e016145c7565b925067ffffffffffffffff60e08e013511156148a557600080fd5b6148b58e60e08f01358f016145d7565b81935080925050509295989b509295989b509295989b565b600080600080608085870312156148e357600080fd5b84356148ee8161520b565b935060208501356148fe8161520b565b93969395505050506040820135916060013590565b60008060006060848603121561492857600080fd5b83356149338161520b565b925060208401356149438161520b565b929592945050506040919091013590565b6000806040838503121561496757600080fd5b82516149728161520b565b60208401519092506146e081615220565b6000806040838503121561499657600080fd5b82356149a18161520b565b946020939093013593505050565b600080602083850312156149c257600080fd5b823567ffffffffffffffff8111156149d957600080fd5b6149e5858286016145d7565b90969095509350505050565b600080600060608486031215614a0657600080fd5b835167ffffffffffffffff80821115614a1e57600080fd5b818601915086601f830112614a3257600080fd5b81516020614a426146448361509e565b8083825282820191508286018b848660051b8901011115614a6257600080fd5b600096505b84871015614a8e578051614a7a8161520b565b835260019690960195918301918301614a67565b5091890151919750909350505080821115614aa857600080fd5b50614ab586828701614623565b925050604084015190509250925092565b600060208284031215614ad857600080fd5b81518015158114613a9b57600080fd5b600060208284031215614afa57600080fd5b8151613a9b81615220565b600060208284031215614b1757600080fd5b5035919050565b600060208284031215614b3057600080fd5b5051919050565b60008060408385031215614b4a57600080fd5b505080516020909101519092909150565b600081518084526020808501945080840160005b83811015614b945781516001600160a01b031687529582019590820190600101614b6f565b509495945050505050565b60008151808452614bb7816020860160208601615132565b601f01601f19169290920160200192915050565b60028110614be957634e487b7160e01b600052602160045260246000fd5b9052565b6000610120614bfd848451614bcb565b6020838101516001600160a01b03169085015260408084015190614c2b908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151614c6460c08601826001600160a01b03169052565b5060e0830151614c7f60e08601826001600160a01b03169052565b50610100808401518282870152612aa083870182614b9f565b60008251614caa818460208701615132565b9190910192915050565b6001600160a01b03898116825288166020820152604081018790526060810186905261010060808201819052600090614cef83820188614b5b565b60a0840196909652505091151560c083015260e09091015295945050505050565b602081526000613a9b6020830184614b5b565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015614d6d5781546001600160a01b031684529284019260019182019101614d48565b505050838103828501528481528590820160005b86811015614daf578235614d948161520b565b6001600160a01b031682529183019190830190600101614d81565b50979650505050505050565b602081526000613a9b6020830184614b9f565b604081526000614de16040830185614b9f565b905060018060a01b03831660208301529392505050565b606081526000614e0b6060830186614b9f565b6001600160a01b039490941660208301525060400152919050565b604081526000614e396040830185614b9f565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60e08152845160e082015260006020860151614f4c610100840182614bcb565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152614f956101a0840182614b9f565b915050614fd5602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000614ffa6080830187614bed565b82810360208481019190915286518083528782019282019060005b8181101561503157845183529383019391830191600101615015565b505060408501969096525050506060015292915050565b60608152600061505b6060830186614bed565b60208301949094525060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615096576150966151f5565b604052919050565b600067ffffffffffffffff8211156150b8576150b86151f5565b5060051b60200190565b600082198211156150d5576150d561519d565b500190565b6000826150f757634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156151165761511661519d565b500290565b60008282101561512d5761512d61519d565b500390565b60005b8381101561514d578181015183820152602001615135565b8381111561515c576000848401525b50505050565b60006000198214156151765761517661519d565b5060010190565b600060ff821660ff8114156151945761519461519d565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612efa57600080fd5b60038110612efa57600080fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220e2a4255d08fef2a3ca22e223a31c313827483947af9312395b4dda13945590c264736f6c6343000806003383f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c8063853828b611610146578063c71daccb116100c3578063dbe55e5611610087578063dbe55e56146104db578063de5f6268146104ee578063f6ca71b0146104f6578063f78e4d811461050b578063f817bc631461051e578063f97595181461052757600080fd5b8063c71daccb14610492578063c7af33521461049a578063d2f24893146104a2578063d38bfff4146104b5578063d9caed12146104c857600080fd5b8063a98ad46c1161010a578063a98ad46c14610436578063aa388af614610449578063abf4be011461046c578063ad1728cb146102cd578063c2e1e3f41461047f57600080fd5b8063853828b6146103e25780639136616a146103ea5780639688d2fc146103fd57806396d538bb14610410578063a7a61d051461042357600080fd5b80632e655201116101d457806364153fe91161019857806364153fe91461038357806367c7066c1461039657806375123ff9146103a95780637b2d9b2c146103bc5780638400150a146103cf57600080fd5b80632e6552011461033a578063430bf08a1461034d57806347e7ef24146103605780635a063f63146103735780635d36b1901461037b57600080fd5b80630f5754a81161021b5780630f5754a8146102cf5780630fc3b4c4146102d85780631072cbea14610301578063154e4f5814610314578063158274a51461032757600080fd5b8063063bde241461025857806307ab0a7e1461027e5780630c340a24146102a95780630d9fe3fd146102b15780630ed57b3a146102ba575b600080fd5b61026b6b033b2e3c9fd0803ce800000081565b6040519081526020015b60405180910390f35b60d754610291906001600160a01b031681565b6040516001600160a01b039091168152602001610275565b610291610535565b61026b60da5481565b6102cd6102c83660046146b2565b610552565b005b61026b60d95481565b6102916102e6366004614695565b6035602052600090815260409020546001600160a01b031681565b6102cd61030f366004614983565b61058d565b60d654610291906001600160a01b031681565b60db54610291906001600160a01b031681565b603754610291906001600160a01b031681565b603454610291906001600160a01b031681565b6102cd61036e366004614983565b6105cd565b6102cd610640565b6102cd610a70565b6102cd6103913660046148cd565b610b16565b603954610291906001600160a01b031681565b60d254610291906001600160a01b031681565b6102916103ca366004614b05565b610ca9565b60d854610291906001600160a01b031681565b6102cd610cd3565b6102cd6103f8366004614b05565b61107a565b6102cd61040b3660046146eb565b611245565b6102cd61041e3660046149af565b61134e565b60d454610291906001600160a01b031681565b60d154610291906001600160a01b031681565b61045c610457366004614695565b611474565b6040519015158152602001610275565b60d354610291906001600160a01b031681565b6102cd61048d366004614695565b6114c4565b61026b611543565b61045c6117a6565b60d554610291906001600160a01b031681565b6102cd6104c3366004614695565b6117d7565b6102cd6104d6366004614913565b61187b565b603354610291906001600160a01b031681565b6102cd611d6a565b6104fe611e4e565b6040516102759190614d10565b6102cd6105193660046147aa565b611eb0565b61026b60385481565b61026b662386f26fc1000081565b600061054d60008051602061524e8339815191525490565b905090565b61055a6117a6565b61057f5760405162461bcd60e51b815260040161057690614e7f565b60405180910390fd5b6105898282612223565b5050565b6105956117a6565b6105b15760405162461bcd60e51b815260040161057690614e7f565b6105896105bc610535565b6001600160a01b0384169083612382565b6034546001600160a01b031633146105f75760405162461bcd60e51b815260040161057690614e48565b60008051602061522e833981519152805460028114156106295760405162461bcd60e51b815260040161057690614f04565b6002825561063784846123d4565b50600190555050565b6039546001600160a01b0316331461069a5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652048617276657374657200000000006044820152606401610576565b60008051602061522e833981519152805460028114156106cc5760405162461bcd60e51b815260040161057690614f04565b6002825560d8546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561071457600080fd5b505afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c9190614b1e565b9050806107595750610a69565b60d860009054906101000a90046001600160a01b03166001600160a01b0316630b83a7276040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505060d2546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b15801561080957600080fd5b505afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108419190614b1e565b905080156108bd5760d75460d25460d154600092610873926001600160a01b03918216929082169116856001866127cd565b9050600081156108ae5760db5460d95460d15460d5546108ab936001600160a01b039081169392600092908216911630808985612aaa565b90505b6108b881856150c2565b935050505b60d3546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561090157600080fd5b505afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190614b1e565b905080156109825760db5460da5460d35460d554600093610972936001600160a01b039182169390928692918216911630808985612aaa565b905061097e81856150c2565b9350505b8215610a645760395460d554604080516001600160a01b03938416815292909116602083015281018490527ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c723539060600160405180910390a160d55460395460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190614ac6565b505b505050505b5060019055565b7f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc546001600160a01b0316336001600160a01b031614610b0b5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610576565b610b1433612e39565b565b610b1e6117a6565b610b3a5760405162461bcd60e51b815260040161057690614e7f565b6001600160a01b038416610b8b5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610576565b6001600160a01b038316610bdc5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610576565b81610c255760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610576565b80610c6e5760405162461bcd60e51b8152602060048201526019602482015278115b5c1d1e481c1bdbdb081a59081b9bdd08185b1b1bddd959603a1b6044820152606401610576565b60d580546001600160a01b039586166001600160a01b03199182161790915560db80549490951693169290921790925560d99190915560da55565b603a8181548110610cb957600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610d045750610cef610535565b6001600160a01b0316336001600160a01b0316145b610d5c5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610576565b60008051602061522e83398151915280546002811415610d8e5760405162461bcd60e51b815260040161057690614f04565b6002825560d8546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190614b1e565b905080610e1b5750610a69565b60d854604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b5050505060d660009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190614b1e565b5060d5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f4657600080fd5b505afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190614b1e565b90507ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a6036600081548110610fb557610fb56151df565b600091825260209182902001546040805160608082526026908201527f5769746864726177696e672020657665727468696e672066726f6d207468652060808201526502227a2279d160d51b60a08201526001600160a01b039092169282019290925290810183905260c00160405180910390a180156110715760345460368054611071926001600160a01b0316918491600090611055576110556151df565b6000918252602090912001546001600160a01b03169190612382565b50505060019055565b6110826117a6565b61109e5760405162461bcd60e51b815260040161057690614e7f565b60365481106110df5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610576565b6000603682815481106110f4576110f46151df565b60009182526020808320909101546001600160a01b039081168084526035909252604090922054603654919350909116906111319060019061511b565b8310156111b357603680546111489060019061511b565b81548110611158576111586151df565b600091825260209091200154603680546001600160a01b039092169185908110611184576111846151df565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60368054806111c4576111c46151c9565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b61124d6117a6565b6112695760405162461bcd60e51b815260040161057690614e7f565b600054610100900460ff1680611282575060005460ff16155b61129e5760405162461bcd60e51b815260040161057690614eb6565b600054610100900460ff161580156112c0576000805461ffff19166101011790555b6113318989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250612efd92505050565b8015611343576000805461ff00191690555b505050505050505050565b6113566117a6565b6113725760405162461bcd60e51b815260040161057690614e7f565b60005b81811015611426576000838383818110611391576113916151df565b90506020020160208101906113a69190614695565b6001600160a01b031614156114145760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610576565b8061141e81615162565b915050611375565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603a838360405161145b93929190614d23565b60405180910390a161146f603a838361454f565b505050565b60d5546000906001600160a01b0383811691161480156114be575060366000815481106114a3576114a36151df565b6000918252602090912001546001600160a01b038381169116145b92915050565b6114cc6117a6565b6114e85760405162461bcd60e51b815260040161057690614e7f565b603980546001600160a01b0319166001600160a01b0383169081179091556040805182815260208101929092527fe48386b84419f4d36e0f96c10cc3510b6fb1a33795620c5098b22472bbe90796910160405180910390a150565b60d5546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c39190614b1e565b60d8546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561160c57600080fd5b505afa158015611620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116449190614b1e565b905080156117a05760d454604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190614b1e565b9050600060d660009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b15801561171a57600080fd5b505afa15801561172e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117529190614b37565b50905060008261176285846150fc565b61176c91906150da565b905061271061177c8260066150fc565b61178691906150da565b611790908261511b565b61179a90866150c2565b94505050505b50919050565b60006117be60008051602061524e8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6117df6117a6565b6117fb5760405162461bcd60e51b815260040161057690614e7f565b611823817f7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc55565b806001600160a01b031661184360008051602061524e8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146118a55760405162461bcd60e51b815260040161057690614e48565b60008051602061522e833981519152805460028114156118d75760405162461bcd60e51b815260040161057690614f04565b6002825560d5546001600160a01b03858116911614801561192257506036600081548110611907576119076151df565b6000918252602090912001546001600160a01b038581169116145b6119655760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b6044820152606401610576565b60d65460009061197f9085906001600160a01b0316612fdc565b9050600060d460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d157600080fd5b505afa1580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a099190614b1e565b9050600060d660009054906101000a90046001600160a01b03166001600160a01b031663ffa642256040518163ffffffff1660e01b8152600401604080518083038186803b158015611a5a57600080fd5b505afa158015611a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a929190614b37565b509050600081611aa284866150fc565b611aac91906150da565b60d8546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611af557600080fd5b505afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d9190614b1e565b905080821115611b3b578091505b60d854604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015611b8157600080fd5b505af1158015611b95573d6000803e3d6000fd5b5050505060d660009054906101000a90046001600160a01b03166001600160a01b031663d47eaa376040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611be957600080fd5b505af1158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c219190614b1e565b5060d5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611c6657600080fd5b505afa158015611c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9e9190614b1e565b90508015611d59577ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a6036600081548110611cdb57611cdb6151df565b60009182526020918290200154604080516060808252601b908201527f5769746864726177696e672066726f6d2074686520444f444f3a20000000000060808201526001600160a01b039092169282019290925290810183905260a00160405180910390a1611d598b826036600081548110611055576110556151df565b505050505050600182555050505050565b6034546001600160a01b03163314611d945760405162461bcd60e51b815260040161057690614e48565b60008051602061522e83398151915280546002811415611dc65760405162461bcd60e51b815260040161057690614f04565b6002825560d5546040516370a0823160e01b8152306004820152610a69916001600160a01b03169081906370a082319060240160206040518083038186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e499190614b1e565b6123d4565b6060603a805480602002602001604051908101604052809291908181526020018280548015611ea657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e88575b5050505050905090565b611eb86117a6565b611ed45760405162461bcd60e51b815260040161057690614e7f565b600054610100900460ff1680611eed575060005460ff16155b611f095760405162461bcd60e51b815260040161057690614eb6565b600054610100900460ff16158015611f2b576000805461ffff19166101011790555b86866000818110611f3e57611f3e6151df565b9050602002016020810190611f539190614695565b60d460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460d160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508360d360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c60d260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082826000818110612001576120016151df565b90506020020160208101906120169190614695565b60d680546001600160a01b0319166001600160a01b039290921691909117905582826001818110612049576120496151df565b905060200201602081019061205e9190614695565b60d780546001600160a01b0319166001600160a01b039290921691909117905582826002818110612091576120916151df565b90506020020160208101906120a69190614695565b60d880546001600160a01b0319166001600160a01b0392909216919091179055612180838360038181106120dc576120dc6151df565b90506020020160208101906120f19190614695565b84846004818110612104576121046151df565b90506020020160208101906121199190614695565b8585600581811061212c5761212c6151df565b90506020020160208101906121419190614695565b60ce80546001600160a01b039485166001600160a01b03199182161790915560cf80549385169382169390931790925560d08054919093169116179055565b6122028d8d8d8d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612efd92505050565b8015612214576000805461ff00191690555b50505050505050505050505050565b6001600160a01b0382811660009081526035602052604090205416156122805760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610576565b6001600160a01b038216158015906122a057506001600160a01b03811615155b6122e05760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610576565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a25050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261146f908490613451565b60d5546001600160a01b03838116911614801561241b57506036600081548110612400576124006151df565b6000918252602090912001546001600160a01b038381169116145b61245e5760405162461bcd60e51b81526020600482015260146024820152732a37b5b2b7103737ba1039bab83837b93a32b21760611b6044820152606401610576565b60d5546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156124a257600080fd5b505afa1580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da9190614b1e565b6040805160608082526017908201527f4465706f736974696e6720696e746f20444f444f203a2000000000000000000060808201526001600160a01b03861660208201529081018290529091507ff0f0cce21a2c16fc3714f3a884bca7193a057e8544baa837916e9420d890bf8a9060a00160405180910390a160d55460d65460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156125a457600080fd5b505af11580156125b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125dc9190614ac6565b5060d65460405163aa06ce9b60e01b8152306004820152602481018390526001600160a01b039091169063aa06ce9b90604401602060405180830381600087803b15801561262957600080fd5b505af115801561263d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126619190614b1e565b5060d4546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156126a657600080fd5b505afa1580156126ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126de9190614b1e565b60d45460d85460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b15801561273057600080fd5b505af1158015612744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127689190614ac6565b5060d85460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b1580156127af57600080fd5b505af11580156127c3573d6000803e3d6000fd5b5050505050505050565b6000808261288057604051633cd0243b60e11b8152306004820152602481018690526000906001600160a01b038a16906379a0487690604401604080518083038186803b15801561281d57600080fd5b505afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190614b37565b5090506064612864868261511b565b61286e90836150fc565b61287891906150da565b915050612927565b6040516366410a2160e01b8152306004820152602481018690526000906001600160a01b038a16906366410a2190604401604080518083038186803b1580156128c857600080fd5b505afa1580156128dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129009190614b37565b509050606461290f868261511b565b61291990836150fc565b61292391906150da565b9150505b80612936576000915050612aa0565b60408051600180825281830190925260009160208083019080368337019050509050888160008151811061296c5761296c6151df565b6001600160a01b03928316602091820292909201015260d05460405163095ea7b360e01b81529082166004820152602481018890529089169063095ea7b390604401602060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a009190614ac6565b5060cf546001600160a01b031663f87dc1b789898986868a6000612a26426102586150c2565b6040518963ffffffff1660e01b8152600401612a49989796959493929190614cb4565b602060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9b9190614b1e565b925050505b9695505050505050565b6000808a9050612aeb6040518060400160405280601981526020017842616c616e6365725661756c743a207377617070696e67203160381b81525082613523565b604080518082018252601981527842616c616e6365725661756c743a207377617070696e67203160381b602082015290516370a0823160e01b8152306004820152612b9c91908a906001600160a01b038216906370a082319060240160206040518083038186803b158015612b5f57600080fd5b505afa158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b979190614b1e565b613568565b6040516370a0823160e01b81523060048201526001600160a01b0389169063095ea7b390839083906370a082319060240160206040518083038186803b158015612be557600080fd5b505afa158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614b1e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015612c6357600080fd5b505af1158015612c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9b9190614ac6565b5082612cd757612caf8b8b8b8b8b896135af565b9250612cd4612ccd662386f26fc10000670de0b6b3a764000061511b565b8490613a86565b92505b612d236040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b8a8152602081018a6001811115612d3c57612d3c6151b3565b90816001811115612d4f57612d4f6151b3565b9052506001600160a01b03898116604083810191909152898216606080850191909152608080850189905282519081018352600060208201819052918101919091528983168152888316918101919091529083166352bbbe29838388612db7426102586150c2565b6040518563ffffffff1660e01b8152600401612dd69493929190614f2c565b602060405180830381600087803b158015612df057600080fd5b505af1158015612e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e289190614b1e565b9d9c50505050505050505050505050565b6001600160a01b038116612e8f5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610576565b806001600160a01b0316612eaf60008051602061524e8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612efa8160008051602061524e83398151915255565b50565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116919091179055612f39603a858561454f565b50815181518114612f835760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610576565b60005b818110156127c357612fca848281518110612fa357612fa36151df565b6020026020010151848381518110612fbd57612fbd6151df565b6020026020010151612223565b80612fd481615162565b915050612f86565b60006001826001600160a01b03166317be952e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301957600080fd5b505afa15801561302d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130519190614ae8565b6002811115613062576130626151b3565b1461306e5750816114be565b6130e2604051806101a0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0383168152602081018490526130fe81613aa2565b60408083019182528051808201909152600b81526a3330b4b920b6b7bab73a1d60a91b602082015290516131329190613c22565b61313b81613c67565b6060820190815260408051808201909152600b81526a3a30b933b2ba2130b9b29d60a91b602082015290516131709190613c22565b61317981613de4565b608082015261318781613e68565b60a082015261319581613e8d565b60c08201526131a381613f67565b60e08201526131b181613f89565b6101008201526131c08161401f565b610120820152604080518082019091526007815266031ba3c17309d160cd1b602082015260a08201516131f39190613c22565b61322060405180604001604052806007815260200166031ba3c17311d160cd1b8152508260c00151613c22565b61324d60405180604001604052806007815260200166031ba3c17319d160cd1b8152508260e00151613c22565b61327b60405180604001604052806007815260200166031ba3c17321d160cd1b815250826101000151613c22565b6132a960405180604001604052806007815260200166031ba3c17329d160cd1b815250826101200151613c22565b6132b281614031565b6101408201526132c181614056565b6101608201526132d0816140e3565b610180820152604080518082019091526007815266031ba3c17339d160cd1b60208201526101408201516133049190613c22565b61333260405180604001604052806007815260200166031ba3c17341d160cd1b815250826101600151613c22565b61336060405180604001604052806007815260200166031ba3c17349d160cd1b815250826101800151613c22565b61338e60405180604001604052806008815260200167031ba3c1732321d160c51b8152508260800151613c22565b60006133d18260c001516133cb8461012001516133c58661010001516133c58860e001518960a0015161413d90919063ffffffff16565b9061413d565b90614188565b905060006133de826141d0565b905060006133fa8285610140015161413d90919063ffffffff16565b90506000613428856101800151613422670de0b6b3a76400008561422290919063ffffffff16565b90614283565b905060006134448287610160015161418890919063ffffffff16565b9998505050505050505050565b60006134a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142cf9092919063ffffffff16565b80519091501561146f57808060200190518101906134c49190614ac6565b61146f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610576565b6105898282604051602401613539929190614dce565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526142e6565b61146f83838360405160240161358093929190614df8565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b1790526142e6565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082015287908087600181111561360b5761360b6151b3565b9081600181111561361e5761361e6151b3565b9052506001600160a01b0386811660208301528581166040808401919091526060830186905251631f29a8cd60e31b8152600481018a905260009182919085169063f94d46689060240160006040518083038186803b15801561368057600080fd5b505afa158015613694573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136bc91908101906149f1565b5091509150600080856001600160a01b031663f6c009278d6040518263ffffffff1660e01b81526004016136f291815260200190565b604080518083038186803b15801561370957600080fd5b505afa15801561371d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137419190614954565b9092509050600081600281111561375a5761375a6151b3565b14156138935760008060005b86518160ff161015613802578c6001600160a01b0316878260ff1681518110613791576137916151df565b60200260200101516001600160a01b031614156137b3578060ff1692506137f0565b8b6001600160a01b0316878260ff16815181106137d2576137d26151df565b60200260200101516001600160a01b031614156137f0578060ff1691505b806137fa8161517d565b915050613766565b5060405162f64aa560e11b81526001600160a01b038516906301ec954a90613834908a90899087908790600401614fe7565b60206040518083038186803b15801561384c57600080fd5b505afa158015613860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138849190614b1e565b98505050505050505050612aa0565b60018160028111156138a7576138a76151b3565b14156139b25760008060005b86518160ff161015613981578c6001600160a01b0316878260ff16815181106138de576138de6151df565b60200260200101516001600160a01b0316141561391957858160ff168151811061390a5761390a6151df565b6020026020010151925061396f565b8b6001600160a01b0316878260ff1681518110613938576139386151df565b60200260200101516001600160a01b0316141561396f57858160ff1681518110613964576139646151df565b602002602001015191505b806139798161517d565b9150506138b3565b5060405163274b044360e21b81526001600160a01b03851690639d2c110c90613834908a9086908690600401615048565b60008060005b86518160ff161015613981578c6001600160a01b0316878260ff16815181106139e3576139e36151df565b60200260200101516001600160a01b03161415613a1e57858160ff1681518110613a0f57613a0f6151df565b60200260200101519250613a74565b8b6001600160a01b0316878260ff1681518110613a3d57613a3d6151df565b60200260200101516001600160a01b03161415613a7457858160ff1681518110613a6957613a696151df565b602002602001015191505b80613a7e8161517d565b9150506139b8565b6000613a9b8383670de0b6b3a7640000614307565b9392505050565b600080613b9283600001516001600160a01b031663245c96856040518163ffffffff1660e01b815260040160206040518083038186803b158015613ae557600080fd5b505afa158015613af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1d9190614b1e565b84600001516001600160a01b0316637c9b8e896040518163ffffffff1660e01b815260040160206040518083038186803b158015613b5a57600080fd5b505afa158015613b6e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cb9190614b1e565b9050600083600001516001600160a01b031663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b158015613bd357600080fd5b505afa158015613be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0b9190614b1e565b90506000613c198383614320565b95945050505050565b6105898282604051602401613c38929190614e26565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526142e6565b60008082600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ca757600080fd5b505afa158015613cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cdf9190614b1e565b9050600083600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d2057600080fd5b505afa158015613d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d589190614b1e565b90506000613d7e613d786004613d72858960400151614338565b90614222565b84614356565b9050613d9e613d99670de0b6b3a7640000613d72848261413d565b6141d0565b90506000613dc7613db783670de0b6b3a7640000614188565b613dc2856002614222565b614356565b9050612aa084613ddf670de0b6b3a76400008461413d565b61436e565b60006114be82602001516133cb600285600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3057600080fd5b505afa158015613e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d729190614b1e565b60608101516000906114be90613e7e9080614222565b60408401516133c59080614222565b600080613f24670de0b6b3a76400006134226002613d7287600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ee157600080fd5b505afa158015613ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f199190614b1e565b604089015190614222565b90506000613f47826133c58660400151876080015161413d90919063ffffffff16565b90506000613c196002613d7287606001518561422290919063ffffffff16565b60006114be6002613d728460400151856080015161422290919063ffffffff16565b60006114be670de0b6b3a76400006134226002613d7286600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fdc57600080fd5b505afa158015613ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140149190614b1e565b60e088015190614222565b60808101516000906114be9080614222565b60006114be82608001516133cb8460400151856060015161413d90919063ffffffff16565b60006114be82608001516133cb84600001516001600160a01b031663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156140a057600080fd5b505afa1580156140b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d89190614b1e565b60608601519061413d565b60006114be6140fb6002670de0b6b3a7640000614222565b6133c5600285600001516001600160a01b031663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3057600080fd5b60008061414a83856150c2565b905083811015613a9b5760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b6044820152606401610576565b6000828211156141c65760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b6044820152606401610576565b613a9b828461511b565b6000806141de6002846150da565b6141e99060016150c2565b90508291505b818110156117a05790508060028161420781866150da565b61421191906150c2565b61421b91906150da565b90506141ef565b600082614231575060006114be565b600061423d83856150fc565b90508261424a85836150da565b14613a9b5760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b6044820152606401610576565b60008082116142c55760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b6044820152606401610576565b613a9b82846150da565b60606142de848460008561438d565b949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008061431485856144b5565b9050613c1981846144c1565b6000613a9b8261342285670de0b6b3a7640000614222565b6000613a9b670de0b6b3a76400006143508585614222565b906144cd565b6000613a9b8261435085670de0b6b3a7640000614222565b6000670de0b6b3a76400006143838484614222565b613a9b91906150da565b6060824710156143ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610576565b843b61443c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610576565b600080866001600160a01b031685876040516144589190614c98565b60006040518083038185875af1925050503d8060008114614495576040519150601f19603f3d011682016040523d82523d6000602084013e61449a565b606091505b50915091506144aa828286614516565b979650505050505050565b6000613a9b82846150fc565b6000613a9b82846150da565b6000806144da8484614283565b905060006144e884836150fc565b6144f2908661511b565b9050801561450e576145058260016150c2565b925050506114be565b5090506114be565b60608315614525575081613a9b565b8251156145355782518084602001fd5b8160405162461bcd60e51b81526004016105769190614dbb565b8280548282559060005260206000209081019282156145a2579160200282015b828111156145a25781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061456f565b506145ae9291506145b2565b5090565b5b808211156145ae57600081556001016145b3565b80356145d28161520b565b919050565b60008083601f8401126145e957600080fd5b50813567ffffffffffffffff81111561460157600080fd5b6020830191508360208260051b850101111561461c57600080fd5b9250929050565b600082601f83011261463457600080fd5b815160206146496146448361509e565b61506d565b80838252828201915082860187848660051b890101111561466957600080fd5b60005b858110156146885781518452928401929084019060010161466c565b5090979650505050505050565b6000602082840312156146a757600080fd5b8135613a9b8161520b565b600080604083850312156146c557600080fd5b82356146d08161520b565b915060208301356146e08161520b565b809150509250929050565b60008060008060008060008060a0898b03121561470757600080fd5b88356147128161520b565b975060208901356147228161520b565b9650604089013567ffffffffffffffff8082111561473f57600080fd5b61474b8c838d016145d7565b909850965060608b013591508082111561476457600080fd5b6147708c838d016145d7565b909650945060808b013591508082111561478957600080fd5b506147968b828c016145d7565b999c989b5096995094979396929594505050565b6000806000806000806000806000806000806101008d8f0312156147cd57600080fd5b6147d68d6145c7565b9b506147e460208e016145c7565b9a5067ffffffffffffffff60408e013511156147ff57600080fd5b61480f8e60408f01358f016145d7565b909a50985067ffffffffffffffff60608e0135111561482d57600080fd5b61483d8e60608f01358f016145d7565b909850965067ffffffffffffffff60808e0135111561485b57600080fd5b61486b8e60808f01358f016145d7565b909650945061487c60a08e016145c7565b935061488a60c08e016145c7565b925067ffffffffffffffff60e08e013511156148a557600080fd5b6148b58e60e08f01358f016145d7565b81935080925050509295989b509295989b509295989b565b600080600080608085870312156148e357600080fd5b84356148ee8161520b565b935060208501356148fe8161520b565b93969395505050506040820135916060013590565b60008060006060848603121561492857600080fd5b83356149338161520b565b925060208401356149438161520b565b929592945050506040919091013590565b6000806040838503121561496757600080fd5b82516149728161520b565b60208401519092506146e081615220565b6000806040838503121561499657600080fd5b82356149a18161520b565b946020939093013593505050565b600080602083850312156149c257600080fd5b823567ffffffffffffffff8111156149d957600080fd5b6149e5858286016145d7565b90969095509350505050565b600080600060608486031215614a0657600080fd5b835167ffffffffffffffff80821115614a1e57600080fd5b818601915086601f830112614a3257600080fd5b81516020614a426146448361509e565b8083825282820191508286018b848660051b8901011115614a6257600080fd5b600096505b84871015614a8e578051614a7a8161520b565b835260019690960195918301918301614a67565b5091890151919750909350505080821115614aa857600080fd5b50614ab586828701614623565b925050604084015190509250925092565b600060208284031215614ad857600080fd5b81518015158114613a9b57600080fd5b600060208284031215614afa57600080fd5b8151613a9b81615220565b600060208284031215614b1757600080fd5b5035919050565b600060208284031215614b3057600080fd5b5051919050565b60008060408385031215614b4a57600080fd5b505080516020909101519092909150565b600081518084526020808501945080840160005b83811015614b945781516001600160a01b031687529582019590820190600101614b6f565b509495945050505050565b60008151808452614bb7816020860160208601615132565b601f01601f19169290920160200192915050565b60028110614be957634e487b7160e01b600052602160045260246000fd5b9052565b6000610120614bfd848451614bcb565b6020838101516001600160a01b03169085015260408084015190614c2b908601826001600160a01b03169052565b50606083015160608501526080830151608085015260a083015160a085015260c0830151614c6460c08601826001600160a01b03169052565b5060e0830151614c7f60e08601826001600160a01b03169052565b50610100808401518282870152612aa083870182614b9f565b60008251614caa818460208701615132565b9190910192915050565b6001600160a01b03898116825288166020820152604081018790526060810186905261010060808201819052600090614cef83820188614b5b565b60a0840196909652505091151560c083015260e09091015295945050505050565b602081526000613a9b6020830184614b5b565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015614d6d5781546001600160a01b031684529284019260019182019101614d48565b505050838103828501528481528590820160005b86811015614daf578235614d948161520b565b6001600160a01b031682529183019190830190600101614d81565b50979650505050505050565b602081526000613a9b6020830184614b9f565b604081526000614de16040830185614b9f565b905060018060a01b03831660208301529392505050565b606081526000614e0b6060830186614b9f565b6001600160a01b039490941660208301525060400152919050565b604081526000614e396040830185614b9f565b90508260208301529392505050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60e08152845160e082015260006020860151614f4c610100840182614bcb565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152614f956101a0840182614b9f565b915050614fd5602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b608081526000614ffa6080830187614bed565b82810360208481019190915286518083528782019282019060005b8181101561503157845183529383019391830191600101615015565b505060408501969096525050506060015292915050565b60608152600061505b6060830186614bed565b60208301949094525060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715615096576150966151f5565b604052919050565b600067ffffffffffffffff8211156150b8576150b86151f5565b5060051b60200190565b600082198211156150d5576150d561519d565b500190565b6000826150f757634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156151165761511661519d565b500290565b60008282101561512d5761512d61519d565b500390565b60005b8381101561514d578181015183820152602001615135565b8381111561515c576000848401525b50505050565b60006000198214156151765761517661519d565b5060010190565b600060ff821660ff8114156151945761519461519d565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612efa57600080fd5b60038110612efa57600080fdfe48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73a2646970667358221220e2a4255d08fef2a3ca22e223a31c313827483947af9312395b4dda13945590c264736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance()": {
        "details": "Get the total primary stable value held in the platform.      This includes any interest that was generated since depositing.",
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated reward token and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit an amount of asset into the platform",
        "params": {
          "_amount": "Units of asset to deposit",
          "_asset": "Address for the asset"
        }
      },
      "depositAll()": {
        "details": "Deposit balance of all supported assets into the platform"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address,address,address[],address[],address[],address,address,address[])": {
        "params": {
          "_assets": "Addresses of supported assets. MUST be passed in the same                order as returned by coins on the pool contract, i.e.                USDC",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Address of the nUSD",
          "_rewardTokenAddresses": "Address of USDC",
          "_vaultAddress": "Address of the vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "setHarvesterAddress(address)": {
        "details": "Set the reward token addresses.",
        "params": {
          "_harvesterAddress": "Address of the harvester"
        }
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward token"
        }
      },
      "supportsAsset(address)": {
        "details": "Check if an asset is supported.",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "_0": "bool     Whether asset is supported"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address[],address[],address[],address,address,address[])": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Dodo strategies don't fit well within that abstraction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30623,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30626,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30666,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30750,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 30752,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 30756,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 30759,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30761,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 30763,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "_deprecated_rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30765,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "harvesterAddress",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 30768,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30772,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_int256)98_storage"
      },
      {
        "astId": 7210,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7220,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoV1Helper",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IDODOV1Helper)4579"
      },
      {
        "astId": 7223,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoProxy",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IDODOProxy)4379"
      },
      {
        "astId": 7225,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoApprove",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 20473,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "usdtToken",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 20476,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoToken",
        "offset": 0,
        "slot": "210",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 20479,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "wmaticToken",
        "offset": 0,
        "slot": "211",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 20482,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "usdcLPToken",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 20485,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "primaryStable",
        "offset": 0,
        "slot": "213",
        "type": "t_contract(IERC20)623"
      },
      {
        "astId": 20488,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoV1UsdcUsdtPool",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IDODOV1)4558"
      },
      {
        "astId": 20491,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoV2DodoUsdtPool",
        "offset": 0,
        "slot": "215",
        "type": "t_contract(IDODOV2)4604"
      },
      {
        "astId": 20494,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "dodoMine",
        "offset": 0,
        "slot": "216",
        "type": "t_contract(IDODOMine)4332"
      },
      {
        "astId": 20496,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "balancerPoolIdUsdcTusdDaiUsdt",
        "offset": 0,
        "slot": "217",
        "type": "t_bytes32"
      },
      {
        "astId": 20498,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "balancerPoolIdWmaticUsdcWethBal",
        "offset": 0,
        "slot": "218",
        "type": "t_bytes32"
      },
      {
        "astId": 20500,
        "contract": "contracts/strategies/DodoStrategy.sol:DodoStrategy",
        "label": "balancerVault",
        "offset": 0,
        "slot": "219",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)98_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDODOMine)4332": {
        "encoding": "inplace",
        "label": "contract IDODOMine",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOProxy)4379": {
        "encoding": "inplace",
        "label": "contract IDODOProxy",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1)4558": {
        "encoding": "inplace",
        "label": "contract IDODOV1",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV1Helper)4579": {
        "encoding": "inplace",
        "label": "contract IDODOV1Helper",
        "numberOfBytes": "20"
      },
      "t_contract(IDODOV2)4604": {
        "encoding": "inplace",
        "label": "contract IDODOV2",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}