{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_pToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousGovernor",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newGovernor",
						"type": "address"
					}
				],
				"name": "GovernorshipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_oldHarvesterAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_newHarvesterAddress",
						"type": "address"
					}
				],
				"name": "HarvesterAddressesUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_pToken",
						"type": "address"
					}
				],
				"name": "PTokenAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_pToken",
						"type": "address"
					}
				],
				"name": "PTokenRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousGovernor",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newGovernor",
						"type": "address"
					}
				],
				"name": "PendingGovernorshipTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "_oldAddresses",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "_newAddresses",
						"type": "address[]"
					}
				],
				"name": "RewardTokenAddressesUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "rewardToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "RewardTokenCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_pToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "Withdrawal",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "_deprecated_rewardLiquidationThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_deprecated_rewardTokenAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "assetToPToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					}
				],
				"name": "checkBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimGovernance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "collectRewardTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "depositAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardTokenAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "governor",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "harvesterAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_platformAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_vaultAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_rewardTokenAddresses",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "_assets",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "_pTokens",
						"type": "address[]"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isGovernor",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "platformAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_assetIndex",
						"type": "uint256"
					}
				],
				"name": "removePToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rewardTokenAddresses",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "safeApproveAllTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_harvesterAddress",
						"type": "address"
					}
				],
				"name": "setHarvesterAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_pToken",
						"type": "address"
					}
				],
				"name": "setPTokenAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_rewardTokenAddresses",
						"type": "address[]"
					}
				],
				"name": "setRewardTokenAddresses",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					}
				],
				"name": "supportsAsset",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newGovernor",
						"type": "address"
					}
				],
				"name": "transferGovernance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transferToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vaultAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"checkBalance(address)": {
					"details": "Get the total asset value held in the platform.      This includes any interest that was generated since depositing.",
					"params": {
						"_asset": "Address of the asset"
					},
					"returns": {
						"balance": "   Total value of the asset in the platform"
					}
				},
				"claimGovernance()": {
					"details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
				},
				"collectRewardTokens()": {
					"details": "Collect accumulated reward token and send to Vault."
				},
				"deposit(address,uint256)": {
					"details": "Deposit an amount of asset into the platform",
					"params": {
						"_amount": "Units of asset to deposit",
						"_asset": "Address for the asset"
					}
				},
				"depositAll()": {
					"details": "Deposit balance of all supported assets into the platform"
				},
				"getRewardTokenAddresses()": {
					"details": "Get the reward token addresses.",
					"returns": {
						"_0": "address[] the reward token addresses."
					}
				},
				"governor()": {
					"details": "Returns the address of the current Governor."
				},
				"initialize(address,address,address[],address[],address[])": {
					"details": "Internal initialize function, to set up initial internal state",
					"params": {
						"_assets": "Addresses of initial supported assets",
						"_pTokens": "Platform Token corresponding addresses",
						"_platformAddress": "Generic platform address",
						"_rewardTokenAddresses": "Address of reward token for platform",
						"_vaultAddress": "Address of the Vault"
					}
				},
				"isGovernor()": {
					"details": "Returns true if the caller is the current Governor."
				},
				"removePToken(uint256)": {
					"details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
					"params": {
						"_assetIndex": "Index of the asset to be removed"
					}
				},
				"setHarvesterAddress(address)": {
					"details": "Set the reward token addresses.",
					"params": {
						"_harvesterAddress": "Address of the harvester"
					}
				},
				"setPTokenAddress(address,address)": {
					"details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
					"params": {
						"_asset": "Address for the asset",
						"_pToken": "Address for the corresponding platform token"
					}
				},
				"setRewardTokenAddresses(address[])": {
					"details": "Set the reward token addresses.",
					"params": {
						"_rewardTokenAddresses": "Address array of the reward token"
					}
				},
				"supportsAsset(address)": {
					"details": "Check if an asset is supported.",
					"params": {
						"_asset": "Address of the asset"
					},
					"returns": {
						"_0": "bool     Whether asset is supported"
					}
				},
				"transferGovernance(address)": {
					"details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
					"params": {
						"_newGovernor": "Address of the new Governor"
					}
				},
				"transferToken(address,uint256)": {
					"details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
					"params": {
						"_amount": "Amount of the asset to transfer",
						"_asset": "Address for the asset"
					}
				},
				"withdraw(address,address,uint256)": {
					"details": "Withdraw an amount of asset from the platform.",
					"params": {
						"_amount": "Units of asset to withdraw",
						"_asset": "Address of the asset",
						"_recipient": "Address to which the asset should be sent"
					}
				},
				"withdrawAll()": {
					"details": "Withdraw all assets from strategy sending assets to Vault."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/utils/InitializableAbstractStrategy.sol": "InitializableAbstractStrategy"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e",
				"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
				"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		},
		"contracts/contracts/governance/Governable.sol": {
			"keccak256": "0xe5e82e9c9b2611b9cc82e2a047cb7fed850133eecc5a070ee61093c348bcc976",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://752df48fe4a3578b2a08f7518a261eb340bc7940ecb3d24929d7c2af1ed24c91",
				"dweb:/ipfs/QmbHseRzFZqTuoKzavEgWSZveBMPT5hjgcZP2xWUUgaTTU"
			]
		},
		"contracts/contracts/utils/Initializable.sol": {
			"keccak256": "0x515139ff0a6efe16dff538df1289eed43bde7f5ee01e7bf17dab7da94f09179b",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://a3ead74590e09e3c829b41f038bce447762fbd27701b22cc3c1f9fc8d12c3055",
				"dweb:/ipfs/QmT3B1cNxa3aZqxKhCoeYqdysYSncCuMZoYjwevwfPKv2T"
			]
		},
		"contracts/contracts/utils/InitializableAbstractStrategy.sol": {
			"keccak256": "0xfadaa5f99f4a496a2544726a681eeb6e1bc68c3087d880c0c54188847ebde077",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://51975ac8720bdc70089a1986e92da760b7c8c2cd08c607b4a25b760c2cc634c4",
				"dweb:/ipfs/QmXqar1Htuk5E31CtCiZA6rKL3umazTdVF8wjr1DMQRPwD"
			]
		}
	},
	"version": 1
}